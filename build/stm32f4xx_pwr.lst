ARM GAS  /tmp/cckE3D8Q.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	PWR_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	PWR_DeInit:
  27              	.LFB130:
  28              		.file 1 "Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.2
   6:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    05-March-2012
   7:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Main and Backup Regulators configuration
  13:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - FLASH Power Down configuration
  14:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  21:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  22:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  23:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * You may not use this file except in compliance with the License.
  24:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * You may obtain a copy of the License at:
  25:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  26:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  27:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  28:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * Unless required by applicable law or agreed to in writing, software 
  29:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  30:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  /tmp/cckE3D8Q.s 			page 2


  31:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * See the License for the specific language governing permissions and
  32:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * limitations under the License.
  33:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  34:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  35:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  36:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  37:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  38:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  39:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  40:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  41:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  42:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  43:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  44:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  45:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  46:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  47:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  48:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  49:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  50:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  51:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  52:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  53:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  54:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  55:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  56:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  57:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  58:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  59:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  60:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  61:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  62:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  63:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  64:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  65:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  66:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  67:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  68:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  69:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  70:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  71:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  72:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  73:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  74:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  75:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  76:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  77:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  78:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  79:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  80:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  81:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  83:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  84:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  85:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  87:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
ARM GAS  /tmp/cckE3D8Q.s 			page 3


  88:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  89:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  90:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  91:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  92:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  93:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  94:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  95:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  96:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  97:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  98:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  99:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 100:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 101:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
 102:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
 103:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 104:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 105:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 106:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 107:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 108:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 109:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 110:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 111:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 112:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 113:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 114:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 115:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 116:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 117:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 118:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 119:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 121:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 122:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 123:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 124:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 125:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 126:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 127:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  29              		.loc 1 127 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 128:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  38              		.loc 1 128 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4FF08050 		mov	r0, #268435456
  41 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  42              	.LVL0:
 129:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 129 3 view .LVU2
ARM GAS  /tmp/cckE3D8Q.s 			page 4


  44 000c 0021     		movs	r1, #0
  45 000e 4FF08050 		mov	r0, #268435456
  46 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  47              	.LVL1:
 130:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  48              		.loc 1 130 1 is_stmt 0 view .LVU3
  49 0016 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE130:
  53              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  54              		.align	1
  55              		.global	PWR_BackupAccessCmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	PWR_BackupAccessCmd:
  62              	.LVL2:
  63              	.LFB131:
 131:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 132:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 133:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 134:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 135:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 136:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 137:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 138:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 139:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 140:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 141:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 142:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  64              		.loc 1 142 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
 143:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 144:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  69              		.loc 1 144 3 view .LVU5
 145:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 146:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  70              		.loc 1 146 3 view .LVU6
  71              		.loc 1 146 32 is_stmt 0 view .LVU7
  72 0000 014B     		ldr	r3, .L4
  73 0002 1860     		str	r0, [r3]
 147:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  74              		.loc 1 147 1 view .LVU8
  75 0004 7047     		bx	lr
  76              	.L5:
  77 0006 00BF     		.align	2
  78              	.L4:
  79 0008 20000E42 		.word	1108213792
  80              		.cfi_endproc
  81              	.LFE131:
  83              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  84              		.align	1
  85              		.global	PWR_PVDLevelConfig
ARM GAS  /tmp/cckE3D8Q.s 			page 5


  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv4-sp-d16
  91              	PWR_PVDLevelConfig:
  92              	.LVL3:
  93              	.LFB132:
 148:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 149:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 150:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 151:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 152:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 153:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 154:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 155:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 156:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 157:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 158:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 159:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 160:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 161:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 162:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 163:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 164:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 165:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 166:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 167:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 168:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 169:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 170:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 171:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 172:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 173:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 174:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 175:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 176:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0
 177:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1
 178:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2
 179:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3
 180:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4
 181:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5
 182:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6
 183:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7
 184:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
 185:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 186:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         detection level.
 187:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 188:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 189:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 190:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  94              		.loc 1 190 1 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
 191:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
  99              		.loc 1 191 3 view .LVU10
ARM GAS  /tmp/cckE3D8Q.s 			page 6


 192:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 194:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 100              		.loc 1 194 3 view .LVU11
 195:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 101              		.loc 1 196 3 view .LVU12
 102              		.loc 1 196 10 is_stmt 0 view .LVU13
 103 0000 034A     		ldr	r2, .L7
 104 0002 1368     		ldr	r3, [r2]
 105              	.LVL4:
 197:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 198:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 199:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 106              		.loc 1 199 3 is_stmt 1 view .LVU14
 107              		.loc 1 199 10 is_stmt 0 view .LVU15
 108 0004 23F0E003 		bic	r3, r3, #224
 109              	.LVL5:
 200:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 201:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 202:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 110              		.loc 1 202 3 is_stmt 1 view .LVU16
 111              		.loc 1 202 10 is_stmt 0 view .LVU17
 112 0008 0343     		orrs	r3, r3, r0
 113              	.LVL6:
 203:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 204:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 205:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 114              		.loc 1 205 3 is_stmt 1 view .LVU18
 115              		.loc 1 205 11 is_stmt 0 view .LVU19
 116 000a 1360     		str	r3, [r2]
 206:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 117              		.loc 1 206 1 view .LVU20
 118 000c 7047     		bx	lr
 119              	.L8:
 120 000e 00BF     		.align	2
 121              	.L7:
 122 0010 00700040 		.word	1073770496
 123              		.cfi_endproc
 124              	.LFE132:
 126              		.section	.text.PWR_PVDCmd,"ax",%progbits
 127              		.align	1
 128              		.global	PWR_PVDCmd
 129              		.syntax unified
 130              		.thumb
 131              		.thumb_func
 132              		.fpu fpv4-sp-d16
 134              	PWR_PVDCmd:
 135              	.LVL7:
 136              	.LFB133:
 207:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 208:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 209:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 210:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 211:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 212:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 213:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
ARM GAS  /tmp/cckE3D8Q.s 			page 7


 214:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 215:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 137              		.loc 1 215 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 216:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 217:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 142              		.loc 1 217 3 view .LVU22
 218:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 219:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 143              		.loc 1 219 3 view .LVU23
 144              		.loc 1 219 33 is_stmt 0 view .LVU24
 145 0000 014B     		ldr	r3, .L10
 146 0002 1860     		str	r0, [r3]
 220:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 147              		.loc 1 220 1 view .LVU25
 148 0004 7047     		bx	lr
 149              	.L11:
 150 0006 00BF     		.align	2
 151              	.L10:
 152 0008 10000E42 		.word	1108213776
 153              		.cfi_endproc
 154              	.LFE133:
 156              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 157              		.align	1
 158              		.global	PWR_WakeUpPinCmd
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	PWR_WakeUpPinCmd:
 165              	.LVL8:
 166              	.LFB134:
 221:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 222:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 223:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 224:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 225:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 227:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 228:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 229:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 230:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 231:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 232:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 233:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 235:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 236:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 237:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 238:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 239:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 240:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 241:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 242:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
ARM GAS  /tmp/cckE3D8Q.s 			page 8


 243:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 244:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 245:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 246:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 247:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 248:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 249:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 167              		.loc 1 249 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 250:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 251:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 172              		.loc 1 251 3 view .LVU27
 252:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 253:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 173              		.loc 1 253 3 view .LVU28
 174              		.loc 1 253 34 is_stmt 0 view .LVU29
 175 0000 014B     		ldr	r3, .L13
 176 0002 1860     		str	r0, [r3]
 254:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 177              		.loc 1 254 1 view .LVU30
 178 0004 7047     		bx	lr
 179              	.L14:
 180 0006 00BF     		.align	2
 181              	.L13:
 182 0008 A0000E42 		.word	1108213920
 183              		.cfi_endproc
 184              	.LFE134:
 186              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 187              		.align	1
 188              		.global	PWR_BackupRegulatorCmd
 189              		.syntax unified
 190              		.thumb
 191              		.thumb_func
 192              		.fpu fpv4-sp-d16
 194              	PWR_BackupRegulatorCmd:
 195              	.LVL9:
 196              	.LFB135:
 255:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 256:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 257:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 258:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 259:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 261:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Main and Backup Regulators configuration functions 
 262:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 263:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 264:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 265:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Main and Backup Regulators configuration functions
 266:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 267:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 269:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 270:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 271:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
ARM GAS  /tmp/cckE3D8Q.s 			page 9


 272:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 273:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 274:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 275:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 276:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 277:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 278:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 279:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 280:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 281:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 282:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 283:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 284:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 285:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 286:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The main internal regulator can be configured to have a tradeoff between performance
 287:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and power consumption when the device does not operate at the maximum frequency. 
 288:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    This is done through PWR_MainRegulatorModeConfig() function which configure VOS bit
 289:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    in PWR_CR register: 
 290:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is set (Regulator voltage output Scale 1 mode selected) the System
 291:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 168 MHz. 
 292:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is reset (Regulator voltage output Scale 2 mode selected) the System
 293:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 144 MHz. 
 294:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the datasheets for more details.
 295:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            
 296:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 297:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 298:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 299:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 300:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 301:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 302:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 303:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 304:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 305:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 306:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 307:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 197              		.loc 1 307 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 308:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 309:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 202              		.loc 1 309 3 view .LVU32
 310:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 311:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 203              		.loc 1 311 3 view .LVU33
 204              		.loc 1 311 33 is_stmt 0 view .LVU34
 205 0000 014B     		ldr	r3, .L16
 206 0002 1860     		str	r0, [r3]
 312:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 207              		.loc 1 312 1 view .LVU35
 208 0004 7047     		bx	lr
 209              	.L17:
 210 0006 00BF     		.align	2
 211              	.L16:
 212 0008 A4000E42 		.word	1108213924
ARM GAS  /tmp/cckE3D8Q.s 			page 10


 213              		.cfi_endproc
 214              	.LFE135:
 216              		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 217              		.align	1
 218              		.global	PWR_MainRegulatorModeConfig
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	PWR_MainRegulatorModeConfig:
 225              	.LVL10:
 226              	.LFB136:
 313:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 314:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 315:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 316:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 317:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 318:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 319:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 320:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 321:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 322:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 323:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 324:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 325:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 326:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 227              		.loc 1 327 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 328:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 329:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 232              		.loc 1 329 3 view .LVU37
 330:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 331:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 233              		.loc 1 331 3 view .LVU38
 234              		.loc 1 331 6 is_stmt 0 view .LVU39
 235 0000 28B9     		cbnz	r0, .L19
 332:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 333:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 236              		.loc 1 333 5 is_stmt 1 view .LVU40
 237              		.loc 1 333 13 is_stmt 0 view .LVU41
 238 0002 064A     		ldr	r2, .L21
 239 0004 1368     		ldr	r3, [r2]
 240 0006 23F48043 		bic	r3, r3, #16384
 241 000a 1360     		str	r3, [r2]
 242 000c 7047     		bx	lr
 243              	.L19:
 334:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 335:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 336:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {    
 337:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= PWR_Regulator_Voltage_Scale1;
 244              		.loc 1 337 5 is_stmt 1 view .LVU42
 245              		.loc 1 337 13 is_stmt 0 view .LVU43
 246 000e 034A     		ldr	r2, .L21
ARM GAS  /tmp/cckE3D8Q.s 			page 11


 247 0010 1368     		ldr	r3, [r2]
 248 0012 43F48043 		orr	r3, r3, #16384
 249 0016 1360     		str	r3, [r2]
 338:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 339:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 250              		.loc 1 339 1 view .LVU44
 251 0018 7047     		bx	lr
 252              	.L22:
 253 001a 00BF     		.align	2
 254              	.L21:
 255 001c 00700040 		.word	1073770496
 256              		.cfi_endproc
 257              	.LFE136:
 259              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 260              		.align	1
 261              		.global	PWR_FlashPowerDownCmd
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	PWR_FlashPowerDownCmd:
 268              	.LVL11:
 269              	.LFB137:
 340:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 341:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 343:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 344:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 345:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 346:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 347:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 348:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 349:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 350:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            FLASH Power Down configuration functions
 351:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 352:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 353:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 354:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 355:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 356:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 357:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 358:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 359:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 360:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 361:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 362:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 363:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 364:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 365:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 366:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 367:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 368:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 369:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 270              		.loc 1 369 1 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cckE3D8Q.s 			page 12


 274              		@ link register save eliminated.
 370:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 371:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 275              		.loc 1 371 3 view .LVU46
 372:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 373:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 276              		.loc 1 373 3 view .LVU47
 277              		.loc 1 373 33 is_stmt 0 view .LVU48
 278 0000 014B     		ldr	r3, .L24
 279 0002 1860     		str	r0, [r3]
 374:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 280              		.loc 1 374 1 view .LVU49
 281 0004 7047     		bx	lr
 282              	.L25:
 283 0006 00BF     		.align	2
 284              	.L24:
 285 0008 24000E42 		.word	1108213796
 286              		.cfi_endproc
 287              	.LFE137:
 289              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 290              		.align	1
 291              		.global	PWR_EnterSTOPMode
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	PWR_EnterSTOPMode:
 298              	.LVL12:
 299              	.LFB138:
 375:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 376:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 377:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 378:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 379:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 380:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 381:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 382:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 383:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 384:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 385:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 386:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 387:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 388:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 389:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 390:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 391:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 392:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 393:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 394:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 395:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 396:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 397:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 398:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 399:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 400:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 401:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 402:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
ARM GAS  /tmp/cckE3D8Q.s 			page 13


 403:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 404:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 405:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 406:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 407:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 408:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 409:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 410:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 411:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 412:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 413:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 414:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 415:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 416:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 417:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 418:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 419:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 420:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 421:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 422:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 423:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 424:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 425:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 426:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 427:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 428:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 429:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 430:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 431:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 432:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 433:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 434:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 435:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 436:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 437:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 438:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 439:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 440:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 441:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 442:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 443:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 444:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 445:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 446:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 447:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 448:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 449:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 450:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 451:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 452:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 453:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 454:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 455:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 456:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 457:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 458:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 459:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
ARM GAS  /tmp/cckE3D8Q.s 			page 14


 460:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 461:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 462:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 463:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 464:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 465:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 466:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 467:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 468:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 469:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 470:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 471:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 472:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 473:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 474:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 475:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 476:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 477:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 478:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 479:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 480:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 481:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 482:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 483:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 484:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 485:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 486:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 487:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 488:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 489:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 490:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 491:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 492:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 493:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 494:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 495:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 496:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 497:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 498:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 499:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 500:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 501:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 502:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 503:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 504:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 505:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 506:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 507:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 508:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 509:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 300              		.loc 1 509 1 is_stmt 1 view -0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 510:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 305              		.loc 1 510 3 view .LVU51
ARM GAS  /tmp/cckE3D8Q.s 			page 15


 511:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 512:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 513:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 306              		.loc 1 513 3 view .LVU52
 514:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 307              		.loc 1 514 3 view .LVU53
 515:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 516:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 517:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 308              		.loc 1 517 3 view .LVU54
 309              		.loc 1 517 10 is_stmt 0 view .LVU55
 310 0000 0A4A     		ldr	r2, .L30
 311 0002 1368     		ldr	r3, [r2]
 312              	.LVL13:
 518:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 519:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 313              		.loc 1 519 3 is_stmt 1 view .LVU56
 314              		.loc 1 519 10 is_stmt 0 view .LVU57
 315 0004 23F00303 		bic	r3, r3, #3
 316              	.LVL14:
 520:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 521:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 522:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 317              		.loc 1 522 3 is_stmt 1 view .LVU58
 318              		.loc 1 522 10 is_stmt 0 view .LVU59
 319 0008 0343     		orrs	r3, r3, r0
 320              	.LVL15:
 523:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 524:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 525:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 321              		.loc 1 525 3 is_stmt 1 view .LVU60
 322              		.loc 1 525 11 is_stmt 0 view .LVU61
 323 000a 1360     		str	r3, [r2]
 526:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 527:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 528:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 324              		.loc 1 528 3 is_stmt 1 view .LVU62
 325              		.loc 1 528 12 is_stmt 0 view .LVU63
 326 000c 084A     		ldr	r2, .L30+4
 327 000e 1369     		ldr	r3, [r2, #16]
 328              	.LVL16:
 329              		.loc 1 528 12 view .LVU64
 330 0010 43F00403 		orr	r3, r3, #4
 331 0014 1361     		str	r3, [r2, #16]
 332              	.LVL17:
 529:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 530:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 531:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 333              		.loc 1 531 3 is_stmt 1 view .LVU65
 334              		.loc 1 531 5 is_stmt 0 view .LVU66
 335 0016 0129     		cmp	r1, #1
 336 0018 06D0     		beq	.L29
 532:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 533:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 534:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 535:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 536:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
ARM GAS  /tmp/cckE3D8Q.s 			page 16


 537:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 538:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 539:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 337              		.loc 1 539 5 is_stmt 1 view .LVU67
 338              		.syntax unified
 339              	@ 539 "Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c" 1
 340 001a 20BF     		wfe
 341              	@ 0 "" 2
 342              		.thumb
 343              		.syntax unified
 344              	.L28:
 540:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 541:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 542:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 345              		.loc 1 542 3 view .LVU68
 346              		.loc 1 542 12 is_stmt 0 view .LVU69
 347 001c 044A     		ldr	r2, .L30+4
 348 001e 1369     		ldr	r3, [r2, #16]
 349 0020 23F00403 		bic	r3, r3, #4
 350 0024 1361     		str	r3, [r2, #16]
 543:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 351              		.loc 1 543 1 view .LVU70
 352 0026 7047     		bx	lr
 353              	.L29:
 534:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 354              		.loc 1 534 5 is_stmt 1 view .LVU71
 355              		.syntax unified
 356              	@ 534 "Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c" 1
 357 0028 30BF     		wfi
 358              	@ 0 "" 2
 359              		.thumb
 360              		.syntax unified
 361 002a F7E7     		b	.L28
 362              	.L31:
 363              		.align	2
 364              	.L30:
 365 002c 00700040 		.word	1073770496
 366 0030 00ED00E0 		.word	-536810240
 367              		.cfi_endproc
 368              	.LFE138:
 370              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 371              		.align	1
 372              		.global	PWR_EnterSTANDBYMode
 373              		.syntax unified
 374              		.thumb
 375              		.thumb_func
 376              		.fpu fpv4-sp-d16
 378              	PWR_EnterSTANDBYMode:
 379              	.LFB139:
 544:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 545:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 546:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 547:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 548:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 549:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 550:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 551:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
ARM GAS  /tmp/cckE3D8Q.s 			page 17


 552:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 553:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 554:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 555:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 556:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 557:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 380              		.loc 1 557 1 view -0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 558:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 559:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 385              		.loc 1 559 3 view .LVU73
 386              		.loc 1 559 11 is_stmt 0 view .LVU74
 387 0000 074B     		ldr	r3, .L33
 388 0002 1A68     		ldr	r2, [r3]
 389 0004 42F00402 		orr	r2, r2, #4
 390 0008 1A60     		str	r2, [r3]
 560:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 561:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 562:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 391              		.loc 1 562 3 is_stmt 1 view .LVU75
 392              		.loc 1 562 11 is_stmt 0 view .LVU76
 393 000a 1A68     		ldr	r2, [r3]
 394 000c 42F00202 		orr	r2, r2, #2
 395 0010 1A60     		str	r2, [r3]
 563:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 564:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 565:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 396              		.loc 1 565 3 is_stmt 1 view .LVU77
 397              		.loc 1 565 12 is_stmt 0 view .LVU78
 398 0012 044A     		ldr	r2, .L33+4
 399 0014 1369     		ldr	r3, [r2, #16]
 400 0016 43F00403 		orr	r3, r3, #4
 401 001a 1361     		str	r3, [r2, #16]
 566:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 567:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 568:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 569:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 570:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 571:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 572:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 402              		.loc 1 572 3 is_stmt 1 view .LVU79
 403              		.syntax unified
 404              	@ 572 "Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c" 1
 405 001c 30BF     		wfi
 406              	@ 0 "" 2
 573:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 407              		.loc 1 573 1 is_stmt 0 view .LVU80
 408              		.thumb
 409              		.syntax unified
 410 001e 7047     		bx	lr
 411              	.L34:
 412              		.align	2
 413              	.L33:
 414 0020 00700040 		.word	1073770496
ARM GAS  /tmp/cckE3D8Q.s 			page 18


 415 0024 00ED00E0 		.word	-536810240
 416              		.cfi_endproc
 417              	.LFE139:
 419              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 420              		.align	1
 421              		.global	PWR_GetFlagStatus
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu fpv4-sp-d16
 427              	PWR_GetFlagStatus:
 428              	.LVL18:
 429              	.LFB140:
 574:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 575:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 576:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 577:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 578:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 579:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 580:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 581:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 582:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 583:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 584:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 585:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 586:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 587:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 588:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 589:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 590:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 591:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 592:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 593:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 594:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 595:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 596:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 597:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 598:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 599:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 600:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 601:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 602:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 603:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 604:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 605:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 606:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 607:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 608:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 609:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 610:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready. 
 611:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 612:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 613:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 614:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 430              		.loc 1 614 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cckE3D8Q.s 			page 19


 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 615:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 435              		.loc 1 615 3 view .LVU82
 616:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 617:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 618:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 436              		.loc 1 618 3 view .LVU83
 619:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 620:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 437              		.loc 1 620 3 view .LVU84
 438              		.loc 1 620 11 is_stmt 0 view .LVU85
 439 0000 034B     		ldr	r3, .L38
 440 0002 5B68     		ldr	r3, [r3, #4]
 441              		.loc 1 620 6 view .LVU86
 442 0004 0342     		tst	r3, r0
 443 0006 01D0     		beq	.L37
 621:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 622:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 444              		.loc 1 622 15 view .LVU87
 445 0008 0120     		movs	r0, #1
 446              	.LVL19:
 447              		.loc 1 622 15 view .LVU88
 448 000a 7047     		bx	lr
 449              	.LVL20:
 450              	.L37:
 623:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 624:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 625:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 626:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 451              		.loc 1 626 15 view .LVU89
 452 000c 0020     		movs	r0, #0
 453              	.LVL21:
 627:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 628:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 629:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 454              		.loc 1 629 3 is_stmt 1 view .LVU90
 630:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 455              		.loc 1 630 1 is_stmt 0 view .LVU91
 456 000e 7047     		bx	lr
 457              	.L39:
 458              		.align	2
 459              	.L38:
 460 0010 00700040 		.word	1073770496
 461              		.cfi_endproc
 462              	.LFE140:
 464              		.section	.text.PWR_ClearFlag,"ax",%progbits
 465              		.align	1
 466              		.global	PWR_ClearFlag
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	PWR_ClearFlag:
 473              	.LVL22:
 474              	.LFB141:
 631:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
ARM GAS  /tmp/cckE3D8Q.s 			page 20


 632:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 633:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 634:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 635:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 636:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 637:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 638:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 639:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 640:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 641:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 475              		.loc 1 641 1 is_stmt 1 view -0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 642:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 643:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 480              		.loc 1 643 3 view .LVU93
 644:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 645:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 481              		.loc 1 645 3 view .LVU94
 482              		.loc 1 645 11 is_stmt 0 view .LVU95
 483 0000 024A     		ldr	r2, .L41
 484 0002 1368     		ldr	r3, [r2]
 485 0004 43EA8003 		orr	r3, r3, r0, lsl #2
 486 0008 1360     		str	r3, [r2]
 646:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 487              		.loc 1 646 1 view .LVU96
 488 000a 7047     		bx	lr
 489              	.L42:
 490              		.align	2
 491              	.L41:
 492 000c 00700040 		.word	1073770496
 493              		.cfi_endproc
 494              	.LFE141:
 496              		.text
 497              	.Letext0:
 498              		.file 2 "/home/way/Programs/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 499              		.file 3 "/home/way/Programs/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 500              		.file 4 "Drivers/CMSIS/Core/Include/core_cm4.h"
 501              		.file 5 "Inc/system_stm32f4xx.h"
 502              		.file 6 "Inc/stm32f4xx.h"
 503              		.file 7 "Drivers/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cckE3D8Q.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_pwr.c
     /tmp/cckE3D8Q.s:18     .text.PWR_DeInit:0000000000000000 $t
     /tmp/cckE3D8Q.s:26     .text.PWR_DeInit:0000000000000000 PWR_DeInit
     /tmp/cckE3D8Q.s:54     .text.PWR_BackupAccessCmd:0000000000000000 $t
     /tmp/cckE3D8Q.s:61     .text.PWR_BackupAccessCmd:0000000000000000 PWR_BackupAccessCmd
     /tmp/cckE3D8Q.s:79     .text.PWR_BackupAccessCmd:0000000000000008 $d
     /tmp/cckE3D8Q.s:84     .text.PWR_PVDLevelConfig:0000000000000000 $t
     /tmp/cckE3D8Q.s:91     .text.PWR_PVDLevelConfig:0000000000000000 PWR_PVDLevelConfig
     /tmp/cckE3D8Q.s:122    .text.PWR_PVDLevelConfig:0000000000000010 $d
     /tmp/cckE3D8Q.s:127    .text.PWR_PVDCmd:0000000000000000 $t
     /tmp/cckE3D8Q.s:134    .text.PWR_PVDCmd:0000000000000000 PWR_PVDCmd
     /tmp/cckE3D8Q.s:152    .text.PWR_PVDCmd:0000000000000008 $d
     /tmp/cckE3D8Q.s:157    .text.PWR_WakeUpPinCmd:0000000000000000 $t
     /tmp/cckE3D8Q.s:164    .text.PWR_WakeUpPinCmd:0000000000000000 PWR_WakeUpPinCmd
     /tmp/cckE3D8Q.s:182    .text.PWR_WakeUpPinCmd:0000000000000008 $d
     /tmp/cckE3D8Q.s:187    .text.PWR_BackupRegulatorCmd:0000000000000000 $t
     /tmp/cckE3D8Q.s:194    .text.PWR_BackupRegulatorCmd:0000000000000000 PWR_BackupRegulatorCmd
     /tmp/cckE3D8Q.s:212    .text.PWR_BackupRegulatorCmd:0000000000000008 $d
     /tmp/cckE3D8Q.s:217    .text.PWR_MainRegulatorModeConfig:0000000000000000 $t
     /tmp/cckE3D8Q.s:224    .text.PWR_MainRegulatorModeConfig:0000000000000000 PWR_MainRegulatorModeConfig
     /tmp/cckE3D8Q.s:255    .text.PWR_MainRegulatorModeConfig:000000000000001c $d
     /tmp/cckE3D8Q.s:260    .text.PWR_FlashPowerDownCmd:0000000000000000 $t
     /tmp/cckE3D8Q.s:267    .text.PWR_FlashPowerDownCmd:0000000000000000 PWR_FlashPowerDownCmd
     /tmp/cckE3D8Q.s:285    .text.PWR_FlashPowerDownCmd:0000000000000008 $d
     /tmp/cckE3D8Q.s:290    .text.PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/cckE3D8Q.s:297    .text.PWR_EnterSTOPMode:0000000000000000 PWR_EnterSTOPMode
     /tmp/cckE3D8Q.s:365    .text.PWR_EnterSTOPMode:000000000000002c $d
     /tmp/cckE3D8Q.s:371    .text.PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cckE3D8Q.s:378    .text.PWR_EnterSTANDBYMode:0000000000000000 PWR_EnterSTANDBYMode
     /tmp/cckE3D8Q.s:414    .text.PWR_EnterSTANDBYMode:0000000000000020 $d
     /tmp/cckE3D8Q.s:420    .text.PWR_GetFlagStatus:0000000000000000 $t
     /tmp/cckE3D8Q.s:427    .text.PWR_GetFlagStatus:0000000000000000 PWR_GetFlagStatus
     /tmp/cckE3D8Q.s:460    .text.PWR_GetFlagStatus:0000000000000010 $d
     /tmp/cckE3D8Q.s:465    .text.PWR_ClearFlag:0000000000000000 $t
     /tmp/cckE3D8Q.s:472    .text.PWR_ClearFlag:0000000000000000 PWR_ClearFlag
     /tmp/cckE3D8Q.s:492    .text.PWR_ClearFlag:000000000000000c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
