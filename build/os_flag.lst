ARM GAS  /tmp/ccgMzuMT.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"os_flag.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.OS_FlagBlock,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	OS_FlagBlock:
  26              	.LVL0:
  27              	.LFB9:
  28              		.file 1 "uCOSII/Source/os_flag.c"
   1:uCOSII/Source/os_flag.c **** /*
   2:uCOSII/Source/os_flag.c **** ***************************************************************************************************
   3:uCOSII/Source/os_flag.c **** *                                                uC/OS-II
   4:uCOSII/Source/os_flag.c **** *                                          The Real-Time Kernel
   5:uCOSII/Source/os_flag.c **** *                                         EVENT FLAG  MANAGEMENT
   6:uCOSII/Source/os_flag.c **** *
   7:uCOSII/Source/os_flag.c **** *                              (c) Copyright 1992-2013, Micrium, Weston, FL
   8:uCOSII/Source/os_flag.c **** *                                           All Rights Reserved
   9:uCOSII/Source/os_flag.c **** *
  10:uCOSII/Source/os_flag.c **** * File    : OS_FLAG.C
  11:uCOSII/Source/os_flag.c **** * By      : Jean J. Labrosse
  12:uCOSII/Source/os_flag.c **** * Version : V2.92.11
  13:uCOSII/Source/os_flag.c **** *
  14:uCOSII/Source/os_flag.c **** * LICENSING TERMS:
  15:uCOSII/Source/os_flag.c **** * ---------------
  16:uCOSII/Source/os_flag.c **** *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful re
  17:uCOSII/Source/os_flag.c **** * If you plan on using  uC/OS-II  in a commercial product you need to contact Micrium to properly l
  18:uCOSII/Source/os_flag.c **** * its use in your product. We provide ALL the source code for your convenience and to help you expe
  19:uCOSII/Source/os_flag.c **** * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  pa
  20:uCOSII/Source/os_flag.c **** * licensing fee.
  21:uCOSII/Source/os_flag.c **** ***************************************************************************************************
  22:uCOSII/Source/os_flag.c **** */
  23:uCOSII/Source/os_flag.c **** 
  24:uCOSII/Source/os_flag.c **** #define  MICRIUM_SOURCE
  25:uCOSII/Source/os_flag.c **** 
  26:uCOSII/Source/os_flag.c **** #ifndef  OS_MASTER_FILE
  27:uCOSII/Source/os_flag.c **** #include <ucos_ii.h>
  28:uCOSII/Source/os_flag.c **** #endif
  29:uCOSII/Source/os_flag.c **** 
  30:uCOSII/Source/os_flag.c **** #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
ARM GAS  /tmp/ccgMzuMT.s 			page 2


  31:uCOSII/Source/os_flag.c **** /*
  32:uCOSII/Source/os_flag.c **** ***************************************************************************************************
  33:uCOSII/Source/os_flag.c **** *                                          LOCAL PROTOTYPES
  34:uCOSII/Source/os_flag.c **** ***************************************************************************************************
  35:uCOSII/Source/os_flag.c **** */
  36:uCOSII/Source/os_flag.c **** 
  37:uCOSII/Source/os_flag.c **** static  void     OS_FlagBlock(OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_ty
  38:uCOSII/Source/os_flag.c **** static  BOOLEAN  OS_FlagTaskRdy(OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy, INT8U pend_stat);
  39:uCOSII/Source/os_flag.c **** 
  40:uCOSII/Source/os_flag.c **** /*$PAGE*/
  41:uCOSII/Source/os_flag.c **** /*
  42:uCOSII/Source/os_flag.c **** ***************************************************************************************************
  43:uCOSII/Source/os_flag.c **** *                          CHECK THE STATUS OF FLAGS IN AN EVENT FLAG GROUP
  44:uCOSII/Source/os_flag.c **** *
  45:uCOSII/Source/os_flag.c **** * Description: This function is called to check the status of a combination of bits to be set or cl
  46:uCOSII/Source/os_flag.c **** *              in an event flag group.  Your application can check for ANY bit to be set/cleared or
  47:uCOSII/Source/os_flag.c **** *              bits to be set/cleared.
  48:uCOSII/Source/os_flag.c **** *
  49:uCOSII/Source/os_flag.c **** *              This call does not block if the desired flags are not present.
  50:uCOSII/Source/os_flag.c **** *
  51:uCOSII/Source/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
  52:uCOSII/Source/os_flag.c **** *
  53:uCOSII/Source/os_flag.c **** *              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to chec
  54:uCOSII/Source/os_flag.c **** *                            The bits you want are specified by setting the corresponding bits in
  55:uCOSII/Source/os_flag.c **** *                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
  56:uCOSII/Source/os_flag.c **** *                            'flags' would contain 0x03.
  57:uCOSII/Source/os_flag.c **** *
  58:uCOSII/Source/os_flag.c **** *              wait_type     specifies whether you want ALL bits to be set/cleared or ANY of the bi
  59:uCOSII/Source/os_flag.c **** *                            to be set/cleared.
  60:uCOSII/Source/os_flag.c **** *                            You can specify the following argument:
  61:uCOSII/Source/os_flag.c **** *
  62:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ALL   You will check ALL bits in 'flags' to be clear 
  63:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ANY   You will check ANY bit  in 'flags' to be clear 
  64:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_SET_ALL   You will check ALL bits in 'flags' to be set   
  65:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_SET_ANY   You will check ANY bit  in 'flags' to be set   
  66:uCOSII/Source/os_flag.c **** *
  67:uCOSII/Source/os_flag.c **** *                            NOTE: Add OS_FLAG_CONSUME if you want the event flag to be 'consumed' 
  68:uCOSII/Source/os_flag.c **** *                                  the call.  Example, to wait for any flag in a group AND then cle
  69:uCOSII/Source/os_flag.c **** *                                  the flags that are present, set 'wait_type' to:
  70:uCOSII/Source/os_flag.c **** *
  71:uCOSII/Source/os_flag.c **** *                                  OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME
  72:uCOSII/Source/os_flag.c **** *
  73:uCOSII/Source/os_flag.c **** *              perr          is a pointer to an error code and can be:
  74:uCOSII/Source/os_flag.c **** *                            OS_ERR_NONE               No error
  75:uCOSII/Source/os_flag.c **** *                            OS_ERR_EVENT_TYPE         You are not pointing to an event flag group
  76:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_WAIT_TYPE     You didn't specify a proper 'wait_type' argu
  77:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP  You passed a NULL pointer instead of the eve
  78:uCOSII/Source/os_flag.c **** *                                                      group handle.
  79:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_NOT_RDY       The desired flags you are waiting for are no
  80:uCOSII/Source/os_flag.c **** *                                                      available.
  81:uCOSII/Source/os_flag.c **** *
  82:uCOSII/Source/os_flag.c **** * Returns    : The flags in the event flag group that made the task ready or, 0 if a timeout or an 
  83:uCOSII/Source/os_flag.c **** *              occurred.
  84:uCOSII/Source/os_flag.c **** *
  85:uCOSII/Source/os_flag.c **** * Called from: Task or ISR
  86:uCOSII/Source/os_flag.c **** *
  87:uCOSII/Source/os_flag.c **** * Note(s)    : 1) IMPORTANT, the behavior of this function has changed from PREVIOUS versions.  The
ARM GAS  /tmp/ccgMzuMT.s 			page 3


  88:uCOSII/Source/os_flag.c **** *                 function NOW returns the flags that were ready INSTEAD of the current state of th
  89:uCOSII/Source/os_flag.c **** *                 event flags.
  90:uCOSII/Source/os_flag.c **** ***************************************************************************************************
  91:uCOSII/Source/os_flag.c **** */
  92:uCOSII/Source/os_flag.c **** 
  93:uCOSII/Source/os_flag.c **** #if OS_FLAG_ACCEPT_EN > 0u
  94:uCOSII/Source/os_flag.c **** OS_FLAGS  OSFlagAccept (OS_FLAG_GRP  *pgrp,
  95:uCOSII/Source/os_flag.c ****                         OS_FLAGS      flags,
  96:uCOSII/Source/os_flag.c ****                         INT8U         wait_type,
  97:uCOSII/Source/os_flag.c ****                         INT8U        *perr)
  98:uCOSII/Source/os_flag.c **** {
  99:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_rdy;
 100:uCOSII/Source/os_flag.c ****     INT8U         result;
 101:uCOSII/Source/os_flag.c ****     BOOLEAN       consume;
 102:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 103:uCOSII/Source/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 104:uCOSII/Source/os_flag.c **** #endif
 105:uCOSII/Source/os_flag.c **** 
 106:uCOSII/Source/os_flag.c **** 
 107:uCOSII/Source/os_flag.c **** 
 108:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 109:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 110:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 111:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 112:uCOSII/Source/os_flag.c ****     }
 113:uCOSII/Source/os_flag.c **** #endif
 114:uCOSII/Source/os_flag.c **** 
 115:uCOSII/Source/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 116:uCOSII/Source/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                      
 117:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 118:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 119:uCOSII/Source/os_flag.c ****     }
 120:uCOSII/Source/os_flag.c **** #endif
 121:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type            
 122:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 123:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 124:uCOSII/Source/os_flag.c ****     }
 125:uCOSII/Source/os_flag.c ****     result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 126:uCOSII/Source/os_flag.c ****     if (result != (INT8U)0) {                              /* See if we need to consume the flags  
 127:uCOSII/Source/os_flag.c ****         wait_type &= ~OS_FLAG_CONSUME;
 128:uCOSII/Source/os_flag.c ****         consume    = OS_TRUE;
 129:uCOSII/Source/os_flag.c ****     } else {
 130:uCOSII/Source/os_flag.c ****         consume    = OS_FALSE;
 131:uCOSII/Source/os_flag.c ****     }
 132:uCOSII/Source/os_flag.c **** /*$PAGE*/
 133:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwis
 134:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 135:uCOSII/Source/os_flag.c ****     switch (wait_type) {
 136:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set    
 137:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we wan
 138:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 139:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 140:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we want
 141:uCOSII/Source/os_flag.c ****                  }
 142:uCOSII/Source/os_flag.c ****              } else {
 143:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
 144:uCOSII/Source/os_flag.c ****              }
ARM GAS  /tmp/ccgMzuMT.s 			page 4


 145:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 146:uCOSII/Source/os_flag.c ****              break;
 147:uCOSII/Source/os_flag.c **** 
 148:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_SET_ANY:
 149:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we wan
 150:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 151:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 152:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got 
 153:uCOSII/Source/os_flag.c ****                  }
 154:uCOSII/Source/os_flag.c ****              } else {
 155:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
 156:uCOSII/Source/os_flag.c ****              }
 157:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 158:uCOSII/Source/os_flag.c ****              break;
 159:uCOSII/Source/os_flag.c **** 
 160:uCOSII/Source/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 161:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared
 162:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want 
 163:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 164:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 165:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 166:uCOSII/Source/os_flag.c ****                  }
 167:uCOSII/Source/os_flag.c ****              } else {
 168:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
 169:uCOSII/Source/os_flag.c ****              }
 170:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 171:uCOSII/Source/os_flag.c ****              break;
 172:uCOSII/Source/os_flag.c **** 
 173:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_CLR_ANY:
 174:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want  
 175:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
 176:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 177:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 178:uCOSII/Source/os_flag.c ****                  }
 179:uCOSII/Source/os_flag.c ****              } else {
 180:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_NOT_RDY;
 181:uCOSII/Source/os_flag.c ****              }
 182:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 183:uCOSII/Source/os_flag.c ****              break;
 184:uCOSII/Source/os_flag.c **** #endif
 185:uCOSII/Source/os_flag.c **** 
 186:uCOSII/Source/os_flag.c ****         default:
 187:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 188:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 189:uCOSII/Source/os_flag.c ****              *perr     = OS_ERR_FLAG_WAIT_TYPE;
 190:uCOSII/Source/os_flag.c ****              break;
 191:uCOSII/Source/os_flag.c ****     }
 192:uCOSII/Source/os_flag.c ****     return (flags_rdy);
 193:uCOSII/Source/os_flag.c **** }
 194:uCOSII/Source/os_flag.c **** #endif
 195:uCOSII/Source/os_flag.c **** 
 196:uCOSII/Source/os_flag.c **** /*$PAGE*/
 197:uCOSII/Source/os_flag.c **** /*
 198:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 199:uCOSII/Source/os_flag.c **** *                                        CREATE AN EVENT FLAG
 200:uCOSII/Source/os_flag.c **** *
 201:uCOSII/Source/os_flag.c **** * Description: This function is called to create an event flag group.
ARM GAS  /tmp/ccgMzuMT.s 			page 5


 202:uCOSII/Source/os_flag.c **** *
 203:uCOSII/Source/os_flag.c **** * Arguments  : flags         Contains the initial value to store in the event flag group.
 204:uCOSII/Source/os_flag.c **** *
 205:uCOSII/Source/os_flag.c **** *              perr          is a pointer to an error code which will be returned to your applicati
 206:uCOSII/Source/os_flag.c **** *                               OS_ERR_NONE               if the call was successful.
 207:uCOSII/Source/os_flag.c **** *                               OS_ERR_CREATE_ISR         if you attempted to create an Event Flag 
 208:uCOSII/Source/os_flag.c **** *                                                         ISR.
 209:uCOSII/Source/os_flag.c **** *                               OS_ERR_FLAG_GRP_DEPLETED  if there are no more event flag groups
 210:uCOSII/Source/os_flag.c **** *
 211:uCOSII/Source/os_flag.c **** * Returns    : A pointer to an event flag group or a NULL pointer if no more groups are available.
 212:uCOSII/Source/os_flag.c **** *
 213:uCOSII/Source/os_flag.c **** * Called from: Task ONLY
 214:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 215:uCOSII/Source/os_flag.c **** */
 216:uCOSII/Source/os_flag.c **** 
 217:uCOSII/Source/os_flag.c **** OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
 218:uCOSII/Source/os_flag.c ****                             INT8U    *perr)
 219:uCOSII/Source/os_flag.c **** {
 220:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP *pgrp;
 221:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register    
 222:uCOSII/Source/os_flag.c ****     OS_CPU_SR    cpu_sr = 0u;
 223:uCOSII/Source/os_flag.c **** #endif
 224:uCOSII/Source/os_flag.c **** 
 225:uCOSII/Source/os_flag.c **** 
 226:uCOSII/Source/os_flag.c **** 
 227:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 228:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 229:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 230:uCOSII/Source/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 231:uCOSII/Source/os_flag.c ****     }
 232:uCOSII/Source/os_flag.c **** #endif
 233:uCOSII/Source/os_flag.c **** 
 234:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL_IEC61508
 235:uCOSII/Source/os_flag.c ****     if (OSSafetyCriticalStartFlag == OS_TRUE) {
 236:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 237:uCOSII/Source/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 238:uCOSII/Source/os_flag.c ****     }
 239:uCOSII/Source/os_flag.c **** #endif
 240:uCOSII/Source/os_flag.c **** 
 241:uCOSII/Source/os_flag.c ****     if (OSIntNesting > 0u) {                        /* See if called from ISR ...                  
 242:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                
 243:uCOSII/Source/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 244:uCOSII/Source/os_flag.c ****     }
 245:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 246:uCOSII/Source/os_flag.c ****     pgrp = OSFlagFreeList;                          /* Get next free event flag                    
 247:uCOSII/Source/os_flag.c ****     if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available  
 248:uCOSII/Source/os_flag.c ****                                                     /* Adjust free list                            
 249:uCOSII/Source/os_flag.c ****         OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 250:uCOSII/Source/os_flag.c ****         pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                
 251:uCOSII/Source/os_flag.c ****         pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                
 252:uCOSII/Source/os_flag.c ****         pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags        
 253:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 254:uCOSII/Source/os_flag.c ****         pgrp->OSFlagName     = (INT8U *)(void *)"?";
 255:uCOSII/Source/os_flag.c **** #endif
 256:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 257:uCOSII/Source/os_flag.c ****         *perr                = OS_ERR_NONE;
 258:uCOSII/Source/os_flag.c ****     } else {
ARM GAS  /tmp/ccgMzuMT.s 			page 6


 259:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 260:uCOSII/Source/os_flag.c ****         *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 261:uCOSII/Source/os_flag.c ****     }
 262:uCOSII/Source/os_flag.c ****     return (pgrp);                                  /* Return pointer to event flag group          
 263:uCOSII/Source/os_flag.c **** }
 264:uCOSII/Source/os_flag.c **** 
 265:uCOSII/Source/os_flag.c **** /*$PAGE*/
 266:uCOSII/Source/os_flag.c **** /*
 267:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 268:uCOSII/Source/os_flag.c **** *                                     DELETE AN EVENT FLAG GROUP
 269:uCOSII/Source/os_flag.c **** *
 270:uCOSII/Source/os_flag.c **** * Description: This function deletes an event flag group and readies all tasks pending on the event
 271:uCOSII/Source/os_flag.c **** *              group.
 272:uCOSII/Source/os_flag.c **** *
 273:uCOSII/Source/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
 274:uCOSII/Source/os_flag.c **** *
 275:uCOSII/Source/os_flag.c **** *              opt           determines delete options as follows:
 276:uCOSII/Source/os_flag.c **** *                            opt == OS_DEL_NO_PEND   Deletes the event flag group ONLY if no task p
 277:uCOSII/Source/os_flag.c **** *                            opt == OS_DEL_ALWAYS    Deletes the event flag group even if tasks are
 278:uCOSII/Source/os_flag.c **** *                                                    waiting.  In this case, all the tasks pending 
 279:uCOSII/Source/os_flag.c **** *                                                    readied.
 280:uCOSII/Source/os_flag.c **** *
 281:uCOSII/Source/os_flag.c **** *              perr          is a pointer to an error code that can contain one of the following va
 282:uCOSII/Source/os_flag.c **** *                            OS_ERR_NONE               The call was successful and the event flag g
 283:uCOSII/Source/os_flag.c **** *                                                      deleted
 284:uCOSII/Source/os_flag.c **** *                            OS_ERR_DEL_ISR            If you attempted to delete the event flag gr
 285:uCOSII/Source/os_flag.c **** *                                                      an ISR
 286:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP  If 'pgrp' is a NULL pointer.
 287:uCOSII/Source/os_flag.c **** *                            OS_ERR_EVENT_TYPE         If you didn't pass a pointer to an event fla
 288:uCOSII/Source/os_flag.c **** *                            OS_ERR_INVALID_OPT        An invalid option was specified
 289:uCOSII/Source/os_flag.c **** *                            OS_ERR_TASK_WAITING       One or more tasks were waiting on the event 
 290:uCOSII/Source/os_flag.c **** *                                                      group.
 291:uCOSII/Source/os_flag.c **** *
 292:uCOSII/Source/os_flag.c **** * Returns    : pgrp          upon error
 293:uCOSII/Source/os_flag.c **** *              (OS_EVENT *)0 if the event flag group was successfully deleted.
 294:uCOSII/Source/os_flag.c **** *
 295:uCOSII/Source/os_flag.c **** * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the prese
 296:uCOSII/Source/os_flag.c **** *                 the event flag group MUST check the return code of OSFlagAccept() and OSFlagPend(
 297:uCOSII/Source/os_flag.c **** *              2) This call can potentially disable interrupts for a long time.  The interrupt disa
 298:uCOSII/Source/os_flag.c **** *                 time is directly proportional to the number of tasks waiting on the event flag gr
 299:uCOSII/Source/os_flag.c **** *              3) All tasks that were waiting for the event flag will be readied and returned an 
 300:uCOSII/Source/os_flag.c **** *                 OS_ERR_PEND_ABORT if OSFlagDel() was called with OS_DEL_ALWAYS
 301:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 302:uCOSII/Source/os_flag.c **** */
 303:uCOSII/Source/os_flag.c **** 
 304:uCOSII/Source/os_flag.c **** #if OS_FLAG_DEL_EN > 0u
 305:uCOSII/Source/os_flag.c **** OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP  *pgrp,
 306:uCOSII/Source/os_flag.c ****                          INT8U         opt,
 307:uCOSII/Source/os_flag.c ****                          INT8U        *perr)
 308:uCOSII/Source/os_flag.c **** {
 309:uCOSII/Source/os_flag.c ****     BOOLEAN       tasks_waiting;
 310:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE *pnode;
 311:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP  *pgrp_return;
 312:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 313:uCOSII/Source/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 314:uCOSII/Source/os_flag.c **** #endif
 315:uCOSII/Source/os_flag.c **** 
ARM GAS  /tmp/ccgMzuMT.s 			page 7


 316:uCOSII/Source/os_flag.c **** 
 317:uCOSII/Source/os_flag.c **** 
 318:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 319:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 320:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 321:uCOSII/Source/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 322:uCOSII/Source/os_flag.c ****     }
 323:uCOSII/Source/os_flag.c **** #endif
 324:uCOSII/Source/os_flag.c **** 
 325:uCOSII/Source/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 326:uCOSII/Source/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                      
 327:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 328:uCOSII/Source/os_flag.c ****         return (pgrp);
 329:uCOSII/Source/os_flag.c ****     }
 330:uCOSII/Source/os_flag.c **** #endif
 331:uCOSII/Source/os_flag.c ****     if (OSIntNesting > 0u) {                               /* See if called from ISR ...           
 332:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR         
 333:uCOSII/Source/os_flag.c ****         return (pgrp);
 334:uCOSII/Source/os_flag.c ****     }
 335:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type            
 336:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 337:uCOSII/Source/os_flag.c ****         return (pgrp);
 338:uCOSII/Source/os_flag.c ****     }
 339:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 340:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event fla
 341:uCOSII/Source/os_flag.c ****         tasks_waiting = OS_TRUE;                           /* Yes                                  
 342:uCOSII/Source/os_flag.c ****     } else {
 343:uCOSII/Source/os_flag.c ****         tasks_waiting = OS_FALSE;                          /* No                                   
 344:uCOSII/Source/os_flag.c ****     }
 345:uCOSII/Source/os_flag.c ****     switch (opt) {
 346:uCOSII/Source/os_flag.c ****         case OS_DEL_NO_PEND:                               /* Delete group if no task waiting      
 347:uCOSII/Source/os_flag.c ****              if (tasks_waiting == OS_FALSE) {
 348:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 349:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagName     = (INT8U *)(void *)"?";
 350:uCOSII/Source/os_flag.c **** #endif
 351:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 352:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list       
 353:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagFlags    = (OS_FLAGS)0;
 354:uCOSII/Source/os_flag.c ****                  OSFlagFreeList       = pgrp;
 355:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 356:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_NONE;
 357:uCOSII/Source/os_flag.c ****                  pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted    
 358:uCOSII/Source/os_flag.c ****              } else {
 359:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 360:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_TASK_WAITING;
 361:uCOSII/Source/os_flag.c ****                  pgrp_return          = pgrp;
 362:uCOSII/Source/os_flag.c ****              }
 363:uCOSII/Source/os_flag.c ****              break;
 364:uCOSII/Source/os_flag.c **** 
 365:uCOSII/Source/os_flag.c ****         case OS_DEL_ALWAYS:                                /* Always delete the event flag group   
 366:uCOSII/Source/os_flag.c ****              pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 367:uCOSII/Source/os_flag.c ****              while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags    
 368:uCOSII/Source/os_flag.c ****                  (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0, OS_STAT_PEND_ABORT);
 369:uCOSII/Source/os_flag.c ****                  pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 370:uCOSII/Source/os_flag.c ****              }
 371:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 372:uCOSII/Source/os_flag.c ****              pgrp->OSFlagName     = (INT8U *)(void *)"?";
ARM GAS  /tmp/ccgMzuMT.s 			page 8


 373:uCOSII/Source/os_flag.c **** #endif
 374:uCOSII/Source/os_flag.c ****              pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 375:uCOSII/Source/os_flag.c ****              pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list            
 376:uCOSII/Source/os_flag.c ****              pgrp->OSFlagFlags    = (OS_FLAGS)0;
 377:uCOSII/Source/os_flag.c ****              OSFlagFreeList       = pgrp;
 378:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 379:uCOSII/Source/os_flag.c ****              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiti
 380:uCOSII/Source/os_flag.c ****                  OS_Sched();                               /* Find highest priority task ready to r
 381:uCOSII/Source/os_flag.c ****              }
 382:uCOSII/Source/os_flag.c ****              *perr = OS_ERR_NONE;
 383:uCOSII/Source/os_flag.c ****              pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted    
 384:uCOSII/Source/os_flag.c ****              break;
 385:uCOSII/Source/os_flag.c **** 
 386:uCOSII/Source/os_flag.c ****         default:
 387:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 388:uCOSII/Source/os_flag.c ****              *perr                = OS_ERR_INVALID_OPT;
 389:uCOSII/Source/os_flag.c ****              pgrp_return          = pgrp;
 390:uCOSII/Source/os_flag.c ****              break;
 391:uCOSII/Source/os_flag.c ****     }
 392:uCOSII/Source/os_flag.c ****     return (pgrp_return);
 393:uCOSII/Source/os_flag.c **** }
 394:uCOSII/Source/os_flag.c **** #endif
 395:uCOSII/Source/os_flag.c **** /*$PAGE*/
 396:uCOSII/Source/os_flag.c **** /*
 397:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 398:uCOSII/Source/os_flag.c **** *                                 GET THE NAME OF AN EVENT FLAG GROUP
 399:uCOSII/Source/os_flag.c **** *
 400:uCOSII/Source/os_flag.c **** * Description: This function is used to obtain the name assigned to an event flag group
 401:uCOSII/Source/os_flag.c **** *
 402:uCOSII/Source/os_flag.c **** * Arguments  : pgrp      is a pointer to the event flag group.
 403:uCOSII/Source/os_flag.c **** *
 404:uCOSII/Source/os_flag.c **** *              pname     is pointer to a pointer to an ASCII string that will receive the name of t
 405:uCOSII/Source/os_flag.c **** *                        group.
 406:uCOSII/Source/os_flag.c **** *
 407:uCOSII/Source/os_flag.c **** *              perr      is a pointer to an error code that can contain one of the following values
 408:uCOSII/Source/os_flag.c **** *
 409:uCOSII/Source/os_flag.c **** *                        OS_ERR_NONE                if the requested task is resumed
 410:uCOSII/Source/os_flag.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to an event flag gr
 411:uCOSII/Source/os_flag.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 412:uCOSII/Source/os_flag.c **** *                        OS_ERR_FLAG_INVALID_PGRP   if you passed a NULL pointer for 'pgrp'
 413:uCOSII/Source/os_flag.c **** *                        OS_ERR_NAME_GET_ISR        if you called this function from an ISR
 414:uCOSII/Source/os_flag.c **** *
 415:uCOSII/Source/os_flag.c **** * Returns    : The length of the string or 0 if the 'pgrp' is a NULL pointer.
 416:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 417:uCOSII/Source/os_flag.c **** */
 418:uCOSII/Source/os_flag.c **** 
 419:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 420:uCOSII/Source/os_flag.c **** INT8U  OSFlagNameGet (OS_FLAG_GRP   *pgrp,
 421:uCOSII/Source/os_flag.c ****                       INT8U        **pname,
 422:uCOSII/Source/os_flag.c ****                       INT8U         *perr)
 423:uCOSII/Source/os_flag.c **** {
 424:uCOSII/Source/os_flag.c ****     INT8U      len;
 425:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register       
 426:uCOSII/Source/os_flag.c ****     OS_CPU_SR  cpu_sr = 0u;
 427:uCOSII/Source/os_flag.c **** #endif
 428:uCOSII/Source/os_flag.c **** 
 429:uCOSII/Source/os_flag.c **** 
ARM GAS  /tmp/ccgMzuMT.s 			page 9


 430:uCOSII/Source/os_flag.c **** 
 431:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 432:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 433:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 434:uCOSII/Source/os_flag.c ****         return (0u);
 435:uCOSII/Source/os_flag.c ****     }
 436:uCOSII/Source/os_flag.c **** #endif
 437:uCOSII/Source/os_flag.c **** 
 438:uCOSII/Source/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 439:uCOSII/Source/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                      
 440:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 441:uCOSII/Source/os_flag.c ****         return (0u);
 442:uCOSII/Source/os_flag.c ****     }
 443:uCOSII/Source/os_flag.c ****     if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                    
 444:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PNAME_NULL;
 445:uCOSII/Source/os_flag.c ****         return (0u);
 446:uCOSII/Source/os_flag.c ****     }
 447:uCOSII/Source/os_flag.c **** #endif
 448:uCOSII/Source/os_flag.c ****     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR              
 449:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_GET_ISR;
 450:uCOSII/Source/os_flag.c ****         return (0u);
 451:uCOSII/Source/os_flag.c ****     }
 452:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 453:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 454:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 455:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 456:uCOSII/Source/os_flag.c ****         return (0u);
 457:uCOSII/Source/os_flag.c ****     }
 458:uCOSII/Source/os_flag.c ****     *pname = pgrp->OSFlagName;
 459:uCOSII/Source/os_flag.c ****     len    = OS_StrLen(*pname);
 460:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 461:uCOSII/Source/os_flag.c ****     *perr  = OS_ERR_NONE;
 462:uCOSII/Source/os_flag.c ****     return (len);
 463:uCOSII/Source/os_flag.c **** }
 464:uCOSII/Source/os_flag.c **** #endif
 465:uCOSII/Source/os_flag.c **** 
 466:uCOSII/Source/os_flag.c **** /*$PAGE*/
 467:uCOSII/Source/os_flag.c **** /*
 468:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 469:uCOSII/Source/os_flag.c **** *                                ASSIGN A NAME TO AN EVENT FLAG GROUP
 470:uCOSII/Source/os_flag.c **** *
 471:uCOSII/Source/os_flag.c **** * Description: This function assigns a name to an event flag group.
 472:uCOSII/Source/os_flag.c **** *
 473:uCOSII/Source/os_flag.c **** * Arguments  : pgrp      is a pointer to the event flag group.
 474:uCOSII/Source/os_flag.c **** *
 475:uCOSII/Source/os_flag.c **** *              pname     is a pointer to an ASCII string that will be used as the name of the event
 476:uCOSII/Source/os_flag.c **** *                        group.
 477:uCOSII/Source/os_flag.c **** *
 478:uCOSII/Source/os_flag.c **** *              perr      is a pointer to an error code that can contain one of the following values
 479:uCOSII/Source/os_flag.c **** *
 480:uCOSII/Source/os_flag.c **** *                        OS_ERR_NONE                if the requested task is resumed
 481:uCOSII/Source/os_flag.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to an event flag gr
 482:uCOSII/Source/os_flag.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 483:uCOSII/Source/os_flag.c **** *                        OS_ERR_FLAG_INVALID_PGRP   if you passed a NULL pointer for 'pgrp'
 484:uCOSII/Source/os_flag.c **** *                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
 485:uCOSII/Source/os_flag.c **** *
 486:uCOSII/Source/os_flag.c **** * Returns    : None
ARM GAS  /tmp/ccgMzuMT.s 			page 10


 487:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 488:uCOSII/Source/os_flag.c **** */
 489:uCOSII/Source/os_flag.c **** 
 490:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 491:uCOSII/Source/os_flag.c **** void  OSFlagNameSet (OS_FLAG_GRP  *pgrp,
 492:uCOSII/Source/os_flag.c ****                      INT8U        *pname,
 493:uCOSII/Source/os_flag.c ****                      INT8U        *perr)
 494:uCOSII/Source/os_flag.c **** {
 495:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register       
 496:uCOSII/Source/os_flag.c ****     OS_CPU_SR  cpu_sr = 0u;
 497:uCOSII/Source/os_flag.c **** #endif
 498:uCOSII/Source/os_flag.c **** 
 499:uCOSII/Source/os_flag.c **** 
 500:uCOSII/Source/os_flag.c **** 
 501:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 502:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 503:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 504:uCOSII/Source/os_flag.c ****         return;
 505:uCOSII/Source/os_flag.c ****     }
 506:uCOSII/Source/os_flag.c **** #endif
 507:uCOSII/Source/os_flag.c **** 
 508:uCOSII/Source/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 509:uCOSII/Source/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                      
 510:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 511:uCOSII/Source/os_flag.c ****         return;
 512:uCOSII/Source/os_flag.c ****     }
 513:uCOSII/Source/os_flag.c ****     if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                     
 514:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PNAME_NULL;
 515:uCOSII/Source/os_flag.c ****         return;
 516:uCOSII/Source/os_flag.c ****     }
 517:uCOSII/Source/os_flag.c **** #endif
 518:uCOSII/Source/os_flag.c ****     if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR              
 519:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_SET_ISR;
 520:uCOSII/Source/os_flag.c ****         return;
 521:uCOSII/Source/os_flag.c ****     }
 522:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 523:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 524:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 525:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 526:uCOSII/Source/os_flag.c ****         return;
 527:uCOSII/Source/os_flag.c ****     }
 528:uCOSII/Source/os_flag.c ****     pgrp->OSFlagName = pname;
 529:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 530:uCOSII/Source/os_flag.c ****     *perr            = OS_ERR_NONE;
 531:uCOSII/Source/os_flag.c ****     return;
 532:uCOSII/Source/os_flag.c **** }
 533:uCOSII/Source/os_flag.c **** #endif
 534:uCOSII/Source/os_flag.c **** 
 535:uCOSII/Source/os_flag.c **** /*$PAGE*/
 536:uCOSII/Source/os_flag.c **** /*
 537:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 538:uCOSII/Source/os_flag.c **** *                                     WAIT ON AN EVENT FLAG GROUP
 539:uCOSII/Source/os_flag.c **** *
 540:uCOSII/Source/os_flag.c **** * Description: This function is called to wait for a combination of bits to be set in an event flag
 541:uCOSII/Source/os_flag.c **** *              group.  Your application can wait for ANY bit to be set or ALL bits to be set.
 542:uCOSII/Source/os_flag.c **** *
 543:uCOSII/Source/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
ARM GAS  /tmp/ccgMzuMT.s 			page 11


 544:uCOSII/Source/os_flag.c **** *
 545:uCOSII/Source/os_flag.c **** *              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to wait
 546:uCOSII/Source/os_flag.c **** *                            The bits you want are specified by setting the corresponding bits in
 547:uCOSII/Source/os_flag.c **** *                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
 548:uCOSII/Source/os_flag.c **** *                            'flags' would contain 0x03.
 549:uCOSII/Source/os_flag.c **** *
 550:uCOSII/Source/os_flag.c **** *              wait_type     specifies whether you want ALL bits to be set or ANY of the bits to be
 551:uCOSII/Source/os_flag.c **** *                            You can specify the following argument:
 552:uCOSII/Source/os_flag.c **** *
 553:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ALL   You will wait for ALL bits in 'mask' to be clea
 554:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_SET_ALL   You will wait for ALL bits in 'mask' to be set 
 555:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ANY   You will wait for ANY bit  in 'mask' to be clea
 556:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_SET_ANY   You will wait for ANY bit  in 'mask' to be set 
 557:uCOSII/Source/os_flag.c **** *
 558:uCOSII/Source/os_flag.c **** *                            NOTE: Add OS_FLAG_CONSUME if you want the event flag to be 'consumed' 
 559:uCOSII/Source/os_flag.c **** *                                  the call.  Example, to wait for any flag in a group AND then cle
 560:uCOSII/Source/os_flag.c **** *                                  the flags that are present, set 'wait_type' to:
 561:uCOSII/Source/os_flag.c **** *
 562:uCOSII/Source/os_flag.c **** *                                  OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME
 563:uCOSII/Source/os_flag.c **** *
 564:uCOSII/Source/os_flag.c **** *              timeout       is an optional timeout (in clock ticks) that your task will wait for t
 565:uCOSII/Source/os_flag.c **** *                            desired bit combination.  If you specify 0, however, your task will wa
 566:uCOSII/Source/os_flag.c **** *                            forever at the specified event flag group or, until a message arrives.
 567:uCOSII/Source/os_flag.c **** *
 568:uCOSII/Source/os_flag.c **** *              perr          is a pointer to an error code and can be:
 569:uCOSII/Source/os_flag.c **** *                            OS_ERR_NONE               The desired bits have been set within the sp
 570:uCOSII/Source/os_flag.c **** *                                                      'timeout'.
 571:uCOSII/Source/os_flag.c **** *                            OS_ERR_PEND_ISR           If you tried to PEND from an ISR
 572:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP  If 'pgrp' is a NULL pointer.
 573:uCOSII/Source/os_flag.c **** *                            OS_ERR_EVENT_TYPE         You are not pointing to an event flag group
 574:uCOSII/Source/os_flag.c **** *                            OS_ERR_TIMEOUT            The bit(s) have not been set in the specifie
 575:uCOSII/Source/os_flag.c **** *                                                      'timeout'.
 576:uCOSII/Source/os_flag.c **** *                            OS_ERR_PEND_ABORT         The wait on the flag was aborted.
 577:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_WAIT_TYPE     You didn't specify a proper 'wait_type' argu
 578:uCOSII/Source/os_flag.c **** *
 579:uCOSII/Source/os_flag.c **** * Returns    : The flags in the event flag group that made the task ready or, 0 if a timeout or an 
 580:uCOSII/Source/os_flag.c **** *              occurred.
 581:uCOSII/Source/os_flag.c **** *
 582:uCOSII/Source/os_flag.c **** * Called from: Task ONLY
 583:uCOSII/Source/os_flag.c **** *
 584:uCOSII/Source/os_flag.c **** * Note(s)    : 1) IMPORTANT, the behavior of this function has changed from PREVIOUS versions.  The
 585:uCOSII/Source/os_flag.c **** *                 function NOW returns the flags that were ready INSTEAD of the current state of th
 586:uCOSII/Source/os_flag.c **** *                 event flags.
 587:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 588:uCOSII/Source/os_flag.c **** */
 589:uCOSII/Source/os_flag.c **** 
 590:uCOSII/Source/os_flag.c **** OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
 591:uCOSII/Source/os_flag.c ****                       OS_FLAGS      flags,
 592:uCOSII/Source/os_flag.c ****                       INT8U         wait_type,
 593:uCOSII/Source/os_flag.c ****                       INT32U        timeout,
 594:uCOSII/Source/os_flag.c ****                       INT8U        *perr)
 595:uCOSII/Source/os_flag.c **** {
 596:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE  node;
 597:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_rdy;
 598:uCOSII/Source/os_flag.c ****     INT8U         result;
 599:uCOSII/Source/os_flag.c ****     INT8U         pend_stat;
 600:uCOSII/Source/os_flag.c ****     BOOLEAN       consume;
ARM GAS  /tmp/ccgMzuMT.s 			page 12


 601:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 602:uCOSII/Source/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 603:uCOSII/Source/os_flag.c **** #endif
 604:uCOSII/Source/os_flag.c **** 
 605:uCOSII/Source/os_flag.c **** 
 606:uCOSII/Source/os_flag.c **** 
 607:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 608:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 609:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 610:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 611:uCOSII/Source/os_flag.c ****     }
 612:uCOSII/Source/os_flag.c **** #endif
 613:uCOSII/Source/os_flag.c **** 
 614:uCOSII/Source/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 615:uCOSII/Source/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                      
 616:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 617:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 618:uCOSII/Source/os_flag.c ****     }
 619:uCOSII/Source/os_flag.c **** #endif
 620:uCOSII/Source/os_flag.c ****     if (OSIntNesting > 0u) {                               /* See if called from ISR ...           
 621:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR           
 622:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 623:uCOSII/Source/os_flag.c ****     }
 624:uCOSII/Source/os_flag.c ****     if (OSLockNesting > 0u) {                              /* See if called with scheduler locked .
 625:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked           
 626:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 627:uCOSII/Source/os_flag.c ****     }
 628:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type            
 629:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 630:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 631:uCOSII/Source/os_flag.c ****     }
 632:uCOSII/Source/os_flag.c ****     result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 633:uCOSII/Source/os_flag.c ****     if (result != (INT8U)0) {                              /* See if we need to consume the flags  
 634:uCOSII/Source/os_flag.c ****         wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
 635:uCOSII/Source/os_flag.c ****         consume    = OS_TRUE;
 636:uCOSII/Source/os_flag.c ****     } else {
 637:uCOSII/Source/os_flag.c ****         consume    = OS_FALSE;
 638:uCOSII/Source/os_flag.c ****     }
 639:uCOSII/Source/os_flag.c **** /*$PAGE*/
 640:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 641:uCOSII/Source/os_flag.c ****     switch (wait_type) {
 642:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set    
 643:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want 
 644:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 645:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 646:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted
 647:uCOSII/Source/os_flag.c ****                  }
 648:uCOSII/Source/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 649:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 650:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 651:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 652:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 653:uCOSII/Source/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 654:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 655:uCOSII/Source/os_flag.c ****              }
 656:uCOSII/Source/os_flag.c ****              break;
 657:uCOSII/Source/os_flag.c **** 
ARM GAS  /tmp/ccgMzuMT.s 			page 13


 658:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_SET_ANY:
 659:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want
 660:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 661:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 662:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we 
 663:uCOSII/Source/os_flag.c ****                  }
 664:uCOSII/Source/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 665:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 666:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 667:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 668:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 669:uCOSII/Source/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 670:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 671:uCOSII/Source/os_flag.c ****              }
 672:uCOSII/Source/os_flag.c ****              break;
 673:uCOSII/Source/os_flag.c **** 
 674:uCOSII/Source/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 675:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared
 676:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want 
 677:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 678:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 679:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 680:uCOSII/Source/os_flag.c ****                  }
 681:uCOSII/Source/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 682:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 683:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 684:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 685:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 686:uCOSII/Source/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 687:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 688:uCOSII/Source/os_flag.c ****              }
 689:uCOSII/Source/os_flag.c ****              break;
 690:uCOSII/Source/os_flag.c **** 
 691:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_CLR_ANY:
 692:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want  
 693:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
 694:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 695:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 696:uCOSII/Source/os_flag.c ****                  }
 697:uCOSII/Source/os_flag.c ****                  OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready           
 698:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 699:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 700:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 701:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 702:uCOSII/Source/os_flag.c ****                  OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 703:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 704:uCOSII/Source/os_flag.c ****              }
 705:uCOSII/Source/os_flag.c ****              break;
 706:uCOSII/Source/os_flag.c **** #endif
 707:uCOSII/Source/os_flag.c **** 
 708:uCOSII/Source/os_flag.c ****         default:
 709:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 710:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 711:uCOSII/Source/os_flag.c ****              *perr      = OS_ERR_FLAG_WAIT_TYPE;
 712:uCOSII/Source/os_flag.c ****              return (flags_rdy);
 713:uCOSII/Source/os_flag.c ****     }
 714:uCOSII/Source/os_flag.c **** /*$PAGE*/
ARM GAS  /tmp/ccgMzuMT.s 			page 14


 715:uCOSII/Source/os_flag.c ****     OS_Sched();                                            /* Find next HPT ready to run           
 716:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 717:uCOSII/Source/os_flag.c ****     if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?        
 718:uCOSII/Source/os_flag.c ****         pend_stat                = OSTCBCur->OSTCBStatPend;
 719:uCOSII/Source/os_flag.c ****         OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 720:uCOSII/Source/os_flag.c ****         OS_FlagUnlink(&node);
 721:uCOSII/Source/os_flag.c ****         OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run          
 722:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 723:uCOSII/Source/os_flag.c ****         flags_rdy                = (OS_FLAGS)0;
 724:uCOSII/Source/os_flag.c ****         switch (pend_stat) {
 725:uCOSII/Source/os_flag.c ****             case OS_STAT_PEND_ABORT:
 726:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting   
 727:uCOSII/Source/os_flag.c ****                  break;
 728:uCOSII/Source/os_flag.c **** 
 729:uCOSII/Source/os_flag.c ****             case OS_STAT_PEND_TO:
 730:uCOSII/Source/os_flag.c ****             default:
 731:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting   
 732:uCOSII/Source/os_flag.c ****                  break;
 733:uCOSII/Source/os_flag.c ****         }
 734:uCOSII/Source/os_flag.c ****         return (flags_rdy);
 735:uCOSII/Source/os_flag.c ****     }
 736:uCOSII/Source/os_flag.c ****     flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 737:uCOSII/Source/os_flag.c ****     if (consume == OS_TRUE) {                              /* See if we need to consume the flags  
 738:uCOSII/Source/os_flag.c ****         switch (wait_type) {
 739:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:
 740:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got          
 741:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
 742:uCOSII/Source/os_flag.c ****                  break;
 743:uCOSII/Source/os_flag.c **** 
 744:uCOSII/Source/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 745:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_CLR_ALL:
 746:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got          
 747:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagFlags |=  flags_rdy;
 748:uCOSII/Source/os_flag.c ****                  break;
 749:uCOSII/Source/os_flag.c **** #endif
 750:uCOSII/Source/os_flag.c ****             default:
 751:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 752:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 753:uCOSII/Source/os_flag.c ****                  return ((OS_FLAGS)0);
 754:uCOSII/Source/os_flag.c ****         }
 755:uCOSII/Source/os_flag.c ****     }
 756:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 757:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred          
 758:uCOSII/Source/os_flag.c ****     return (flags_rdy);
 759:uCOSII/Source/os_flag.c **** }
 760:uCOSII/Source/os_flag.c **** /*$PAGE*/
 761:uCOSII/Source/os_flag.c **** /*
 762:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 763:uCOSII/Source/os_flag.c **** *                              GET FLAGS WHO CAUSED TASK TO BECOME READY
 764:uCOSII/Source/os_flag.c **** *
 765:uCOSII/Source/os_flag.c **** * Description: This function is called to obtain the flags that caused the task to become ready to 
 766:uCOSII/Source/os_flag.c **** *              In other words, this function allows you to tell "Who done it!".
 767:uCOSII/Source/os_flag.c **** *
 768:uCOSII/Source/os_flag.c **** * Arguments  : None
 769:uCOSII/Source/os_flag.c **** *
 770:uCOSII/Source/os_flag.c **** * Returns    : The flags that caused the task to be ready.
 771:uCOSII/Source/os_flag.c **** *
ARM GAS  /tmp/ccgMzuMT.s 			page 15


 772:uCOSII/Source/os_flag.c **** * Called from: Task ONLY
 773:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 774:uCOSII/Source/os_flag.c **** */
 775:uCOSII/Source/os_flag.c **** 
 776:uCOSII/Source/os_flag.c **** OS_FLAGS  OSFlagPendGetFlagsRdy (void)
 777:uCOSII/Source/os_flag.c **** {
 778:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags;
 779:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 780:uCOSII/Source/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 781:uCOSII/Source/os_flag.c **** #endif
 782:uCOSII/Source/os_flag.c **** 
 783:uCOSII/Source/os_flag.c **** 
 784:uCOSII/Source/os_flag.c **** 
 785:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 786:uCOSII/Source/os_flag.c ****     flags = OSTCBCur->OSTCBFlagsRdy;
 787:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 788:uCOSII/Source/os_flag.c ****     return (flags);
 789:uCOSII/Source/os_flag.c **** }
 790:uCOSII/Source/os_flag.c **** 
 791:uCOSII/Source/os_flag.c **** /*$PAGE*/
 792:uCOSII/Source/os_flag.c **** /*
 793:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 794:uCOSII/Source/os_flag.c **** *                                       POST EVENT FLAG BIT(S)
 795:uCOSII/Source/os_flag.c **** *
 796:uCOSII/Source/os_flag.c **** * Description: This function is called to set or clear some bits in an event flag group.  The bits 
 797:uCOSII/Source/os_flag.c **** *              set or clear are specified by a 'bit mask'.
 798:uCOSII/Source/os_flag.c **** *
 799:uCOSII/Source/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
 800:uCOSII/Source/os_flag.c **** *
 801:uCOSII/Source/os_flag.c **** *              flags         If 'opt' (see below) is OS_FLAG_SET, each bit that is set in 'flags' w
 802:uCOSII/Source/os_flag.c **** *                            set the corresponding bit in the event flag group.  e.g. to set bits 0
 803:uCOSII/Source/os_flag.c **** *                            and 5 you would set 'flags' to:
 804:uCOSII/Source/os_flag.c **** *
 805:uCOSII/Source/os_flag.c **** *                                0x31     (note, bit 0 is least significant bit)
 806:uCOSII/Source/os_flag.c **** *
 807:uCOSII/Source/os_flag.c **** *                            If 'opt' (see below) is OS_FLAG_CLR, each bit that is set in 'flags' w
 808:uCOSII/Source/os_flag.c **** *                            CLEAR the corresponding bit in the event flag group.  e.g. to clear bi
 809:uCOSII/Source/os_flag.c **** *                            4 and 5 you would specify 'flags' as:
 810:uCOSII/Source/os_flag.c **** *
 811:uCOSII/Source/os_flag.c **** *                                0x31     (note, bit 0 is least significant bit)
 812:uCOSII/Source/os_flag.c **** *
 813:uCOSII/Source/os_flag.c **** *              opt           indicates whether the flags will be:
 814:uCOSII/Source/os_flag.c **** *                                set     (OS_FLAG_SET) or
 815:uCOSII/Source/os_flag.c **** *                                cleared (OS_FLAG_CLR)
 816:uCOSII/Source/os_flag.c **** *
 817:uCOSII/Source/os_flag.c **** *              perr          is a pointer to an error code and can be:
 818:uCOSII/Source/os_flag.c **** *                            OS_ERR_NONE                The call was successfull
 819:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP   You passed a NULL pointer
 820:uCOSII/Source/os_flag.c **** *                            OS_ERR_EVENT_TYPE          You are not pointing to an event flag group
 821:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_INVALID_OPT    You specified an invalid option
 822:uCOSII/Source/os_flag.c **** *
 823:uCOSII/Source/os_flag.c **** * Returns    : the new value of the event flags bits that are still set.
 824:uCOSII/Source/os_flag.c **** *
 825:uCOSII/Source/os_flag.c **** * Called From: Task or ISR
 826:uCOSII/Source/os_flag.c **** *
 827:uCOSII/Source/os_flag.c **** * WARNING(s) : 1) The execution time of this function depends on the number of tasks waiting on the
 828:uCOSII/Source/os_flag.c **** *                 flag group.
ARM GAS  /tmp/ccgMzuMT.s 			page 16


 829:uCOSII/Source/os_flag.c **** *              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting
 830:uCOSII/Source/os_flag.c **** *                 the event flag group.
 831:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 832:uCOSII/Source/os_flag.c **** */
 833:uCOSII/Source/os_flag.c **** OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
 834:uCOSII/Source/os_flag.c ****                       OS_FLAGS      flags,
 835:uCOSII/Source/os_flag.c ****                       INT8U         opt,
 836:uCOSII/Source/os_flag.c ****                       INT8U        *perr)
 837:uCOSII/Source/os_flag.c **** {
 838:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE *pnode;
 839:uCOSII/Source/os_flag.c ****     BOOLEAN       sched;
 840:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_cur;
 841:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_rdy;
 842:uCOSII/Source/os_flag.c ****     BOOLEAN       rdy;
 843:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register   
 844:uCOSII/Source/os_flag.c ****     OS_CPU_SR     cpu_sr = 0u;
 845:uCOSII/Source/os_flag.c **** #endif
 846:uCOSII/Source/os_flag.c **** 
 847:uCOSII/Source/os_flag.c **** 
 848:uCOSII/Source/os_flag.c **** 
 849:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 850:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 851:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 852:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 853:uCOSII/Source/os_flag.c ****     }
 854:uCOSII/Source/os_flag.c **** #endif
 855:uCOSII/Source/os_flag.c **** 
 856:uCOSII/Source/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 857:uCOSII/Source/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                            
 858:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 859:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 860:uCOSII/Source/os_flag.c ****     }
 861:uCOSII/Source/os_flag.c **** #endif
 862:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag 
 863:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 864:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 865:uCOSII/Source/os_flag.c ****     }
 866:uCOSII/Source/os_flag.c **** /*$PAGE*/
 867:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 868:uCOSII/Source/os_flag.c ****     switch (opt) {
 869:uCOSII/Source/os_flag.c ****         case OS_FLAG_CLR:
 870:uCOSII/Source/os_flag.c ****              pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group     
 871:uCOSII/Source/os_flag.c ****              break;
 872:uCOSII/Source/os_flag.c **** 
 873:uCOSII/Source/os_flag.c ****         case OS_FLAG_SET:
 874:uCOSII/Source/os_flag.c ****              pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group     
 875:uCOSII/Source/os_flag.c ****              break;
 876:uCOSII/Source/os_flag.c **** 
 877:uCOSII/Source/os_flag.c ****         default:
 878:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();                     /* INVALID option                             
 879:uCOSII/Source/os_flag.c ****              *perr = OS_ERR_FLAG_INVALID_OPT;
 880:uCOSII/Source/os_flag.c ****              return ((OS_FLAGS)0);
 881:uCOSII/Source/os_flag.c ****     }
 882:uCOSII/Source/os_flag.c ****     sched = OS_FALSE;                                /* Indicate that we don't need rescheduling   
 883:uCOSII/Source/os_flag.c ****     pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 884:uCOSII/Source/os_flag.c ****     while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(
 885:uCOSII/Source/os_flag.c ****         switch (pnode->OSFlagNodeWaitType) {
ARM GAS  /tmp/ccgMzuMT.s 			page 17


 886:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current n
 887:uCOSII/Source/os_flag.c ****                  flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 888:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 889:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 890:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 891:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 892:uCOSII/Source/os_flag.c ****                      }
 893:uCOSII/Source/os_flag.c ****                  }
 894:uCOSII/Source/os_flag.c ****                  break;
 895:uCOSII/Source/os_flag.c **** 
 896:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                        
 897:uCOSII/Source/os_flag.c ****                  flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 898:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 899:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 900:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 901:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 902:uCOSII/Source/os_flag.c ****                      }
 903:uCOSII/Source/os_flag.c ****                  }
 904:uCOSII/Source/os_flag.c ****                  break;
 905:uCOSII/Source/os_flag.c **** 
 906:uCOSII/Source/os_flag.c **** #if OS_FLAG_WAIT_CLR_EN > 0u
 907:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current n
 908:uCOSII/Source/os_flag.c ****                  flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 909:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 910:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 911:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 912:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 913:uCOSII/Source/os_flag.c ****                      }
 914:uCOSII/Source/os_flag.c ****                  }
 915:uCOSII/Source/os_flag.c ****                  break;
 916:uCOSII/Source/os_flag.c **** 
 917:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                        
 918:uCOSII/Source/os_flag.c ****                  flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 919:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 920:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 921:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 922:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 923:uCOSII/Source/os_flag.c ****                      }
 924:uCOSII/Source/os_flag.c ****                  }
 925:uCOSII/Source/os_flag.c ****                  break;
 926:uCOSII/Source/os_flag.c **** #endif
 927:uCOSII/Source/os_flag.c ****             default:
 928:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 929:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 930:uCOSII/Source/os_flag.c ****                  return ((OS_FLAGS)0);
 931:uCOSII/Source/os_flag.c ****         }
 932:uCOSII/Source/os_flag.c ****         pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag
 933:uCOSII/Source/os_flag.c ****     }
 934:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 935:uCOSII/Source/os_flag.c ****     if (sched == OS_TRUE) {
 936:uCOSII/Source/os_flag.c ****         OS_Sched();
 937:uCOSII/Source/os_flag.c ****     }
 938:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 939:uCOSII/Source/os_flag.c ****     flags_cur = pgrp->OSFlagFlags;
 940:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 941:uCOSII/Source/os_flag.c ****     *perr     = OS_ERR_NONE;
 942:uCOSII/Source/os_flag.c ****     return (flags_cur);
ARM GAS  /tmp/ccgMzuMT.s 			page 18


 943:uCOSII/Source/os_flag.c **** }
 944:uCOSII/Source/os_flag.c **** /*$PAGE*/
 945:uCOSII/Source/os_flag.c **** /*
 946:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 947:uCOSII/Source/os_flag.c **** *                                          QUERY EVENT FLAG
 948:uCOSII/Source/os_flag.c **** *
 949:uCOSII/Source/os_flag.c **** * Description: This function is used to check the value of the event flag group.
 950:uCOSII/Source/os_flag.c **** *
 951:uCOSII/Source/os_flag.c **** * Arguments  : pgrp         is a pointer to the desired event flag group.
 952:uCOSII/Source/os_flag.c **** *
 953:uCOSII/Source/os_flag.c **** *              perr          is a pointer to an error code returned to the called:
 954:uCOSII/Source/os_flag.c **** *                            OS_ERR_NONE                The call was successfull
 955:uCOSII/Source/os_flag.c **** *                            OS_ERR_FLAG_INVALID_PGRP   You passed a NULL pointer
 956:uCOSII/Source/os_flag.c **** *                            OS_ERR_EVENT_TYPE          You are not pointing to an event flag group
 957:uCOSII/Source/os_flag.c **** *
 958:uCOSII/Source/os_flag.c **** * Returns    : The current value of the event flag group.
 959:uCOSII/Source/os_flag.c **** *
 960:uCOSII/Source/os_flag.c **** * Called From: Task or ISR
 961:uCOSII/Source/os_flag.c **** ***************************************************************************************************
 962:uCOSII/Source/os_flag.c **** */
 963:uCOSII/Source/os_flag.c **** 
 964:uCOSII/Source/os_flag.c **** #if OS_FLAG_QUERY_EN > 0u
 965:uCOSII/Source/os_flag.c **** OS_FLAGS  OSFlagQuery (OS_FLAG_GRP  *pgrp,
 966:uCOSII/Source/os_flag.c ****                        INT8U        *perr)
 967:uCOSII/Source/os_flag.c **** {
 968:uCOSII/Source/os_flag.c ****     OS_FLAGS   flags;
 969:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                      /* Allocate storage for CPU status register      
 970:uCOSII/Source/os_flag.c ****     OS_CPU_SR  cpu_sr = 0u;
 971:uCOSII/Source/os_flag.c **** #endif
 972:uCOSII/Source/os_flag.c **** 
 973:uCOSII/Source/os_flag.c **** 
 974:uCOSII/Source/os_flag.c **** 
 975:uCOSII/Source/os_flag.c **** #ifdef OS_SAFETY_CRITICAL
 976:uCOSII/Source/os_flag.c ****     if (perr == (INT8U *)0) {
 977:uCOSII/Source/os_flag.c ****         OS_SAFETY_CRITICAL_EXCEPTION();
 978:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 979:uCOSII/Source/os_flag.c ****     }
 980:uCOSII/Source/os_flag.c **** #endif
 981:uCOSII/Source/os_flag.c **** 
 982:uCOSII/Source/os_flag.c **** #if OS_ARG_CHK_EN > 0u
 983:uCOSII/Source/os_flag.c ****     if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                               
 984:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_FLAG_INVALID_PGRP;
 985:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 986:uCOSII/Source/os_flag.c ****     }
 987:uCOSII/Source/os_flag.c **** #endif
 988:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                     
 989:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 990:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 991:uCOSII/Source/os_flag.c ****     }
 992:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 993:uCOSII/Source/os_flag.c ****     flags = pgrp->OSFlagFlags;
 994:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 995:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;
 996:uCOSII/Source/os_flag.c ****     return (flags);                               /* Return the current value of the event flags   
 997:uCOSII/Source/os_flag.c **** }
 998:uCOSII/Source/os_flag.c **** #endif
 999:uCOSII/Source/os_flag.c **** 
ARM GAS  /tmp/ccgMzuMT.s 			page 19


1000:uCOSII/Source/os_flag.c **** /*$PAGE*/
1001:uCOSII/Source/os_flag.c **** /*
1002:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1003:uCOSII/Source/os_flag.c **** *                     SUSPEND TASK UNTIL EVENT FLAG(s) RECEIVED OR TIMEOUT OCCURS
1004:uCOSII/Source/os_flag.c **** *
1005:uCOSII/Source/os_flag.c **** * Description: This function is internal to uC/OS-II and is used to put a task to sleep until the d
1006:uCOSII/Source/os_flag.c **** *              event flag bit(s) are set.
1007:uCOSII/Source/os_flag.c **** *
1008:uCOSII/Source/os_flag.c **** * Arguments  : pgrp          is a pointer to the desired event flag group.
1009:uCOSII/Source/os_flag.c **** *
1010:uCOSII/Source/os_flag.c **** *              pnode         is a pointer to a structure which contains data about the task waiting
1011:uCOSII/Source/os_flag.c **** *                            event flag bit(s) to be set.
1012:uCOSII/Source/os_flag.c **** *
1013:uCOSII/Source/os_flag.c **** *              flags         Is a bit pattern indicating which bit(s) (i.e. flags) you wish to chec
1014:uCOSII/Source/os_flag.c **** *                            The bits you want are specified by setting the corresponding bits in
1015:uCOSII/Source/os_flag.c **** *                            'flags'.  e.g. if your application wants to wait for bits 0 and 1 then
1016:uCOSII/Source/os_flag.c **** *                            'flags' would contain 0x03.
1017:uCOSII/Source/os_flag.c **** *
1018:uCOSII/Source/os_flag.c **** *              wait_type     specifies whether you want ALL bits to be set/cleared or ANY of the bi
1019:uCOSII/Source/os_flag.c **** *                            to be set/cleared.
1020:uCOSII/Source/os_flag.c **** *                            You can specify the following argument:
1021:uCOSII/Source/os_flag.c **** *
1022:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ALL   You will check ALL bits in 'mask' to be clear (
1023:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_CLR_ANY   You will check ANY bit  in 'mask' to be clear (
1024:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_SET_ALL   You will check ALL bits in 'mask' to be set   (
1025:uCOSII/Source/os_flag.c **** *                            OS_FLAG_WAIT_SET_ANY   You will check ANY bit  in 'mask' to be set   (
1026:uCOSII/Source/os_flag.c **** *
1027:uCOSII/Source/os_flag.c **** *              timeout       is the desired amount of time that the task will wait for the event fl
1028:uCOSII/Source/os_flag.c **** *                            bit(s) to be set.
1029:uCOSII/Source/os_flag.c **** *
1030:uCOSII/Source/os_flag.c **** * Returns    : none
1031:uCOSII/Source/os_flag.c **** *
1032:uCOSII/Source/os_flag.c **** * Called by  : OSFlagPend()  OS_FLAG.C
1033:uCOSII/Source/os_flag.c **** *
1034:uCOSII/Source/os_flag.c **** * Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
1035:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1036:uCOSII/Source/os_flag.c **** */
1037:uCOSII/Source/os_flag.c **** 
1038:uCOSII/Source/os_flag.c **** static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
1039:uCOSII/Source/os_flag.c ****                             OS_FLAG_NODE *pnode,
1040:uCOSII/Source/os_flag.c ****                             OS_FLAGS      flags,
1041:uCOSII/Source/os_flag.c ****                             INT8U         wait_type,
1042:uCOSII/Source/os_flag.c ****                             INT32U        timeout)
1043:uCOSII/Source/os_flag.c **** {
  29              		.loc 1 1043 1 view -0
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 1 1043 1 is_stmt 0 view .LVU1
  35 0000 70B4     		push	{r4, r5, r6}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 12
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 6, -4
1044:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE  *pnode_next;
ARM GAS  /tmp/ccgMzuMT.s 			page 20


  41              		.loc 1 1044 5 is_stmt 1 view .LVU2
1045:uCOSII/Source/os_flag.c ****     INT8U          y;
  42              		.loc 1 1045 5 view .LVU3
1046:uCOSII/Source/os_flag.c **** 
1047:uCOSII/Source/os_flag.c **** 
1048:uCOSII/Source/os_flag.c ****     OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  43              		.loc 1 1048 5 view .LVU4
  44              		.loc 1 1048 30 is_stmt 0 view .LVU5
  45 0002 174C     		ldr	r4, .L5
  46 0004 2468     		ldr	r4, [r4]
  47 0006 94F83450 		ldrb	r5, [r4, #52]	@ zero_extendqisi2
  48 000a 45F02005 		orr	r5, r5, #32
  49 000e 84F83450 		strb	r5, [r4, #52]
1049:uCOSII/Source/os_flag.c ****     OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  50              		.loc 1 1049 5 is_stmt 1 view .LVU6
  51              		.loc 1 1049 31 is_stmt 0 view .LVU7
  52 0012 0025     		movs	r5, #0
  53 0014 84F83550 		strb	r5, [r4, #53]
1050:uCOSII/Source/os_flag.c ****     OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB               
  54              		.loc 1 1050 5 is_stmt 1 view .LVU8
  55              		.loc 1 1050 31 is_stmt 0 view .LVU9
  56 0018 039E     		ldr	r6, [sp, #12]
  57 001a 2663     		str	r6, [r4, #48]
1051:uCOSII/Source/os_flag.c **** #if OS_TASK_DEL_EN > 0u
1052:uCOSII/Source/os_flag.c ****     OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                       
  58              		.loc 1 1052 5 is_stmt 1 view .LVU10
  59              		.loc 1 1052 31 is_stmt 0 view .LVU11
  60 001c A162     		str	r1, [r4, #40]
1053:uCOSII/Source/os_flag.c **** #endif
1054:uCOSII/Source/os_flag.c ****     pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for   
  61              		.loc 1 1054 5 is_stmt 1 view .LVU12
  62              		.loc 1 1054 31 is_stmt 0 view .LVU13
  63 001e 0A82     		strh	r2, [r1, #16]	@ movhi
1055:uCOSII/Source/os_flag.c ****     pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing        
  64              		.loc 1 1055 5 is_stmt 1 view .LVU14
  65              		.loc 1 1055 31 is_stmt 0 view .LVU15
  66 0020 8B74     		strb	r3, [r1, #18]
1056:uCOSII/Source/os_flag.c ****     pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                        
  67              		.loc 1 1056 5 is_stmt 1 view .LVU16
  68              		.loc 1 1056 31 is_stmt 0 view .LVU17
  69 0022 8C60     		str	r4, [r1, #8]
1057:uCOSII/Source/os_flag.c ****     pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait l
  70              		.loc 1 1057 5 is_stmt 1 view .LVU18
  71              		.loc 1 1057 37 is_stmt 0 view .LVU19
  72 0024 4368     		ldr	r3, [r0, #4]
  73              	.LVL1:
  74              		.loc 1 1057 31 view .LVU20
  75 0026 0B60     		str	r3, [r1]
1058:uCOSII/Source/os_flag.c ****     pnode->OSFlagNodePrev     = (void *)0;
  76              		.loc 1 1058 5 is_stmt 1 view .LVU21
  77              		.loc 1 1058 31 is_stmt 0 view .LVU22
  78 0028 4D60     		str	r5, [r1, #4]
1059:uCOSII/Source/os_flag.c ****     pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                  
  79              		.loc 1 1059 5 is_stmt 1 view .LVU23
  80              		.loc 1 1059 31 is_stmt 0 view .LVU24
  81 002a C860     		str	r0, [r1, #12]
1060:uCOSII/Source/os_flag.c ****     pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
ARM GAS  /tmp/ccgMzuMT.s 			page 21


  82              		.loc 1 1060 5 is_stmt 1 view .LVU25
  83              		.loc 1 1060 31 is_stmt 0 view .LVU26
  84 002c 4368     		ldr	r3, [r0, #4]
  85              	.LVL2:
1061:uCOSII/Source/os_flag.c ****     if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?         
  86              		.loc 1 1061 5 is_stmt 1 view .LVU27
  87              		.loc 1 1061 8 is_stmt 0 view .LVU28
  88 002e 03B1     		cbz	r3, .L2
1062:uCOSII/Source/os_flag.c ****         pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list            
  89              		.loc 1 1062 9 is_stmt 1 view .LVU29
  90              		.loc 1 1062 36 is_stmt 0 view .LVU30
  91 0030 5960     		str	r1, [r3, #4]
  92              	.LVL3:
  93              	.L2:
1063:uCOSII/Source/os_flag.c ****     }
1064:uCOSII/Source/os_flag.c ****     pgrp->OSFlagWaitList = (void *)pnode;
  94              		.loc 1 1064 5 is_stmt 1 view .LVU31
  95              		.loc 1 1064 26 is_stmt 0 view .LVU32
  96 0032 4160     		str	r1, [r0, #4]
1065:uCOSII/Source/os_flag.c **** 
1066:uCOSII/Source/os_flag.c ****     y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) receive
  97              		.loc 1 1066 5 is_stmt 1 view .LVU33
  98              		.loc 1 1066 29 is_stmt 0 view .LVU34
  99 0034 0A4B     		ldr	r3, .L5
 100              	.LVL4:
 101              		.loc 1 1066 29 view .LVU35
 102 0036 1A68     		ldr	r2, [r3]
 103              	.LVL5:
 104              		.loc 1 1066 18 view .LVU36
 105 0038 92F83810 		ldrb	r1, [r2, #56]	@ zero_extendqisi2
 106              	.LVL6:
1067:uCOSII/Source/os_flag.c ****     OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 107              		.loc 1 1067 5 is_stmt 1 view .LVU37
 108              		.loc 1 1067 38 is_stmt 0 view .LVU38
 109 003c 92F83940 		ldrb	r4, [r2, #57]	@ zero_extendqisi2
 110              		.loc 1 1067 17 view .LVU39
 111 0040 0848     		ldr	r0, .L5+4
 112              	.LVL7:
 113              		.loc 1 1067 17 view .LVU40
 114 0042 435C     		ldrb	r3, [r0, r1]	@ zero_extendqisi2
 115 0044 23EA0403 		bic	r3, r3, r4
 116 0048 4354     		strb	r3, [r0, r1]
 117              	.LVL8:
1068:uCOSII/Source/os_flag.c ****     if (OSRdyTbl[y] == 0x00u) {
 118              		.loc 1 1068 5 is_stmt 1 view .LVU41
 119              		.loc 1 1068 8 is_stmt 0 view .LVU42
 120 004a 33B9     		cbnz	r3, .L1
1069:uCOSII/Source/os_flag.c ****         OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 121              		.loc 1 1069 9 is_stmt 1 view .LVU43
 122              		.loc 1 1069 39 is_stmt 0 view .LVU44
 123 004c 92F83A10 		ldrb	r1, [r2, #58]	@ zero_extendqisi2
 124              	.LVL9:
 125              		.loc 1 1069 18 view .LVU45
 126 0050 054A     		ldr	r2, .L5+8
 127              	.LVL10:
 128              		.loc 1 1069 18 view .LVU46
 129 0052 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccgMzuMT.s 			page 22


 130 0054 23EA0103 		bic	r3, r3, r1
 131 0058 1370     		strb	r3, [r2]
 132              	.L1:
1070:uCOSII/Source/os_flag.c ****     }
1071:uCOSII/Source/os_flag.c **** }
 133              		.loc 1 1071 1 view .LVU47
 134 005a 70BC     		pop	{r4, r5, r6}
 135              	.LCFI1:
 136              		.cfi_restore 6
 137              		.cfi_restore 5
 138              		.cfi_restore 4
 139              		.cfi_def_cfa_offset 0
 140              	.LVL11:
 141              		.loc 1 1071 1 view .LVU48
 142 005c 7047     		bx	lr
 143              	.L6:
 144 005e 00BF     		.align	2
 145              	.L5:
 146 0060 00000000 		.word	OSTCBCur
 147 0064 00000000 		.word	OSRdyTbl
 148 0068 00000000 		.word	OSRdyGrp
 149              		.cfi_endproc
 150              	.LFE9:
 152              		.section	.text.OSFlagAccept,"ax",%progbits
 153              		.align	1
 154              		.global	OSFlagAccept
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu fpv4-sp-d16
 160              	OSFlagAccept:
 161              	.LVL12:
 162              	.LFB0:
  98:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_rdy;
 163              		.loc 1 98 1 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
  98:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_rdy;
 167              		.loc 1 98 1 is_stmt 0 view .LVU50
 168 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 169              	.LCFI2:
 170              		.cfi_def_cfa_offset 24
 171              		.cfi_offset 4, -24
 172              		.cfi_offset 5, -20
 173              		.cfi_offset 6, -16
 174              		.cfi_offset 7, -12
 175              		.cfi_offset 8, -8
 176              		.cfi_offset 14, -4
 177 0004 1D46     		mov	r5, r3
  99:uCOSII/Source/os_flag.c ****     INT8U         result;
 178              		.loc 1 99 5 is_stmt 1 view .LVU51
 100:uCOSII/Source/os_flag.c ****     BOOLEAN       consume;
 179              		.loc 1 100 5 view .LVU52
 101:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 180              		.loc 1 101 5 view .LVU53
 103:uCOSII/Source/os_flag.c **** #endif
ARM GAS  /tmp/ccgMzuMT.s 			page 23


 181              		.loc 1 103 5 view .LVU54
 182              	.LVL13:
 121:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 183              		.loc 1 121 5 view .LVU55
 121:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 184              		.loc 1 121 13 is_stmt 0 view .LVU56
 185 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 186              	.LVL14:
 121:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 187              		.loc 1 121 8 view .LVU57
 188 0008 052B     		cmp	r3, #5
 189 000a 05D0     		beq	.L8
 122:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 190              		.loc 1 122 9 is_stmt 1 view .LVU58
 122:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 191              		.loc 1 122 15 is_stmt 0 view .LVU59
 192 000c 0123     		movs	r3, #1
 193 000e 2B70     		strb	r3, [r5]
 123:uCOSII/Source/os_flag.c ****     }
 194              		.loc 1 123 9 is_stmt 1 view .LVU60
 123:uCOSII/Source/os_flag.c ****     }
 195              		.loc 1 123 16 is_stmt 0 view .LVU61
 196 0010 0024     		movs	r4, #0
 197              	.LVL15:
 198              	.L9:
 193:uCOSII/Source/os_flag.c **** #endif
 199              		.loc 1 193 1 view .LVU62
 200 0012 2046     		mov	r0, r4
 201 0014 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 202              	.LVL16:
 203              	.L8:
 193:uCOSII/Source/os_flag.c **** #endif
 204              		.loc 1 193 1 view .LVU63
 205 0018 0646     		mov	r6, r0
 206 001a 0F46     		mov	r7, r1
 207 001c 1446     		mov	r4, r2
 125:uCOSII/Source/os_flag.c ****     if (result != (INT8U)0) {                              /* See if we need to consume the flags  
 208              		.loc 1 125 5 is_stmt 1 view .LVU64
 209              	.LVL17:
 126:uCOSII/Source/os_flag.c ****         wait_type &= ~OS_FLAG_CONSUME;
 210              		.loc 1 126 5 view .LVU65
 126:uCOSII/Source/os_flag.c ****         wait_type &= ~OS_FLAG_CONSUME;
 211              		.loc 1 126 8 is_stmt 0 view .LVU66
 212 001e 12F0800F 		tst	r2, #128
 213 0022 0BD1     		bne	.L27
 130:uCOSII/Source/os_flag.c ****     }
 214              		.loc 1 130 20 view .LVU67
 215 0024 4FF00008 		mov	r8, #0
 216              	.LVL18:
 217              	.L10:
 133:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 218              		.loc 1 133 5 is_stmt 1 view .LVU68
 133:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 219              		.loc 1 133 11 is_stmt 0 view .LVU69
 220 0028 0023     		movs	r3, #0
 221 002a 2B70     		strb	r3, [r5]
 134:uCOSII/Source/os_flag.c ****     switch (wait_type) {
ARM GAS  /tmp/ccgMzuMT.s 			page 24


 222              		.loc 1 134 5 is_stmt 1 view .LVU70
 223 002c FFF7FEFF 		bl	OS_CPU_SR_Save
 224              	.LVL19:
 134:uCOSII/Source/os_flag.c ****     switch (wait_type) {
 225              		.loc 1 134 24 view .LVU71
 135:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set    
 226              		.loc 1 135 5 view .LVU72
 227 0030 032C     		cmp	r4, #3
 228 0032 49D8     		bhi	.L11
 229 0034 DFE804F0 		tbb	[pc, r4]
 230              	.L13:
 231 0038 29       		.byte	(.L16-.L13)/2
 232 0039 39       		.byte	(.L15-.L13)/2
 233 003a 07       		.byte	(.L14-.L13)/2
 234 003b 19       		.byte	(.L12-.L13)/2
 235              	.LVL20:
 236              		.p2align 1
 237              	.L27:
 127:uCOSII/Source/os_flag.c ****         consume    = OS_TRUE;
 238              		.loc 1 127 9 view .LVU73
 127:uCOSII/Source/os_flag.c ****         consume    = OS_TRUE;
 239              		.loc 1 127 19 is_stmt 0 view .LVU74
 240 003c 02F07F04 		and	r4, r2, #127
 241              	.LVL21:
 128:uCOSII/Source/os_flag.c ****     } else {
 242              		.loc 1 128 9 is_stmt 1 view .LVU75
 128:uCOSII/Source/os_flag.c ****     } else {
 243              		.loc 1 128 20 is_stmt 0 view .LVU76
 244 0040 4FF00108 		mov	r8, #1
 245 0044 F0E7     		b	.L10
 246              	.LVL22:
 247              	.L14:
 137:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 248              		.loc 1 137 14 is_stmt 1 view .LVU77
 137:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 249              		.loc 1 137 41 is_stmt 0 view .LVU78
 250 0046 3389     		ldrh	r3, [r6, #8]
 137:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 251              		.loc 1 137 24 view .LVU79
 252 0048 03EA0704 		and	r4, r3, r7
 253              	.LVL23:
 138:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 254              		.loc 1 138 14 is_stmt 1 view .LVU80
 138:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 255              		.loc 1 138 17 is_stmt 0 view .LVU81
 256 004c 37EA0302 		bics	r2, r7, r3
 257 0050 04D0     		beq	.L28
 143:uCOSII/Source/os_flag.c ****              }
 258              		.loc 1 143 18 is_stmt 1 view .LVU82
 143:uCOSII/Source/os_flag.c ****              }
 259              		.loc 1 143 24 is_stmt 0 view .LVU83
 260 0052 7023     		movs	r3, #112
 261 0054 2B70     		strb	r3, [r5]
 262              	.L18:
 145:uCOSII/Source/os_flag.c ****              break;
 263              		.loc 1 145 14 is_stmt 1 view .LVU84
 264 0056 FFF7FEFF 		bl	OS_CPU_SR_Restore
ARM GAS  /tmp/ccgMzuMT.s 			page 25


 265              	.LVL24:
 145:uCOSII/Source/os_flag.c ****              break;
 266              		.loc 1 145 32 view .LVU85
 146:uCOSII/Source/os_flag.c **** 
 267              		.loc 1 146 14 view .LVU86
 268 005a DAE7     		b	.L9
 269              	.LVL25:
 270              	.L28:
 139:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we want
 271              		.loc 1 139 18 view .LVU87
 139:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we want
 272              		.loc 1 139 21 is_stmt 0 view .LVU88
 273 005c B8F1000F 		cmp	r8, #0
 274 0060 F9D0     		beq	.L18
 140:uCOSII/Source/os_flag.c ****                  }
 275              		.loc 1 140 22 is_stmt 1 view .LVU89
 140:uCOSII/Source/os_flag.c ****                  }
 276              		.loc 1 140 40 is_stmt 0 view .LVU90
 277 0062 23EA0403 		bic	r3, r3, r4
 278 0066 3381     		strh	r3, [r6, #8]	@ movhi
 279 0068 F5E7     		b	.L18
 280              	.LVL26:
 281              	.L12:
 149:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 282              		.loc 1 149 14 is_stmt 1 view .LVU91
 149:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 283              		.loc 1 149 41 is_stmt 0 view .LVU92
 284 006a 3389     		ldrh	r3, [r6, #8]
 285              	.LVL27:
 150:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 286              		.loc 1 150 14 is_stmt 1 view .LVU93
 150:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 287              		.loc 1 150 17 is_stmt 0 view .LVU94
 288 006c 13EA0704 		ands	r4, r3, r7
 289              	.LVL28:
 150:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 290              		.loc 1 150 17 view .LVU95
 291 0070 06D0     		beq	.L19
 151:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got 
 292              		.loc 1 151 18 is_stmt 1 view .LVU96
 151:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;     /* Clear ONLY the flags we got 
 293              		.loc 1 151 21 is_stmt 0 view .LVU97
 294 0072 B8F1000F 		cmp	r8, #0
 295 0076 05D0     		beq	.L20
 152:uCOSII/Source/os_flag.c ****                  }
 296              		.loc 1 152 22 is_stmt 1 view .LVU98
 152:uCOSII/Source/os_flag.c ****                  }
 297              		.loc 1 152 40 is_stmt 0 view .LVU99
 298 0078 23EA0403 		bic	r3, r3, r4
 299 007c 3381     		strh	r3, [r6, #8]	@ movhi
 300 007e 01E0     		b	.L20
 301              	.L19:
 155:uCOSII/Source/os_flag.c ****              }
 302              		.loc 1 155 18 is_stmt 1 view .LVU100
 155:uCOSII/Source/os_flag.c ****              }
 303              		.loc 1 155 24 is_stmt 0 view .LVU101
 304 0080 7023     		movs	r3, #112
ARM GAS  /tmp/ccgMzuMT.s 			page 26


 305 0082 2B70     		strb	r3, [r5]
 306              	.L20:
 157:uCOSII/Source/os_flag.c ****              break;
 307              		.loc 1 157 14 is_stmt 1 view .LVU102
 308 0084 FFF7FEFF 		bl	OS_CPU_SR_Restore
 309              	.LVL29:
 157:uCOSII/Source/os_flag.c ****              break;
 310              		.loc 1 157 32 view .LVU103
 158:uCOSII/Source/os_flag.c **** 
 311              		.loc 1 158 14 view .LVU104
 312 0088 C3E7     		b	.L9
 313              	.LVL30:
 314              	.L16:
 162:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 315              		.loc 1 162 14 view .LVU105
 162:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 316              		.loc 1 162 41 is_stmt 0 view .LVU106
 317 008a 3389     		ldrh	r3, [r6, #8]
 162:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 318              		.loc 1 162 24 view .LVU107
 319 008c 27EA0304 		bic	r4, r7, r3
 320              	.LVL31:
 163:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 321              		.loc 1 163 14 is_stmt 1 view .LVU108
 163:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 322              		.loc 1 163 17 is_stmt 0 view .LVU109
 323 0090 3B42     		tst	r3, r7
 324 0092 04D0     		beq	.L29
 168:uCOSII/Source/os_flag.c ****              }
 325              		.loc 1 168 18 is_stmt 1 view .LVU110
 168:uCOSII/Source/os_flag.c ****              }
 326              		.loc 1 168 24 is_stmt 0 view .LVU111
 327 0094 7023     		movs	r3, #112
 328 0096 2B70     		strb	r3, [r5]
 329              	.L22:
 170:uCOSII/Source/os_flag.c ****              break;
 330              		.loc 1 170 14 is_stmt 1 view .LVU112
 331 0098 FFF7FEFF 		bl	OS_CPU_SR_Restore
 332              	.LVL32:
 170:uCOSII/Source/os_flag.c ****              break;
 333              		.loc 1 170 32 view .LVU113
 171:uCOSII/Source/os_flag.c **** 
 334              		.loc 1 171 14 view .LVU114
 335 009c B9E7     		b	.L9
 336              	.LVL33:
 337              	.L29:
 164:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 338              		.loc 1 164 18 view .LVU115
 164:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 339              		.loc 1 164 21 is_stmt 0 view .LVU116
 340 009e B8F1000F 		cmp	r8, #0
 341 00a2 F9D0     		beq	.L22
 165:uCOSII/Source/os_flag.c ****                  }
 342              		.loc 1 165 22 is_stmt 1 view .LVU117
 165:uCOSII/Source/os_flag.c ****                  }
 343              		.loc 1 165 40 is_stmt 0 view .LVU118
 344 00a4 2343     		orrs	r3, r3, r4
ARM GAS  /tmp/ccgMzuMT.s 			page 27


 345 00a6 3381     		strh	r3, [r6, #8]	@ movhi
 346 00a8 F6E7     		b	.L22
 347              	.LVL34:
 348              	.L15:
 174:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
 349              		.loc 1 174 14 is_stmt 1 view .LVU119
 174:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
 350              		.loc 1 174 41 is_stmt 0 view .LVU120
 351 00aa 3389     		ldrh	r3, [r6, #8]
 352              	.LVL35:
 175:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 353              		.loc 1 175 14 is_stmt 1 view .LVU121
 175:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 354              		.loc 1 175 17 is_stmt 0 view .LVU122
 355 00ac 37EA0304 		bics	r4, r7, r3
 356              	.LVL36:
 175:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 357              		.loc 1 175 17 view .LVU123
 358 00b0 05D0     		beq	.L23
 176:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 359              		.loc 1 176 18 is_stmt 1 view .LVU124
 176:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 360              		.loc 1 176 21 is_stmt 0 view .LVU125
 361 00b2 B8F1000F 		cmp	r8, #0
 362 00b6 04D0     		beq	.L24
 177:uCOSII/Source/os_flag.c ****                  }
 363              		.loc 1 177 22 is_stmt 1 view .LVU126
 177:uCOSII/Source/os_flag.c ****                  }
 364              		.loc 1 177 40 is_stmt 0 view .LVU127
 365 00b8 2343     		orrs	r3, r3, r4
 366 00ba 3381     		strh	r3, [r6, #8]	@ movhi
 367 00bc 01E0     		b	.L24
 368              	.L23:
 180:uCOSII/Source/os_flag.c ****              }
 369              		.loc 1 180 18 is_stmt 1 view .LVU128
 180:uCOSII/Source/os_flag.c ****              }
 370              		.loc 1 180 24 is_stmt 0 view .LVU129
 371 00be 7023     		movs	r3, #112
 372 00c0 2B70     		strb	r3, [r5]
 373              	.L24:
 182:uCOSII/Source/os_flag.c ****              break;
 374              		.loc 1 182 14 is_stmt 1 view .LVU130
 375 00c2 FFF7FEFF 		bl	OS_CPU_SR_Restore
 376              	.LVL37:
 182:uCOSII/Source/os_flag.c ****              break;
 377              		.loc 1 182 32 view .LVU131
 183:uCOSII/Source/os_flag.c **** #endif
 378              		.loc 1 183 14 view .LVU132
 379 00c6 A4E7     		b	.L9
 380              	.LVL38:
 381              	.L11:
 187:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 382              		.loc 1 187 14 view .LVU133
 383 00c8 FFF7FEFF 		bl	OS_CPU_SR_Restore
 384              	.LVL39:
 187:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 385              		.loc 1 187 32 view .LVU134
ARM GAS  /tmp/ccgMzuMT.s 			page 28


 188:uCOSII/Source/os_flag.c ****              *perr     = OS_ERR_FLAG_WAIT_TYPE;
 386              		.loc 1 188 14 view .LVU135
 189:uCOSII/Source/os_flag.c ****              break;
 387              		.loc 1 189 14 view .LVU136
 189:uCOSII/Source/os_flag.c ****              break;
 388              		.loc 1 189 24 is_stmt 0 view .LVU137
 389 00cc 6F23     		movs	r3, #111
 390 00ce 2B70     		strb	r3, [r5]
 190:uCOSII/Source/os_flag.c ****     }
 391              		.loc 1 190 14 is_stmt 1 view .LVU138
 188:uCOSII/Source/os_flag.c ****              *perr     = OS_ERR_FLAG_WAIT_TYPE;
 392              		.loc 1 188 24 is_stmt 0 view .LVU139
 393 00d0 0024     		movs	r4, #0
 394              	.LVL40:
 190:uCOSII/Source/os_flag.c ****     }
 395              		.loc 1 190 14 view .LVU140
 396 00d2 9EE7     		b	.L9
 397              		.cfi_endproc
 398              	.LFE0:
 400              		.section	.rodata.OSFlagCreate.str1.4,"aMS",%progbits,1
 401              		.align	2
 402              	.LC0:
 403 0000 3F00     		.ascii	"?\000"
 404              		.section	.text.OSFlagCreate,"ax",%progbits
 405              		.align	1
 406              		.global	OSFlagCreate
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 410              		.fpu fpv4-sp-d16
 412              	OSFlagCreate:
 413              	.LVL41:
 414              	.LFB1:
 219:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP *pgrp;
 415              		.loc 1 219 1 is_stmt 1 view -0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 219:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP *pgrp;
 419              		.loc 1 219 1 is_stmt 0 view .LVU142
 420 0000 70B5     		push	{r4, r5, r6, lr}
 421              	.LCFI3:
 422              		.cfi_def_cfa_offset 16
 423              		.cfi_offset 4, -16
 424              		.cfi_offset 5, -12
 425              		.cfi_offset 6, -8
 426              		.cfi_offset 14, -4
 427 0002 0D46     		mov	r5, r1
 220:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register    
 428              		.loc 1 220 5 is_stmt 1 view .LVU143
 222:uCOSII/Source/os_flag.c **** #endif
 429              		.loc 1 222 5 view .LVU144
 430              	.LVL42:
 241:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                
 431              		.loc 1 241 5 view .LVU145
 241:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                
 432              		.loc 1 241 22 is_stmt 0 view .LVU146
ARM GAS  /tmp/ccgMzuMT.s 			page 29


 433 0004 0F4B     		ldr	r3, .L36
 434 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 241:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                
 435              		.loc 1 241 8 view .LVU147
 436 0008 9BB9     		cbnz	r3, .L35
 437 000a 0646     		mov	r6, r0
 245:uCOSII/Source/os_flag.c ****     pgrp = OSFlagFreeList;                          /* Get next free event flag                    
 438              		.loc 1 245 5 is_stmt 1 view .LVU148
 439 000c FFF7FEFF 		bl	OS_CPU_SR_Save
 440              	.LVL43:
 245:uCOSII/Source/os_flag.c ****     pgrp = OSFlagFreeList;                          /* Get next free event flag                    
 441              		.loc 1 245 24 view .LVU149
 246:uCOSII/Source/os_flag.c ****     if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available  
 442              		.loc 1 246 5 view .LVU150
 246:uCOSII/Source/os_flag.c ****     if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available  
 443              		.loc 1 246 10 is_stmt 0 view .LVU151
 444 0010 0D4B     		ldr	r3, .L36+4
 445 0012 1C68     		ldr	r4, [r3]
 446              	.LVL44:
 247:uCOSII/Source/os_flag.c ****                                                     /* Adjust free list                            
 447              		.loc 1 247 5 is_stmt 1 view .LVU152
 247:uCOSII/Source/os_flag.c ****                                                     /* Adjust free list                            
 448              		.loc 1 247 8 is_stmt 0 view .LVU153
 449 0014 8CB1     		cbz	r4, .L33
 249:uCOSII/Source/os_flag.c ****         pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                
 450              		.loc 1 249 9 is_stmt 1 view .LVU154
 249:uCOSII/Source/os_flag.c ****         pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                
 451              		.loc 1 249 61 is_stmt 0 view .LVU155
 452 0016 6268     		ldr	r2, [r4, #4]
 249:uCOSII/Source/os_flag.c ****         pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                
 453              		.loc 1 249 30 view .LVU156
 454 0018 1A60     		str	r2, [r3]
 250:uCOSII/Source/os_flag.c ****         pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                
 455              		.loc 1 250 9 is_stmt 1 view .LVU157
 250:uCOSII/Source/os_flag.c ****         pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                
 456              		.loc 1 250 30 is_stmt 0 view .LVU158
 457 001a 0523     		movs	r3, #5
 458 001c 2370     		strb	r3, [r4]
 251:uCOSII/Source/os_flag.c ****         pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags        
 459              		.loc 1 251 9 is_stmt 1 view .LVU159
 251:uCOSII/Source/os_flag.c ****         pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags        
 460              		.loc 1 251 30 is_stmt 0 view .LVU160
 461 001e 2681     		strh	r6, [r4, #8]	@ movhi
 252:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 462              		.loc 1 252 9 is_stmt 1 view .LVU161
 252:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 463              		.loc 1 252 30 is_stmt 0 view .LVU162
 464 0020 0026     		movs	r6, #0
 465 0022 6660     		str	r6, [r4, #4]
 254:uCOSII/Source/os_flag.c **** #endif
 466              		.loc 1 254 9 is_stmt 1 view .LVU163
 254:uCOSII/Source/os_flag.c **** #endif
 467              		.loc 1 254 30 is_stmt 0 view .LVU164
 468 0024 094B     		ldr	r3, .L36+8
 469 0026 E360     		str	r3, [r4, #12]
 256:uCOSII/Source/os_flag.c ****         *perr                = OS_ERR_NONE;
 470              		.loc 1 256 9 is_stmt 1 view .LVU165
ARM GAS  /tmp/ccgMzuMT.s 			page 30


 471 0028 FFF7FEFF 		bl	OS_CPU_SR_Restore
 472              	.LVL45:
 256:uCOSII/Source/os_flag.c ****         *perr                = OS_ERR_NONE;
 473              		.loc 1 256 27 view .LVU166
 257:uCOSII/Source/os_flag.c ****     } else {
 474              		.loc 1 257 9 view .LVU167
 257:uCOSII/Source/os_flag.c ****     } else {
 475              		.loc 1 257 30 is_stmt 0 view .LVU168
 476 002c 2E70     		strb	r6, [r5]
 477              	.LVL46:
 478              	.L30:
 263:uCOSII/Source/os_flag.c **** 
 479              		.loc 1 263 1 view .LVU169
 480 002e 2046     		mov	r0, r4
 481 0030 70BD     		pop	{r4, r5, r6, pc}
 482              	.LVL47:
 483              	.L35:
 242:uCOSII/Source/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 484              		.loc 1 242 9 is_stmt 1 view .LVU170
 242:uCOSII/Source/os_flag.c ****         return ((OS_FLAG_GRP *)0);
 485              		.loc 1 242 15 is_stmt 0 view .LVU171
 486 0032 1023     		movs	r3, #16
 487 0034 0B70     		strb	r3, [r1]
 243:uCOSII/Source/os_flag.c ****     }
 488              		.loc 1 243 9 is_stmt 1 view .LVU172
 243:uCOSII/Source/os_flag.c ****     }
 489              		.loc 1 243 16 is_stmt 0 view .LVU173
 490 0036 0024     		movs	r4, #0
 491 0038 F9E7     		b	.L30
 492              	.LVL48:
 493              	.L33:
 259:uCOSII/Source/os_flag.c ****         *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 494              		.loc 1 259 9 is_stmt 1 view .LVU174
 495 003a FFF7FEFF 		bl	OS_CPU_SR_Restore
 496              	.LVL49:
 259:uCOSII/Source/os_flag.c ****         *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 497              		.loc 1 259 27 view .LVU175
 260:uCOSII/Source/os_flag.c ****     }
 498              		.loc 1 260 9 view .LVU176
 260:uCOSII/Source/os_flag.c ****     }
 499              		.loc 1 260 30 is_stmt 0 view .LVU177
 500 003e 7223     		movs	r3, #114
 501 0040 2B70     		strb	r3, [r5]
 502 0042 F4E7     		b	.L30
 503              	.L37:
 504              		.align	2
 505              	.L36:
 506 0044 00000000 		.word	OSIntNesting
 507 0048 00000000 		.word	OSFlagFreeList
 508 004c 00000000 		.word	.LC0
 509              		.cfi_endproc
 510              	.LFE1:
 512              		.section	.text.OSFlagNameGet,"ax",%progbits
 513              		.align	1
 514              		.global	OSFlagNameGet
 515              		.syntax unified
 516              		.thumb
ARM GAS  /tmp/ccgMzuMT.s 			page 31


 517              		.thumb_func
 518              		.fpu fpv4-sp-d16
 520              	OSFlagNameGet:
 521              	.LVL50:
 522              	.LFB3:
 423:uCOSII/Source/os_flag.c ****     INT8U      len;
 523              		.loc 1 423 1 is_stmt 1 view -0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 423:uCOSII/Source/os_flag.c ****     INT8U      len;
 527              		.loc 1 423 1 is_stmt 0 view .LVU179
 528 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 529              	.LCFI4:
 530              		.cfi_def_cfa_offset 24
 531              		.cfi_offset 4, -24
 532              		.cfi_offset 5, -20
 533              		.cfi_offset 6, -16
 534              		.cfi_offset 7, -12
 535              		.cfi_offset 8, -8
 536              		.cfi_offset 14, -4
 537 0004 1546     		mov	r5, r2
 424:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register       
 538              		.loc 1 424 5 is_stmt 1 view .LVU180
 426:uCOSII/Source/os_flag.c **** #endif
 539              		.loc 1 426 5 view .LVU181
 540              	.LVL51:
 448:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_GET_ISR;
 541              		.loc 1 448 5 view .LVU182
 448:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_GET_ISR;
 542              		.loc 1 448 22 is_stmt 0 view .LVU183
 543 0006 104B     		ldr	r3, .L43
 544 0008 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 448:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_GET_ISR;
 545              		.loc 1 448 8 view .LVU184
 546 000a 2CB1     		cbz	r4, .L39
 449:uCOSII/Source/os_flag.c ****         return (0u);
 547              		.loc 1 449 9 is_stmt 1 view .LVU185
 449:uCOSII/Source/os_flag.c ****         return (0u);
 548              		.loc 1 449 15 is_stmt 0 view .LVU186
 549 000c 1123     		movs	r3, #17
 550 000e 1370     		strb	r3, [r2]
 450:uCOSII/Source/os_flag.c ****     }
 551              		.loc 1 450 9 is_stmt 1 view .LVU187
 450:uCOSII/Source/os_flag.c ****     }
 552              		.loc 1 450 16 is_stmt 0 view .LVU188
 553 0010 0024     		movs	r4, #0
 554              	.LVL52:
 555              	.L40:
 463:uCOSII/Source/os_flag.c **** #endif
 556              		.loc 1 463 1 view .LVU189
 557 0012 2046     		mov	r0, r4
 558 0014 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 559              	.LVL53:
 560              	.L39:
 463:uCOSII/Source/os_flag.c **** #endif
 561              		.loc 1 463 1 view .LVU190
ARM GAS  /tmp/ccgMzuMT.s 			page 32


 562 0018 0746     		mov	r7, r0
 563 001a 0E46     		mov	r6, r1
 452:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 564              		.loc 1 452 5 is_stmt 1 view .LVU191
 565 001c FFF7FEFF 		bl	OS_CPU_SR_Save
 566              	.LVL54:
 452:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 567              		.loc 1 452 5 is_stmt 0 view .LVU192
 568 0020 8046     		mov	r8, r0
 569              	.LVL55:
 452:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 570              		.loc 1 452 24 is_stmt 1 view .LVU193
 453:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 571              		.loc 1 453 5 view .LVU194
 453:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 572              		.loc 1 453 13 is_stmt 0 view .LVU195
 573 0022 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 453:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 574              		.loc 1 453 8 view .LVU196
 575 0024 052B     		cmp	r3, #5
 576 0026 04D0     		beq	.L41
 454:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 577              		.loc 1 454 9 is_stmt 1 view .LVU197
 578 0028 FFF7FEFF 		bl	OS_CPU_SR_Restore
 579              	.LVL56:
 454:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 580              		.loc 1 454 27 view .LVU198
 455:uCOSII/Source/os_flag.c ****         return (0u);
 581              		.loc 1 455 9 view .LVU199
 455:uCOSII/Source/os_flag.c ****         return (0u);
 582              		.loc 1 455 15 is_stmt 0 view .LVU200
 583 002c 0123     		movs	r3, #1
 584 002e 2B70     		strb	r3, [r5]
 456:uCOSII/Source/os_flag.c ****     }
 585              		.loc 1 456 9 is_stmt 1 view .LVU201
 456:uCOSII/Source/os_flag.c ****     }
 586              		.loc 1 456 16 is_stmt 0 view .LVU202
 587 0030 EFE7     		b	.L40
 588              	.LVL57:
 589              	.L41:
 458:uCOSII/Source/os_flag.c ****     len    = OS_StrLen(*pname);
 590              		.loc 1 458 5 is_stmt 1 view .LVU203
 458:uCOSII/Source/os_flag.c ****     len    = OS_StrLen(*pname);
 591              		.loc 1 458 18 is_stmt 0 view .LVU204
 592 0032 F868     		ldr	r0, [r7, #12]
 593              	.LVL58:
 458:uCOSII/Source/os_flag.c ****     len    = OS_StrLen(*pname);
 594              		.loc 1 458 12 view .LVU205
 595 0034 3060     		str	r0, [r6]
 459:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 596              		.loc 1 459 5 is_stmt 1 view .LVU206
 459:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 597              		.loc 1 459 14 is_stmt 0 view .LVU207
 598 0036 FFF7FEFF 		bl	OS_StrLen
 599              	.LVL59:
 600 003a 0446     		mov	r4, r0
 601              	.LVL60:
ARM GAS  /tmp/ccgMzuMT.s 			page 33


 460:uCOSII/Source/os_flag.c ****     *perr  = OS_ERR_NONE;
 602              		.loc 1 460 5 is_stmt 1 view .LVU208
 603 003c 4046     		mov	r0, r8
 604 003e FFF7FEFF 		bl	OS_CPU_SR_Restore
 605              	.LVL61:
 460:uCOSII/Source/os_flag.c ****     *perr  = OS_ERR_NONE;
 606              		.loc 1 460 23 view .LVU209
 461:uCOSII/Source/os_flag.c ****     return (len);
 607              		.loc 1 461 5 view .LVU210
 461:uCOSII/Source/os_flag.c ****     return (len);
 608              		.loc 1 461 12 is_stmt 0 view .LVU211
 609 0042 0023     		movs	r3, #0
 610 0044 2B70     		strb	r3, [r5]
 462:uCOSII/Source/os_flag.c **** }
 611              		.loc 1 462 5 is_stmt 1 view .LVU212
 462:uCOSII/Source/os_flag.c **** }
 612              		.loc 1 462 12 is_stmt 0 view .LVU213
 613 0046 E4E7     		b	.L40
 614              	.L44:
 615              		.align	2
 616              	.L43:
 617 0048 00000000 		.word	OSIntNesting
 618              		.cfi_endproc
 619              	.LFE3:
 621              		.section	.text.OSFlagNameSet,"ax",%progbits
 622              		.align	1
 623              		.global	OSFlagNameSet
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu fpv4-sp-d16
 629              	OSFlagNameSet:
 630              	.LVL62:
 631              	.LFB4:
 494:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register       
 632              		.loc 1 494 1 is_stmt 1 view -0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 494:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register       
 636              		.loc 1 494 1 is_stmt 0 view .LVU215
 637 0000 70B5     		push	{r4, r5, r6, lr}
 638              	.LCFI5:
 639              		.cfi_def_cfa_offset 16
 640              		.cfi_offset 4, -16
 641              		.cfi_offset 5, -12
 642              		.cfi_offset 6, -8
 643              		.cfi_offset 14, -4
 644 0002 1446     		mov	r4, r2
 496:uCOSII/Source/os_flag.c **** #endif
 645              		.loc 1 496 5 is_stmt 1 view .LVU216
 646              	.LVL63:
 518:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_SET_ISR;
 647              		.loc 1 518 5 view .LVU217
 518:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_SET_ISR;
 648              		.loc 1 518 22 is_stmt 0 view .LVU218
 649 0004 0B4B     		ldr	r3, .L50
ARM GAS  /tmp/ccgMzuMT.s 			page 34


 650 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_NAME_SET_ISR;
 651              		.loc 1 518 8 view .LVU219
 652 0008 13B1     		cbz	r3, .L46
 519:uCOSII/Source/os_flag.c ****         return;
 653              		.loc 1 519 9 is_stmt 1 view .LVU220
 519:uCOSII/Source/os_flag.c ****         return;
 654              		.loc 1 519 15 is_stmt 0 view .LVU221
 655 000a 1223     		movs	r3, #18
 656 000c 1370     		strb	r3, [r2]
 520:uCOSII/Source/os_flag.c ****     }
 657              		.loc 1 520 9 is_stmt 1 view .LVU222
 658              	.LVL64:
 659              	.L45:
 532:uCOSII/Source/os_flag.c **** #endif
 660              		.loc 1 532 1 is_stmt 0 view .LVU223
 661 000e 70BD     		pop	{r4, r5, r6, pc}
 662              	.LVL65:
 663              	.L46:
 532:uCOSII/Source/os_flag.c **** #endif
 664              		.loc 1 532 1 view .LVU224
 665 0010 0646     		mov	r6, r0
 666 0012 0D46     		mov	r5, r1
 522:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 667              		.loc 1 522 5 is_stmt 1 view .LVU225
 668 0014 FFF7FEFF 		bl	OS_CPU_SR_Save
 669              	.LVL66:
 522:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 670              		.loc 1 522 24 view .LVU226
 523:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 671              		.loc 1 523 5 view .LVU227
 523:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 672              		.loc 1 523 13 is_stmt 0 view .LVU228
 673 0018 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 523:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 674              		.loc 1 523 8 view .LVU229
 675 001a 052B     		cmp	r3, #5
 676 001c 04D0     		beq	.L48
 524:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 677              		.loc 1 524 9 is_stmt 1 view .LVU230
 678 001e FFF7FEFF 		bl	OS_CPU_SR_Restore
 679              	.LVL67:
 524:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 680              		.loc 1 524 27 view .LVU231
 525:uCOSII/Source/os_flag.c ****         return;
 681              		.loc 1 525 9 view .LVU232
 525:uCOSII/Source/os_flag.c ****         return;
 682              		.loc 1 525 15 is_stmt 0 view .LVU233
 683 0022 0123     		movs	r3, #1
 684 0024 2370     		strb	r3, [r4]
 526:uCOSII/Source/os_flag.c ****     }
 685              		.loc 1 526 9 is_stmt 1 view .LVU234
 686 0026 F2E7     		b	.L45
 687              	.LVL68:
 688              	.L48:
 528:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 689              		.loc 1 528 5 view .LVU235
ARM GAS  /tmp/ccgMzuMT.s 			page 35


 528:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 690              		.loc 1 528 22 is_stmt 0 view .LVU236
 691 0028 F560     		str	r5, [r6, #12]
 529:uCOSII/Source/os_flag.c ****     *perr            = OS_ERR_NONE;
 692              		.loc 1 529 5 is_stmt 1 view .LVU237
 693 002a FFF7FEFF 		bl	OS_CPU_SR_Restore
 694              	.LVL69:
 529:uCOSII/Source/os_flag.c ****     *perr            = OS_ERR_NONE;
 695              		.loc 1 529 23 view .LVU238
 530:uCOSII/Source/os_flag.c ****     return;
 696              		.loc 1 530 5 view .LVU239
 530:uCOSII/Source/os_flag.c ****     return;
 697              		.loc 1 530 22 is_stmt 0 view .LVU240
 698 002e 0023     		movs	r3, #0
 699 0030 2370     		strb	r3, [r4]
 531:uCOSII/Source/os_flag.c **** }
 700              		.loc 1 531 5 is_stmt 1 view .LVU241
 701 0032 ECE7     		b	.L45
 702              	.L51:
 703              		.align	2
 704              	.L50:
 705 0034 00000000 		.word	OSIntNesting
 706              		.cfi_endproc
 707              	.LFE4:
 709              		.section	.text.OSFlagPendGetFlagsRdy,"ax",%progbits
 710              		.align	1
 711              		.global	OSFlagPendGetFlagsRdy
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu fpv4-sp-d16
 717              	OSFlagPendGetFlagsRdy:
 718              	.LFB6:
 777:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags;
 719              		.loc 1 777 1 view -0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723 0000 10B5     		push	{r4, lr}
 724              	.LCFI6:
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 4, -8
 727              		.cfi_offset 14, -4
 778:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 728              		.loc 1 778 5 view .LVU243
 780:uCOSII/Source/os_flag.c **** #endif
 729              		.loc 1 780 5 view .LVU244
 730              	.LVL70:
 785:uCOSII/Source/os_flag.c ****     flags = OSTCBCur->OSTCBFlagsRdy;
 731              		.loc 1 785 5 view .LVU245
 732 0002 FFF7FEFF 		bl	OS_CPU_SR_Save
 733              	.LVL71:
 785:uCOSII/Source/os_flag.c ****     flags = OSTCBCur->OSTCBFlagsRdy;
 734              		.loc 1 785 24 view .LVU246
 786:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 735              		.loc 1 786 5 view .LVU247
 786:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
ARM GAS  /tmp/ccgMzuMT.s 			page 36


 736              		.loc 1 786 21 is_stmt 0 view .LVU248
 737 0006 034B     		ldr	r3, .L54
 738 0008 1B68     		ldr	r3, [r3]
 786:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 739              		.loc 1 786 11 view .LVU249
 740 000a 9C8D     		ldrh	r4, [r3, #44]
 741              	.LVL72:
 787:uCOSII/Source/os_flag.c ****     return (flags);
 742              		.loc 1 787 5 is_stmt 1 view .LVU250
 743 000c FFF7FEFF 		bl	OS_CPU_SR_Restore
 744              	.LVL73:
 787:uCOSII/Source/os_flag.c ****     return (flags);
 745              		.loc 1 787 23 view .LVU251
 788:uCOSII/Source/os_flag.c **** }
 746              		.loc 1 788 5 view .LVU252
 789:uCOSII/Source/os_flag.c **** 
 747              		.loc 1 789 1 is_stmt 0 view .LVU253
 748 0010 2046     		mov	r0, r4
 749 0012 10BD     		pop	{r4, pc}
 750              	.LVL74:
 751              	.L55:
 789:uCOSII/Source/os_flag.c **** 
 752              		.loc 1 789 1 view .LVU254
 753              		.align	2
 754              	.L54:
 755 0014 00000000 		.word	OSTCBCur
 756              		.cfi_endproc
 757              	.LFE6:
 759              		.section	.text.OSFlagQuery,"ax",%progbits
 760              		.align	1
 761              		.global	OSFlagQuery
 762              		.syntax unified
 763              		.thumb
 764              		.thumb_func
 765              		.fpu fpv4-sp-d16
 767              	OSFlagQuery:
 768              	.LVL75:
 769              	.LFB8:
 967:uCOSII/Source/os_flag.c ****     OS_FLAGS   flags;
 770              		.loc 1 967 1 is_stmt 1 view -0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 967:uCOSII/Source/os_flag.c ****     OS_FLAGS   flags;
 774              		.loc 1 967 1 is_stmt 0 view .LVU256
 775 0000 38B5     		push	{r3, r4, r5, lr}
 776              	.LCFI7:
 777              		.cfi_def_cfa_offset 16
 778              		.cfi_offset 3, -16
 779              		.cfi_offset 4, -12
 780              		.cfi_offset 5, -8
 781              		.cfi_offset 14, -4
 782 0002 0D46     		mov	r5, r1
 968:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                      /* Allocate storage for CPU status register      
 783              		.loc 1 968 5 is_stmt 1 view .LVU257
 970:uCOSII/Source/os_flag.c **** #endif
 784              		.loc 1 970 5 view .LVU258
ARM GAS  /tmp/ccgMzuMT.s 			page 37


 785              	.LVL76:
 988:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 786              		.loc 1 988 5 view .LVU259
 988:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 787              		.loc 1 988 13 is_stmt 0 view .LVU260
 788 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 988:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 789              		.loc 1 988 8 view .LVU261
 790 0006 052B     		cmp	r3, #5
 791 0008 04D0     		beq	.L57
 989:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 792              		.loc 1 989 9 is_stmt 1 view .LVU262
 989:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 793              		.loc 1 989 15 is_stmt 0 view .LVU263
 794 000a 0123     		movs	r3, #1
 795 000c 0B70     		strb	r3, [r1]
 990:uCOSII/Source/os_flag.c ****     }
 796              		.loc 1 990 9 is_stmt 1 view .LVU264
 990:uCOSII/Source/os_flag.c ****     }
 797              		.loc 1 990 16 is_stmt 0 view .LVU265
 798 000e 0024     		movs	r4, #0
 799              	.LVL77:
 800              	.L58:
 997:uCOSII/Source/os_flag.c **** #endif
 801              		.loc 1 997 1 view .LVU266
 802 0010 2046     		mov	r0, r4
 803 0012 38BD     		pop	{r3, r4, r5, pc}
 804              	.LVL78:
 805              	.L57:
 997:uCOSII/Source/os_flag.c **** #endif
 806              		.loc 1 997 1 view .LVU267
 807 0014 0446     		mov	r4, r0
 992:uCOSII/Source/os_flag.c ****     flags = pgrp->OSFlagFlags;
 808              		.loc 1 992 5 is_stmt 1 view .LVU268
 809 0016 FFF7FEFF 		bl	OS_CPU_SR_Save
 810              	.LVL79:
 992:uCOSII/Source/os_flag.c ****     flags = pgrp->OSFlagFlags;
 811              		.loc 1 992 24 view .LVU269
 993:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 812              		.loc 1 993 5 view .LVU270
 993:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 813              		.loc 1 993 11 is_stmt 0 view .LVU271
 814 001a 2489     		ldrh	r4, [r4, #8]
 815              	.LVL80:
 994:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;
 816              		.loc 1 994 5 is_stmt 1 view .LVU272
 817 001c FFF7FEFF 		bl	OS_CPU_SR_Restore
 818              	.LVL81:
 994:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;
 819              		.loc 1 994 23 view .LVU273
 995:uCOSII/Source/os_flag.c ****     return (flags);                               /* Return the current value of the event flags   
 820              		.loc 1 995 5 view .LVU274
 995:uCOSII/Source/os_flag.c ****     return (flags);                               /* Return the current value of the event flags   
 821              		.loc 1 995 11 is_stmt 0 view .LVU275
 822 0020 0023     		movs	r3, #0
 823 0022 2B70     		strb	r3, [r5]
 996:uCOSII/Source/os_flag.c **** }
ARM GAS  /tmp/ccgMzuMT.s 			page 38


 824              		.loc 1 996 5 is_stmt 1 view .LVU276
 996:uCOSII/Source/os_flag.c **** }
 825              		.loc 1 996 12 is_stmt 0 view .LVU277
 826 0024 F4E7     		b	.L58
 827              		.cfi_endproc
 828              	.LFE8:
 830              		.section	.text.OS_FlagInit,"ax",%progbits
 831              		.align	1
 832              		.global	OS_FlagInit
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu fpv4-sp-d16
 838              	OS_FlagInit:
 839              	.LFB10:
1072:uCOSII/Source/os_flag.c **** 
1073:uCOSII/Source/os_flag.c **** /*$PAGE*/
1074:uCOSII/Source/os_flag.c **** /*
1075:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1076:uCOSII/Source/os_flag.c **** *                                  INITIALIZE THE EVENT FLAG MODULE
1077:uCOSII/Source/os_flag.c **** *
1078:uCOSII/Source/os_flag.c **** * Description: This function is called by uC/OS-II to initialize the event flag module.  Your appli
1079:uCOSII/Source/os_flag.c **** *              MUST NOT call this function.  In other words, this function is internal to uC/OS-II.
1080:uCOSII/Source/os_flag.c **** *
1081:uCOSII/Source/os_flag.c **** * Arguments  : none
1082:uCOSII/Source/os_flag.c **** *
1083:uCOSII/Source/os_flag.c **** * Returns    : none
1084:uCOSII/Source/os_flag.c **** *
1085:uCOSII/Source/os_flag.c **** * WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/
1086:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1087:uCOSII/Source/os_flag.c **** */
1088:uCOSII/Source/os_flag.c **** 
1089:uCOSII/Source/os_flag.c **** void  OS_FlagInit (void)
1090:uCOSII/Source/os_flag.c **** {
 840              		.loc 1 1090 1 is_stmt 1 view -0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844 0000 38B5     		push	{r3, r4, r5, lr}
 845              	.LCFI8:
 846              		.cfi_def_cfa_offset 16
 847              		.cfi_offset 3, -16
 848              		.cfi_offset 4, -12
 849              		.cfi_offset 5, -8
 850              		.cfi_offset 14, -4
1091:uCOSII/Source/os_flag.c **** #if OS_MAX_FLAGS == 1u
1092:uCOSII/Source/os_flag.c ****     OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!  
1093:uCOSII/Source/os_flag.c ****     OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
1094:uCOSII/Source/os_flag.c ****     OSFlagFreeList->OSFlagWaitList = (void *)0;
1095:uCOSII/Source/os_flag.c ****     OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
1096:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
1097:uCOSII/Source/os_flag.c ****     OSFlagFreeList->OSFlagName     = (INT8U *)"?";
1098:uCOSII/Source/os_flag.c **** #endif
1099:uCOSII/Source/os_flag.c **** #endif
1100:uCOSII/Source/os_flag.c **** 
1101:uCOSII/Source/os_flag.c **** #if OS_MAX_FLAGS >= 2u
1102:uCOSII/Source/os_flag.c ****     INT16U        ix;
ARM GAS  /tmp/ccgMzuMT.s 			page 39


 851              		.loc 1 1102 5 view .LVU279
1103:uCOSII/Source/os_flag.c ****     INT16U        ix_next;
 852              		.loc 1 1103 5 view .LVU280
1104:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP  *pgrp1;
 853              		.loc 1 1104 5 view .LVU281
1105:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP  *pgrp2;
 854              		.loc 1 1105 5 view .LVU282
1106:uCOSII/Source/os_flag.c **** 
1107:uCOSII/Source/os_flag.c **** 
1108:uCOSII/Source/os_flag.c ****     OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table  
 855              		.loc 1 1108 5 view .LVU283
 856 0002 5021     		movs	r1, #80
 857 0004 1048     		ldr	r0, .L64
 858 0006 FFF7FEFF 		bl	OS_MemClr
 859              	.LVL82:
1109:uCOSII/Source/os_flag.c ****     for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLA
 860              		.loc 1 1109 5 view .LVU284
 861              		.loc 1 1109 13 is_stmt 0 view .LVU285
 862 000a 0023     		movs	r3, #0
 863              		.loc 1 1109 5 view .LVU286
 864 000c 0DE0     		b	.L61
 865              	.LVL83:
 866              	.L62:
1110:uCOSII/Source/os_flag.c ****         ix_next = ix + 1u;
 867              		.loc 1 1110 9 is_stmt 1 discriminator 3 view .LVU287
 868              		.loc 1 1110 17 is_stmt 0 discriminator 3 view .LVU288
 869 000e 5A1C     		adds	r2, r3, #1
 870 0010 92B2     		uxth	r2, r2
 871              	.LVL84:
1111:uCOSII/Source/os_flag.c ****         pgrp1 = &OSFlagTbl[ix];
 872              		.loc 1 1111 9 is_stmt 1 discriminator 3 view .LVU289
1112:uCOSII/Source/os_flag.c ****         pgrp2 = &OSFlagTbl[ix_next];
 873              		.loc 1 1112 9 discriminator 3 view .LVU290
 874              		.loc 1 1112 15 is_stmt 0 discriminator 3 view .LVU291
 875 0012 0D49     		ldr	r1, .L64
 876 0014 01EB0210 		add	r0, r1, r2, lsl #4
 877              	.LVL85:
1113:uCOSII/Source/os_flag.c ****         pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 878              		.loc 1 1113 9 is_stmt 1 discriminator 3 view .LVU292
 879              		.loc 1 1113 31 is_stmt 0 discriminator 3 view .LVU293
 880 0018 1C01     		lsls	r4, r3, #4
 881 001a 01EB0313 		add	r3, r1, r3, lsl #4
 882              	.LVL86:
 883              		.loc 1 1113 31 discriminator 3 view .LVU294
 884 001e 0025     		movs	r5, #0
 885 0020 0D55     		strb	r5, [r1, r4]
1114:uCOSII/Source/os_flag.c ****         pgrp1->OSFlagWaitList = (void *)pgrp2;
 886              		.loc 1 1114 9 is_stmt 1 discriminator 3 view .LVU295
 887              		.loc 1 1114 31 is_stmt 0 discriminator 3 view .LVU296
 888 0022 5860     		str	r0, [r3, #4]
1115:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
1116:uCOSII/Source/os_flag.c ****         pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                
 889              		.loc 1 1116 9 is_stmt 1 discriminator 3 view .LVU297
 890              		.loc 1 1116 31 is_stmt 0 discriminator 3 view .LVU298
 891 0024 0949     		ldr	r1, .L64+4
 892 0026 D960     		str	r1, [r3, #12]
1109:uCOSII/Source/os_flag.c ****         ix_next = ix + 1u;
ARM GAS  /tmp/ccgMzuMT.s 			page 40


 893              		.loc 1 1109 45 is_stmt 1 discriminator 3 view .LVU299
 894              	.LVL87:
1109:uCOSII/Source/os_flag.c ****         ix_next = ix + 1u;
 895              		.loc 1 1109 47 is_stmt 0 discriminator 3 view .LVU300
 896 0028 1346     		mov	r3, r2
 897              	.LVL88:
 898              	.L61:
1109:uCOSII/Source/os_flag.c ****         ix_next = ix + 1u;
 899              		.loc 1 1109 19 is_stmt 1 discriminator 1 view .LVU301
1109:uCOSII/Source/os_flag.c ****         ix_next = ix + 1u;
 900              		.loc 1 1109 5 is_stmt 0 discriminator 1 view .LVU302
 901 002a 032B     		cmp	r3, #3
 902 002c EFD9     		bls	.L62
1117:uCOSII/Source/os_flag.c **** #endif
1118:uCOSII/Source/os_flag.c ****     }
1119:uCOSII/Source/os_flag.c ****     pgrp1                 = &OSFlagTbl[ix];
 903              		.loc 1 1119 5 is_stmt 1 view .LVU303
 904              	.LVL89:
1120:uCOSII/Source/os_flag.c ****     pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 905              		.loc 1 1120 5 view .LVU304
 906              		.loc 1 1120 27 is_stmt 0 view .LVU305
 907 002e 064A     		ldr	r2, .L64
 908 0030 1801     		lsls	r0, r3, #4
 909 0032 02EB0313 		add	r3, r2, r3, lsl #4
 910              	.LVL90:
 911              		.loc 1 1120 27 view .LVU306
 912 0036 0021     		movs	r1, #0
 913 0038 1154     		strb	r1, [r2, r0]
1121:uCOSII/Source/os_flag.c ****     pgrp1->OSFlagWaitList = (void *)0;
 914              		.loc 1 1121 5 is_stmt 1 view .LVU307
 915              		.loc 1 1121 27 is_stmt 0 view .LVU308
 916 003a 5960     		str	r1, [r3, #4]
1122:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
1123:uCOSII/Source/os_flag.c ****     pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                
 917              		.loc 1 1123 5 is_stmt 1 view .LVU309
 918              		.loc 1 1123 27 is_stmt 0 view .LVU310
 919 003c 0349     		ldr	r1, .L64+4
 920 003e D960     		str	r1, [r3, #12]
1124:uCOSII/Source/os_flag.c **** #endif
1125:uCOSII/Source/os_flag.c ****     OSFlagFreeList        = &OSFlagTbl[0];
 921              		.loc 1 1125 5 is_stmt 1 view .LVU311
 922              		.loc 1 1125 27 is_stmt 0 view .LVU312
 923 0040 034B     		ldr	r3, .L64+8
 924              	.LVL91:
 925              		.loc 1 1125 27 view .LVU313
 926 0042 1A60     		str	r2, [r3]
1126:uCOSII/Source/os_flag.c **** #endif
1127:uCOSII/Source/os_flag.c **** }
 927              		.loc 1 1127 1 view .LVU314
 928 0044 38BD     		pop	{r3, r4, r5, pc}
 929              	.L65:
 930 0046 00BF     		.align	2
 931              	.L64:
 932 0048 00000000 		.word	OSFlagTbl
 933 004c 00000000 		.word	.LC0
 934 0050 00000000 		.word	OSFlagFreeList
 935              		.cfi_endproc
ARM GAS  /tmp/ccgMzuMT.s 			page 41


 936              	.LFE10:
 938              		.section	.text.OS_FlagUnlink,"ax",%progbits
 939              		.align	1
 940              		.global	OS_FlagUnlink
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 944              		.fpu fpv4-sp-d16
 946              	OS_FlagUnlink:
 947              	.LVL92:
 948              	.LFB12:
1128:uCOSII/Source/os_flag.c **** 
1129:uCOSII/Source/os_flag.c **** /*$PAGE*/
1130:uCOSII/Source/os_flag.c **** /*
1131:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1132:uCOSII/Source/os_flag.c **** *                              MAKE TASK READY-TO-RUN, EVENT(s) OCCURRED
1133:uCOSII/Source/os_flag.c **** *
1134:uCOSII/Source/os_flag.c **** * Description: This function is internal to uC/OS-II and is used to make a task ready-to-run becaus
1135:uCOSII/Source/os_flag.c **** *              desired event flag bits have been set.
1136:uCOSII/Source/os_flag.c **** *
1137:uCOSII/Source/os_flag.c **** * Arguments  : pnode         is a pointer to a structure which contains data about the task waiting
1138:uCOSII/Source/os_flag.c **** *                            event flag bit(s) to be set.
1139:uCOSII/Source/os_flag.c **** *
1140:uCOSII/Source/os_flag.c **** *              flags_rdy     contains the bit pattern of the event flags that cause the task to bec
1141:uCOSII/Source/os_flag.c **** *                            ready-to-run.
1142:uCOSII/Source/os_flag.c **** *
1143:uCOSII/Source/os_flag.c **** *              pend_stat   is used to indicate the readied task's pending status:
1144:uCOSII/Source/os_flag.c **** *
1145:uCOSII/Source/os_flag.c **** *
1146:uCOSII/Source/os_flag.c **** * Returns    : OS_TRUE       If the task has been placed in the ready list and thus needs schedulin
1147:uCOSII/Source/os_flag.c **** *              OS_FALSE      The task is still not ready to run and thus scheduling is not necessar
1148:uCOSII/Source/os_flag.c **** *
1149:uCOSII/Source/os_flag.c **** * Called by  : OSFlagsPost() OS_FLAG.C
1150:uCOSII/Source/os_flag.c **** *
1151:uCOSII/Source/os_flag.c **** * Note(s)    : 1) This function assumes that interrupts are disabled.
1152:uCOSII/Source/os_flag.c **** *              2) This function is INTERNAL to uC/OS-II and your application should not call it.
1153:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1154:uCOSII/Source/os_flag.c **** */
1155:uCOSII/Source/os_flag.c **** 
1156:uCOSII/Source/os_flag.c **** static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
1157:uCOSII/Source/os_flag.c ****                                  OS_FLAGS      flags_rdy,
1158:uCOSII/Source/os_flag.c ****                                  INT8U         pend_stat)
1159:uCOSII/Source/os_flag.c **** {
1160:uCOSII/Source/os_flag.c ****     OS_TCB   *ptcb;
1161:uCOSII/Source/os_flag.c ****     BOOLEAN   sched;
1162:uCOSII/Source/os_flag.c **** 
1163:uCOSII/Source/os_flag.c **** 
1164:uCOSII/Source/os_flag.c ****     ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task         
1165:uCOSII/Source/os_flag.c ****     ptcb->OSTCBDly       = 0u;
1166:uCOSII/Source/os_flag.c ****     ptcb->OSTCBFlagsRdy  = flags_rdy;
1167:uCOSII/Source/os_flag.c ****     ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
1168:uCOSII/Source/os_flag.c ****     ptcb->OSTCBStatPend  = pend_stat;
1169:uCOSII/Source/os_flag.c ****     if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                      
1170:uCOSII/Source/os_flag.c ****         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list             
1171:uCOSII/Source/os_flag.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
1172:uCOSII/Source/os_flag.c ****         sched                   = OS_TRUE;
1173:uCOSII/Source/os_flag.c ****     } else {
ARM GAS  /tmp/ccgMzuMT.s 			page 42


1174:uCOSII/Source/os_flag.c ****         sched                   = OS_FALSE;
1175:uCOSII/Source/os_flag.c ****     }
1176:uCOSII/Source/os_flag.c ****     OS_FlagUnlink(pnode);
1177:uCOSII/Source/os_flag.c ****     return (sched);
1178:uCOSII/Source/os_flag.c **** }
1179:uCOSII/Source/os_flag.c **** 
1180:uCOSII/Source/os_flag.c **** /*$PAGE*/
1181:uCOSII/Source/os_flag.c **** /*
1182:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1183:uCOSII/Source/os_flag.c **** *                              UNLINK EVENT FLAG NODE FROM WAITING LIST
1184:uCOSII/Source/os_flag.c **** *
1185:uCOSII/Source/os_flag.c **** * Description: This function is internal to uC/OS-II and is used to unlink an event flag node from 
1186:uCOSII/Source/os_flag.c **** *              list of tasks waiting for the event flag.
1187:uCOSII/Source/os_flag.c **** *
1188:uCOSII/Source/os_flag.c **** * Arguments  : pnode         is a pointer to a structure which contains data about the task waiting
1189:uCOSII/Source/os_flag.c **** *                            event flag bit(s) to be set.
1190:uCOSII/Source/os_flag.c **** *
1191:uCOSII/Source/os_flag.c **** * Returns    : none
1192:uCOSII/Source/os_flag.c **** *
1193:uCOSII/Source/os_flag.c **** * Called by  : OS_FlagTaskRdy() OS_FLAG.C
1194:uCOSII/Source/os_flag.c **** *              OSFlagPend()     OS_FLAG.C
1195:uCOSII/Source/os_flag.c **** *              OSTaskDel()      OS_TASK.C
1196:uCOSII/Source/os_flag.c **** *
1197:uCOSII/Source/os_flag.c **** * Note(s)    : 1) This function assumes that interrupts are disabled.
1198:uCOSII/Source/os_flag.c **** *              2) This function is INTERNAL to uC/OS-II and your application should not call it.
1199:uCOSII/Source/os_flag.c **** ***************************************************************************************************
1200:uCOSII/Source/os_flag.c **** */
1201:uCOSII/Source/os_flag.c **** 
1202:uCOSII/Source/os_flag.c **** void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
1203:uCOSII/Source/os_flag.c **** {
 949              		.loc 1 1203 1 is_stmt 1 view -0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 0
 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953              		@ link register save eliminated.
1204:uCOSII/Source/os_flag.c **** #if OS_TASK_DEL_EN > 0u
1205:uCOSII/Source/os_flag.c ****     OS_TCB       *ptcb;
 954              		.loc 1 1205 5 view .LVU316
1206:uCOSII/Source/os_flag.c **** #endif
1207:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP  *pgrp;
 955              		.loc 1 1207 5 view .LVU317
1208:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE *pnode_prev;
 956              		.loc 1 1208 5 view .LVU318
1209:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE *pnode_next;
 957              		.loc 1 1209 5 view .LVU319
1210:uCOSII/Source/os_flag.c **** 
1211:uCOSII/Source/os_flag.c **** 
1212:uCOSII/Source/os_flag.c ****     pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 958              		.loc 1 1212 5 view .LVU320
 959              		.loc 1 1212 16 is_stmt 0 view .LVU321
 960 0000 4268     		ldr	r2, [r0, #4]
 961              	.LVL93:
1213:uCOSII/Source/os_flag.c ****     pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 962              		.loc 1 1213 5 is_stmt 1 view .LVU322
 963              		.loc 1 1213 16 is_stmt 0 view .LVU323
 964 0002 0368     		ldr	r3, [r0]
 965              	.LVL94:
ARM GAS  /tmp/ccgMzuMT.s 			page 43


1214:uCOSII/Source/os_flag.c ****     if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?  
 966              		.loc 1 1214 5 is_stmt 1 view .LVU324
 967              		.loc 1 1214 8 is_stmt 0 view .LVU325
 968 0004 32B1     		cbz	r2, .L69
1215:uCOSII/Source/os_flag.c ****         pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
1216:uCOSII/Source/os_flag.c ****         pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st nod
1217:uCOSII/Source/os_flag.c ****         if (pnode_next != (OS_FLAG_NODE *)0) {
1218:uCOSII/Source/os_flag.c ****             pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to N
1219:uCOSII/Source/os_flag.c ****         }
1220:uCOSII/Source/os_flag.c ****     } else {                                                    /* No,  A node somewhere in the lis
1221:uCOSII/Source/os_flag.c ****         pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unl
 969              		.loc 1 1221 9 is_stmt 1 view .LVU326
 970              		.loc 1 1221 36 is_stmt 0 view .LVU327
 971 0006 1360     		str	r3, [r2]
1222:uCOSII/Source/os_flag.c ****         if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?    
 972              		.loc 1 1222 9 is_stmt 1 view .LVU328
 973              		.loc 1 1222 12 is_stmt 0 view .LVU329
 974 0008 03B1     		cbz	r3, .L68
1223:uCOSII/Source/os_flag.c ****             pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current nod
 975              		.loc 1 1223 13 is_stmt 1 view .LVU330
 976              		.loc 1 1223 40 is_stmt 0 view .LVU331
 977 000a 5A60     		str	r2, [r3, #4]
 978              	.LVL95:
 979              	.L68:
1224:uCOSII/Source/os_flag.c ****         }
1225:uCOSII/Source/os_flag.c ****     }
1226:uCOSII/Source/os_flag.c **** #if OS_TASK_DEL_EN > 0u
1227:uCOSII/Source/os_flag.c ****     ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 980              		.loc 1 1227 5 is_stmt 1 view .LVU332
 981              		.loc 1 1227 25 is_stmt 0 view .LVU333
 982 000c 8368     		ldr	r3, [r0, #8]
 983              	.LVL96:
1228:uCOSII/Source/os_flag.c ****     ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 984              		.loc 1 1228 5 is_stmt 1 view .LVU334
 985              		.loc 1 1228 25 is_stmt 0 view .LVU335
 986 000e 0022     		movs	r2, #0
 987 0010 9A62     		str	r2, [r3, #40]
1229:uCOSII/Source/os_flag.c **** #endif
1230:uCOSII/Source/os_flag.c **** }
 988              		.loc 1 1230 1 view .LVU336
 989 0012 7047     		bx	lr
 990              	.LVL97:
 991              	.L69:
1215:uCOSII/Source/os_flag.c ****         pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st nod
 992              		.loc 1 1215 9 is_stmt 1 view .LVU337
1215:uCOSII/Source/os_flag.c ****         pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st nod
 993              		.loc 1 1215 30 is_stmt 0 view .LVU338
 994 0014 C268     		ldr	r2, [r0, #12]
 995              	.LVL98:
1216:uCOSII/Source/os_flag.c ****         if (pnode_next != (OS_FLAG_NODE *)0) {
 996              		.loc 1 1216 9 is_stmt 1 view .LVU339
1216:uCOSII/Source/os_flag.c ****         if (pnode_next != (OS_FLAG_NODE *)0) {
 997              		.loc 1 1216 30 is_stmt 0 view .LVU340
 998 0016 5360     		str	r3, [r2, #4]
 999              	.LVL99:
1217:uCOSII/Source/os_flag.c ****             pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to N
 1000              		.loc 1 1217 9 is_stmt 1 view .LVU341
ARM GAS  /tmp/ccgMzuMT.s 			page 44


1217:uCOSII/Source/os_flag.c ****             pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to N
 1001              		.loc 1 1217 12 is_stmt 0 view .LVU342
 1002 0018 002B     		cmp	r3, #0
 1003 001a F7D0     		beq	.L68
1218:uCOSII/Source/os_flag.c ****         }
 1004              		.loc 1 1218 13 is_stmt 1 view .LVU343
1218:uCOSII/Source/os_flag.c ****         }
 1005              		.loc 1 1218 40 is_stmt 0 view .LVU344
 1006 001c 0022     		movs	r2, #0
 1007              	.LVL100:
1218:uCOSII/Source/os_flag.c ****         }
 1008              		.loc 1 1218 40 view .LVU345
 1009 001e 5A60     		str	r2, [r3, #4]
 1010 0020 F4E7     		b	.L68
 1011              		.cfi_endproc
 1012              	.LFE12:
 1014              		.section	.text.OS_FlagTaskRdy,"ax",%progbits
 1015              		.align	1
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
 1019              		.fpu fpv4-sp-d16
 1021              	OS_FlagTaskRdy:
 1022              	.LVL101:
 1023              	.LFB11:
1159:uCOSII/Source/os_flag.c ****     OS_TCB   *ptcb;
 1024              		.loc 1 1159 1 is_stmt 1 view -0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
1159:uCOSII/Source/os_flag.c ****     OS_TCB   *ptcb;
 1028              		.loc 1 1159 1 is_stmt 0 view .LVU347
 1029 0000 10B5     		push	{r4, lr}
 1030              	.LCFI9:
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 4, -8
 1033              		.cfi_offset 14, -4
1160:uCOSII/Source/os_flag.c ****     BOOLEAN   sched;
 1034              		.loc 1 1160 5 is_stmt 1 view .LVU348
1161:uCOSII/Source/os_flag.c **** 
 1035              		.loc 1 1161 5 view .LVU349
1164:uCOSII/Source/os_flag.c ****     ptcb->OSTCBDly       = 0u;
 1036              		.loc 1 1164 5 view .LVU350
1164:uCOSII/Source/os_flag.c ****     ptcb->OSTCBDly       = 0u;
 1037              		.loc 1 1164 26 is_stmt 0 view .LVU351
 1038 0002 8368     		ldr	r3, [r0, #8]
 1039              	.LVL102:
1165:uCOSII/Source/os_flag.c ****     ptcb->OSTCBFlagsRdy  = flags_rdy;
 1040              		.loc 1 1165 5 is_stmt 1 view .LVU352
1165:uCOSII/Source/os_flag.c ****     ptcb->OSTCBFlagsRdy  = flags_rdy;
 1041              		.loc 1 1165 26 is_stmt 0 view .LVU353
 1042 0004 0024     		movs	r4, #0
 1043 0006 1C63     		str	r4, [r3, #48]
1166:uCOSII/Source/os_flag.c ****     ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
 1044              		.loc 1 1166 5 is_stmt 1 view .LVU354
1166:uCOSII/Source/os_flag.c ****     ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
 1045              		.loc 1 1166 26 is_stmt 0 view .LVU355
ARM GAS  /tmp/ccgMzuMT.s 			page 45


 1046 0008 9985     		strh	r1, [r3, #44]	@ movhi
1167:uCOSII/Source/os_flag.c ****     ptcb->OSTCBStatPend  = pend_stat;
 1047              		.loc 1 1167 5 is_stmt 1 view .LVU356
1167:uCOSII/Source/os_flag.c ****     ptcb->OSTCBStatPend  = pend_stat;
 1048              		.loc 1 1167 25 is_stmt 0 view .LVU357
 1049 000a 93F83410 		ldrb	r1, [r3, #52]	@ zero_extendqisi2
 1050              	.LVL103:
1167:uCOSII/Source/os_flag.c ****     ptcb->OSTCBStatPend  = pend_stat;
 1051              		.loc 1 1167 25 view .LVU358
 1052 000e 01F0DF01 		and	r1, r1, #223
 1053 0012 83F83410 		strb	r1, [r3, #52]
1168:uCOSII/Source/os_flag.c ****     if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                      
 1054              		.loc 1 1168 5 is_stmt 1 view .LVU359
1168:uCOSII/Source/os_flag.c ****     if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                      
 1055              		.loc 1 1168 26 is_stmt 0 view .LVU360
 1056 0016 83F83520 		strb	r2, [r3, #53]
1169:uCOSII/Source/os_flag.c ****         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list             
 1057              		.loc 1 1169 5 is_stmt 1 view .LVU361
1169:uCOSII/Source/os_flag.c ****         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list             
 1058              		.loc 1 1169 8 is_stmt 0 view .LVU362
 1059 001a 91B9     		cbnz	r1, .L72
1170:uCOSII/Source/os_flag.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1060              		.loc 1 1170 9 is_stmt 1 view .LVU363
1170:uCOSII/Source/os_flag.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1061              		.loc 1 1170 39 is_stmt 0 view .LVU364
 1062 001c 93F83A20 		ldrb	r2, [r3, #58]	@ zero_extendqisi2
 1063              	.LVL104:
1170:uCOSII/Source/os_flag.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1064              		.loc 1 1170 32 view .LVU365
 1065 0020 0949     		ldr	r1, .L74
 1066 0022 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 1067 0024 2243     		orrs	r2, r2, r4
 1068 0026 0A70     		strb	r2, [r1]
1171:uCOSII/Source/os_flag.c ****         sched                   = OS_TRUE;
 1069              		.loc 1 1171 9 is_stmt 1 view .LVU366
1171:uCOSII/Source/os_flag.c ****         sched                   = OS_TRUE;
 1070              		.loc 1 1171 22 is_stmt 0 view .LVU367
 1071 0028 93F83820 		ldrb	r2, [r3, #56]	@ zero_extendqisi2
1171:uCOSII/Source/os_flag.c ****         sched                   = OS_TRUE;
 1072              		.loc 1 1171 39 view .LVU368
 1073 002c 93F83930 		ldrb	r3, [r3, #57]	@ zero_extendqisi2
 1074              	.LVL105:
1171:uCOSII/Source/os_flag.c ****         sched                   = OS_TRUE;
 1075              		.loc 1 1171 32 view .LVU369
 1076 0030 0649     		ldr	r1, .L74+4
 1077 0032 8C5C     		ldrb	r4, [r1, r2]	@ zero_extendqisi2
 1078 0034 2343     		orrs	r3, r3, r4
 1079 0036 8B54     		strb	r3, [r1, r2]
1172:uCOSII/Source/os_flag.c ****     } else {
 1080              		.loc 1 1172 9 is_stmt 1 view .LVU370
 1081              	.LVL106:
1172:uCOSII/Source/os_flag.c ****     } else {
 1082              		.loc 1 1172 33 is_stmt 0 view .LVU371
 1083 0038 0124     		movs	r4, #1
 1084              	.LVL107:
 1085              	.L71:
1176:uCOSII/Source/os_flag.c ****     return (sched);
ARM GAS  /tmp/ccgMzuMT.s 			page 46


 1086              		.loc 1 1176 5 is_stmt 1 view .LVU372
 1087 003a FFF7FEFF 		bl	OS_FlagUnlink
 1088              	.LVL108:
1177:uCOSII/Source/os_flag.c **** }
 1089              		.loc 1 1177 5 view .LVU373
1178:uCOSII/Source/os_flag.c **** 
 1090              		.loc 1 1178 1 is_stmt 0 view .LVU374
 1091 003e 2046     		mov	r0, r4
 1092 0040 10BD     		pop	{r4, pc}
 1093              	.LVL109:
 1094              	.L72:
1174:uCOSII/Source/os_flag.c ****     }
 1095              		.loc 1 1174 33 view .LVU375
 1096 0042 0024     		movs	r4, #0
 1097 0044 F9E7     		b	.L71
 1098              	.L75:
 1099 0046 00BF     		.align	2
 1100              	.L74:
 1101 0048 00000000 		.word	OSRdyGrp
 1102 004c 00000000 		.word	OSRdyTbl
 1103              		.cfi_endproc
 1104              	.LFE11:
 1106              		.section	.text.OSFlagDel,"ax",%progbits
 1107              		.align	1
 1108              		.global	OSFlagDel
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu fpv4-sp-d16
 1114              	OSFlagDel:
 1115              	.LVL110:
 1116              	.LFB2:
 308:uCOSII/Source/os_flag.c ****     BOOLEAN       tasks_waiting;
 1117              		.loc 1 308 1 is_stmt 1 view -0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 0
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 308:uCOSII/Source/os_flag.c ****     BOOLEAN       tasks_waiting;
 1121              		.loc 1 308 1 is_stmt 0 view .LVU377
 1122 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1123              	.LCFI10:
 1124              		.cfi_def_cfa_offset 32
 1125              		.cfi_offset 3, -32
 1126              		.cfi_offset 4, -28
 1127              		.cfi_offset 5, -24
 1128              		.cfi_offset 6, -20
 1129              		.cfi_offset 7, -16
 1130              		.cfi_offset 8, -12
 1131              		.cfi_offset 9, -8
 1132              		.cfi_offset 14, -4
 1133 0004 0446     		mov	r4, r0
 1134 0006 1746     		mov	r7, r2
 309:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE *pnode;
 1135              		.loc 1 309 5 is_stmt 1 view .LVU378
 310:uCOSII/Source/os_flag.c ****     OS_FLAG_GRP  *pgrp_return;
 1136              		.loc 1 310 5 view .LVU379
 311:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
ARM GAS  /tmp/ccgMzuMT.s 			page 47


 1137              		.loc 1 311 5 view .LVU380
 313:uCOSII/Source/os_flag.c **** #endif
 1138              		.loc 1 313 5 view .LVU381
 1139              	.LVL111:
 331:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR         
 1140              		.loc 1 331 5 view .LVU382
 331:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR         
 1141              		.loc 1 331 22 is_stmt 0 view .LVU383
 1142 0008 2A4B     		ldr	r3, .L92
 1143 000a 1E78     		ldrb	r6, [r3]	@ zero_extendqisi2
 331:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR         
 1144              		.loc 1 331 8 view .LVU384
 1145 000c 4EB9     		cbnz	r6, .L89
 1146 000e 8846     		mov	r8, r1
 335:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1147              		.loc 1 335 5 is_stmt 1 view .LVU385
 335:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1148              		.loc 1 335 13 is_stmt 0 view .LVU386
 1149 0010 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 335:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1150              		.loc 1 335 8 view .LVU387
 1151 0012 052B     		cmp	r3, #5
 1152 0014 09D0     		beq	.L79
 336:uCOSII/Source/os_flag.c ****         return (pgrp);
 1153              		.loc 1 336 9 is_stmt 1 view .LVU388
 336:uCOSII/Source/os_flag.c ****         return (pgrp);
 1154              		.loc 1 336 15 is_stmt 0 view .LVU389
 1155 0016 0123     		movs	r3, #1
 1156 0018 1370     		strb	r3, [r2]
 337:uCOSII/Source/os_flag.c ****     }
 1157              		.loc 1 337 9 is_stmt 1 view .LVU390
 337:uCOSII/Source/os_flag.c ****     }
 1158              		.loc 1 337 16 is_stmt 0 view .LVU391
 1159 001a 0546     		mov	r5, r0
 1160              	.LVL112:
 1161              	.L76:
 393:uCOSII/Source/os_flag.c **** #endif
 1162              		.loc 1 393 1 view .LVU392
 1163 001c 2846     		mov	r0, r5
 1164 001e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1165              	.LVL113:
 1166              	.L89:
 332:uCOSII/Source/os_flag.c ****         return (pgrp);
 1167              		.loc 1 332 9 is_stmt 1 view .LVU393
 332:uCOSII/Source/os_flag.c ****         return (pgrp);
 1168              		.loc 1 332 15 is_stmt 0 view .LVU394
 1169 0022 0F23     		movs	r3, #15
 1170 0024 1370     		strb	r3, [r2]
 333:uCOSII/Source/os_flag.c ****     }
 1171              		.loc 1 333 9 is_stmt 1 view .LVU395
 333:uCOSII/Source/os_flag.c ****     }
 1172              		.loc 1 333 16 is_stmt 0 view .LVU396
 1173 0026 0546     		mov	r5, r0
 1174 0028 F8E7     		b	.L76
 1175              	.L79:
 339:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event fla
 1176              		.loc 1 339 5 is_stmt 1 view .LVU397
ARM GAS  /tmp/ccgMzuMT.s 			page 48


 1177 002a FFF7FEFF 		bl	OS_CPU_SR_Save
 1178              	.LVL114:
 339:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event fla
 1179              		.loc 1 339 5 is_stmt 0 view .LVU398
 1180 002e 8146     		mov	r9, r0
 1181              	.LVL115:
 339:uCOSII/Source/os_flag.c ****     if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event fla
 1182              		.loc 1 339 24 is_stmt 1 view .LVU399
 340:uCOSII/Source/os_flag.c ****         tasks_waiting = OS_TRUE;                           /* Yes                                  
 1183              		.loc 1 340 5 view .LVU400
 340:uCOSII/Source/os_flag.c ****         tasks_waiting = OS_TRUE;                           /* Yes                                  
 1184              		.loc 1 340 13 is_stmt 0 view .LVU401
 1185 0030 6568     		ldr	r5, [r4, #4]
 340:uCOSII/Source/os_flag.c ****         tasks_waiting = OS_TRUE;                           /* Yes                                  
 1186              		.loc 1 340 8 view .LVU402
 1187 0032 05B1     		cbz	r5, .L80
 341:uCOSII/Source/os_flag.c ****     } else {
 1188              		.loc 1 341 23 view .LVU403
 1189 0034 0126     		movs	r6, #1
 1190              	.L80:
 1191              	.LVL116:
 345:uCOSII/Source/os_flag.c ****         case OS_DEL_NO_PEND:                               /* Delete group if no task waiting      
 1192              		.loc 1 345 5 is_stmt 1 view .LVU404
 1193 0036 B8F1000F 		cmp	r8, #0
 1194 003a 09D0     		beq	.L81
 1195 003c B8F1010F 		cmp	r8, #1
 1196 0040 22D0     		beq	.L82
 387:uCOSII/Source/os_flag.c ****              *perr                = OS_ERR_INVALID_OPT;
 1197              		.loc 1 387 14 view .LVU405
 1198 0042 4846     		mov	r0, r9
 1199              	.LVL117:
 387:uCOSII/Source/os_flag.c ****              *perr                = OS_ERR_INVALID_OPT;
 1200              		.loc 1 387 14 is_stmt 0 view .LVU406
 1201 0044 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1202              	.LVL118:
 387:uCOSII/Source/os_flag.c ****              *perr                = OS_ERR_INVALID_OPT;
 1203              		.loc 1 387 32 is_stmt 1 view .LVU407
 388:uCOSII/Source/os_flag.c ****              pgrp_return          = pgrp;
 1204              		.loc 1 388 14 view .LVU408
 388:uCOSII/Source/os_flag.c ****              pgrp_return          = pgrp;
 1205              		.loc 1 388 35 is_stmt 0 view .LVU409
 1206 0048 0723     		movs	r3, #7
 1207 004a 3B70     		strb	r3, [r7]
 389:uCOSII/Source/os_flag.c ****              break;
 1208              		.loc 1 389 14 is_stmt 1 view .LVU410
 1209              	.LVL119:
 390:uCOSII/Source/os_flag.c ****     }
 1210              		.loc 1 390 14 view .LVU411
 389:uCOSII/Source/os_flag.c ****              break;
 1211              		.loc 1 389 35 is_stmt 0 view .LVU412
 1212 004c 2546     		mov	r5, r4
 1213              	.LVL120:
 390:uCOSII/Source/os_flag.c ****     }
 1214              		.loc 1 390 14 view .LVU413
 1215 004e E5E7     		b	.L76
 1216              	.LVL121:
 1217              	.L81:
ARM GAS  /tmp/ccgMzuMT.s 			page 49


 347:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 1218              		.loc 1 347 14 is_stmt 1 view .LVU414
 347:uCOSII/Source/os_flag.c **** #if OS_FLAG_NAME_EN > 0u
 1219              		.loc 1 347 17 is_stmt 0 view .LVU415
 1220 0050 36B1     		cbz	r6, .L90
 359:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_TASK_WAITING;
 1221              		.loc 1 359 18 is_stmt 1 view .LVU416
 1222 0052 4846     		mov	r0, r9
 1223              	.LVL122:
 359:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_TASK_WAITING;
 1224              		.loc 1 359 18 is_stmt 0 view .LVU417
 1225 0054 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1226              	.LVL123:
 359:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_TASK_WAITING;
 1227              		.loc 1 359 36 is_stmt 1 view .LVU418
 360:uCOSII/Source/os_flag.c ****                  pgrp_return          = pgrp;
 1228              		.loc 1 360 18 view .LVU419
 360:uCOSII/Source/os_flag.c ****                  pgrp_return          = pgrp;
 1229              		.loc 1 360 39 is_stmt 0 view .LVU420
 1230 0058 4923     		movs	r3, #73
 1231 005a 3B70     		strb	r3, [r7]
 361:uCOSII/Source/os_flag.c ****              }
 1232              		.loc 1 361 18 is_stmt 1 view .LVU421
 1233              	.LVL124:
 361:uCOSII/Source/os_flag.c ****              }
 1234              		.loc 1 361 39 is_stmt 0 view .LVU422
 1235 005c 2546     		mov	r5, r4
 1236 005e DDE7     		b	.L76
 1237              	.LVL125:
 1238              	.L90:
 349:uCOSII/Source/os_flag.c **** #endif
 1239              		.loc 1 349 18 is_stmt 1 view .LVU423
 349:uCOSII/Source/os_flag.c **** #endif
 1240              		.loc 1 349 39 is_stmt 0 view .LVU424
 1241 0060 154B     		ldr	r3, .L92+4
 1242 0062 E360     		str	r3, [r4, #12]
 351:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list       
 1243              		.loc 1 351 18 is_stmt 1 view .LVU425
 351:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list       
 1244              		.loc 1 351 39 is_stmt 0 view .LVU426
 1245 0064 0025     		movs	r5, #0
 1246 0066 2570     		strb	r5, [r4]
 352:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagFlags    = (OS_FLAGS)0;
 1247              		.loc 1 352 18 is_stmt 1 view .LVU427
 352:uCOSII/Source/os_flag.c ****                  pgrp->OSFlagFlags    = (OS_FLAGS)0;
 1248              		.loc 1 352 39 is_stmt 0 view .LVU428
 1249 0068 144B     		ldr	r3, .L92+8
 1250 006a 1A68     		ldr	r2, [r3]
 1251 006c 6260     		str	r2, [r4, #4]
 353:uCOSII/Source/os_flag.c ****                  OSFlagFreeList       = pgrp;
 1252              		.loc 1 353 18 is_stmt 1 view .LVU429
 353:uCOSII/Source/os_flag.c ****                  OSFlagFreeList       = pgrp;
 1253              		.loc 1 353 39 is_stmt 0 view .LVU430
 1254 006e 2581     		strh	r5, [r4, #8]	@ movhi
 354:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 1255              		.loc 1 354 18 is_stmt 1 view .LVU431
 354:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
ARM GAS  /tmp/ccgMzuMT.s 			page 50


 1256              		.loc 1 354 39 is_stmt 0 view .LVU432
 1257 0070 1C60     		str	r4, [r3]
 355:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_NONE;
 1258              		.loc 1 355 18 is_stmt 1 view .LVU433
 1259 0072 4846     		mov	r0, r9
 1260              	.LVL126:
 355:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_NONE;
 1261              		.loc 1 355 18 is_stmt 0 view .LVU434
 1262 0074 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1263              	.LVL127:
 355:uCOSII/Source/os_flag.c ****                  *perr                = OS_ERR_NONE;
 1264              		.loc 1 355 36 is_stmt 1 view .LVU435
 356:uCOSII/Source/os_flag.c ****                  pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted    
 1265              		.loc 1 356 18 view .LVU436
 356:uCOSII/Source/os_flag.c ****                  pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted    
 1266              		.loc 1 356 39 is_stmt 0 view .LVU437
 1267 0078 3D70     		strb	r5, [r7]
 357:uCOSII/Source/os_flag.c ****              } else {
 1268              		.loc 1 357 18 is_stmt 1 view .LVU438
 1269              	.LVL128:
 357:uCOSII/Source/os_flag.c ****              } else {
 1270              		.loc 1 357 18 is_stmt 0 view .LVU439
 1271 007a CFE7     		b	.L76
 1272              	.LVL129:
 1273              	.L85:
 368:uCOSII/Source/os_flag.c ****                  pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1274              		.loc 1 368 18 is_stmt 1 view .LVU440
 368:uCOSII/Source/os_flag.c ****                  pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 1275              		.loc 1 368 24 is_stmt 0 view .LVU441
 1276 007c 0222     		movs	r2, #2
 1277 007e 0021     		movs	r1, #0
 1278 0080 2846     		mov	r0, r5
 1279 0082 FFF7FEFF 		bl	OS_FlagTaskRdy
 1280              	.LVL130:
 369:uCOSII/Source/os_flag.c ****              }
 1281              		.loc 1 369 18 is_stmt 1 view .LVU442
 369:uCOSII/Source/os_flag.c ****              }
 1282              		.loc 1 369 24 is_stmt 0 view .LVU443
 1283 0086 2D68     		ldr	r5, [r5]
 1284              	.LVL131:
 1285              	.L82:
 367:uCOSII/Source/os_flag.c ****                  (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0, OS_STAT_PEND_ABORT);
 1286              		.loc 1 367 20 is_stmt 1 view .LVU444
 1287 0088 002D     		cmp	r5, #0
 1288 008a F7D1     		bne	.L85
 372:uCOSII/Source/os_flag.c **** #endif
 1289              		.loc 1 372 14 view .LVU445
 372:uCOSII/Source/os_flag.c **** #endif
 1290              		.loc 1 372 35 is_stmt 0 view .LVU446
 1291 008c 0A4B     		ldr	r3, .L92+4
 1292 008e E360     		str	r3, [r4, #12]
 374:uCOSII/Source/os_flag.c ****              pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list            
 1293              		.loc 1 374 14 is_stmt 1 view .LVU447
 374:uCOSII/Source/os_flag.c ****              pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list            
 1294              		.loc 1 374 35 is_stmt 0 view .LVU448
 1295 0090 0022     		movs	r2, #0
 1296 0092 2270     		strb	r2, [r4]
ARM GAS  /tmp/ccgMzuMT.s 			page 51


 375:uCOSII/Source/os_flag.c ****              pgrp->OSFlagFlags    = (OS_FLAGS)0;
 1297              		.loc 1 375 14 is_stmt 1 view .LVU449
 375:uCOSII/Source/os_flag.c ****              pgrp->OSFlagFlags    = (OS_FLAGS)0;
 1298              		.loc 1 375 35 is_stmt 0 view .LVU450
 1299 0094 094B     		ldr	r3, .L92+8
 1300 0096 1968     		ldr	r1, [r3]
 1301 0098 6160     		str	r1, [r4, #4]
 376:uCOSII/Source/os_flag.c ****              OSFlagFreeList       = pgrp;
 1302              		.loc 1 376 14 is_stmt 1 view .LVU451
 376:uCOSII/Source/os_flag.c ****              OSFlagFreeList       = pgrp;
 1303              		.loc 1 376 35 is_stmt 0 view .LVU452
 1304 009a 2281     		strh	r2, [r4, #8]	@ movhi
 377:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 1305              		.loc 1 377 14 is_stmt 1 view .LVU453
 377:uCOSII/Source/os_flag.c ****              OS_EXIT_CRITICAL();
 1306              		.loc 1 377 35 is_stmt 0 view .LVU454
 1307 009c 1C60     		str	r4, [r3]
 378:uCOSII/Source/os_flag.c ****              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiti
 1308              		.loc 1 378 14 is_stmt 1 view .LVU455
 1309 009e 4846     		mov	r0, r9
 1310 00a0 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1311              	.LVL132:
 378:uCOSII/Source/os_flag.c ****              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiti
 1312              		.loc 1 378 32 view .LVU456
 379:uCOSII/Source/os_flag.c ****                  OS_Sched();                               /* Find highest priority task ready to r
 1313              		.loc 1 379 14 view .LVU457
 379:uCOSII/Source/os_flag.c ****                  OS_Sched();                               /* Find highest priority task ready to r
 1314              		.loc 1 379 17 is_stmt 0 view .LVU458
 1315 00a4 012E     		cmp	r6, #1
 1316 00a6 02D0     		beq	.L91
 1317              	.L86:
 382:uCOSII/Source/os_flag.c ****              pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted    
 1318              		.loc 1 382 14 is_stmt 1 view .LVU459
 382:uCOSII/Source/os_flag.c ****              pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted    
 1319              		.loc 1 382 20 is_stmt 0 view .LVU460
 1320 00a8 0023     		movs	r3, #0
 1321 00aa 3B70     		strb	r3, [r7]
 383:uCOSII/Source/os_flag.c ****              break;
 1322              		.loc 1 383 14 is_stmt 1 view .LVU461
 1323              	.LVL133:
 384:uCOSII/Source/os_flag.c **** 
 1324              		.loc 1 384 14 view .LVU462
 1325 00ac B6E7     		b	.L76
 1326              	.LVL134:
 1327              	.L91:
 380:uCOSII/Source/os_flag.c ****              }
 1328              		.loc 1 380 18 view .LVU463
 1329 00ae FFF7FEFF 		bl	OS_Sched
 1330              	.LVL135:
 1331 00b2 F9E7     		b	.L86
 1332              	.L93:
 1333              		.align	2
 1334              	.L92:
 1335 00b4 00000000 		.word	OSIntNesting
 1336 00b8 00000000 		.word	.LC0
 1337 00bc 00000000 		.word	OSFlagFreeList
 1338              		.cfi_endproc
ARM GAS  /tmp/ccgMzuMT.s 			page 52


 1339              	.LFE2:
 1341              		.section	.text.OSFlagPost,"ax",%progbits
 1342              		.align	1
 1343              		.global	OSFlagPost
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1347              		.fpu fpv4-sp-d16
 1349              	OSFlagPost:
 1350              	.LVL136:
 1351              	.LFB7:
 837:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE *pnode;
 1352              		.loc 1 837 1 view -0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 837:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE *pnode;
 1356              		.loc 1 837 1 is_stmt 0 view .LVU465
 1357 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1358              	.LCFI11:
 1359              		.cfi_def_cfa_offset 24
 1360              		.cfi_offset 4, -24
 1361              		.cfi_offset 5, -20
 1362              		.cfi_offset 6, -16
 1363              		.cfi_offset 7, -12
 1364              		.cfi_offset 8, -8
 1365              		.cfi_offset 14, -4
 1366 0004 1546     		mov	r5, r2
 1367 0006 1F46     		mov	r7, r3
 838:uCOSII/Source/os_flag.c ****     BOOLEAN       sched;
 1368              		.loc 1 838 5 is_stmt 1 view .LVU466
 839:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_cur;
 1369              		.loc 1 839 5 view .LVU467
 840:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_rdy;
 1370              		.loc 1 840 5 view .LVU468
 841:uCOSII/Source/os_flag.c ****     BOOLEAN       rdy;
 1371              		.loc 1 841 5 view .LVU469
 842:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register   
 1372              		.loc 1 842 5 view .LVU470
 844:uCOSII/Source/os_flag.c **** #endif
 1373              		.loc 1 844 5 view .LVU471
 1374              	.LVL137:
 862:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1375              		.loc 1 862 5 view .LVU472
 862:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1376              		.loc 1 862 13 is_stmt 0 view .LVU473
 1377 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1378              	.LVL138:
 862:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1379              		.loc 1 862 8 view .LVU474
 1380 000a 052A     		cmp	r2, #5
 1381 000c 05D0     		beq	.L95
 863:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1382              		.loc 1 863 9 is_stmt 1 view .LVU475
 863:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1383              		.loc 1 863 15 is_stmt 0 view .LVU476
 1384 000e 0123     		movs	r3, #1
ARM GAS  /tmp/ccgMzuMT.s 			page 53


 1385              	.LVL139:
 863:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1386              		.loc 1 863 15 view .LVU477
 1387 0010 3B70     		strb	r3, [r7]
 864:uCOSII/Source/os_flag.c ****     }
 1388              		.loc 1 864 9 is_stmt 1 view .LVU478
 864:uCOSII/Source/os_flag.c ****     }
 1389              		.loc 1 864 16 is_stmt 0 view .LVU479
 1390 0012 0024     		movs	r4, #0
 1391              	.LVL140:
 1392              	.L96:
 943:uCOSII/Source/os_flag.c **** /*$PAGE*/
 1393              		.loc 1 943 1 view .LVU480
 1394 0014 2046     		mov	r0, r4
 1395 0016 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1396              	.LVL141:
 1397              	.L95:
 943:uCOSII/Source/os_flag.c **** /*$PAGE*/
 1398              		.loc 1 943 1 view .LVU481
 1399 001a 0446     		mov	r4, r0
 1400 001c 0E46     		mov	r6, r1
 867:uCOSII/Source/os_flag.c ****     switch (opt) {
 1401              		.loc 1 867 5 is_stmt 1 view .LVU482
 1402 001e FFF7FEFF 		bl	OS_CPU_SR_Save
 1403              	.LVL142:
 867:uCOSII/Source/os_flag.c ****     switch (opt) {
 1404              		.loc 1 867 5 is_stmt 0 view .LVU483
 1405 0022 8046     		mov	r8, r0
 1406              	.LVL143:
 867:uCOSII/Source/os_flag.c ****     switch (opt) {
 1407              		.loc 1 867 24 is_stmt 1 view .LVU484
 868:uCOSII/Source/os_flag.c ****         case OS_FLAG_CLR:
 1408              		.loc 1 868 5 view .LVU485
 1409 0024 3DB1     		cbz	r5, .L97
 868:uCOSII/Source/os_flag.c ****         case OS_FLAG_CLR:
 1410              		.loc 1 868 5 is_stmt 0 view .LVU486
 1411 0026 012D     		cmp	r5, #1
 1412 0028 0DD0     		beq	.L98
 878:uCOSII/Source/os_flag.c ****              *perr = OS_ERR_FLAG_INVALID_OPT;
 1413              		.loc 1 878 14 is_stmt 1 view .LVU487
 1414 002a FFF7FEFF 		bl	OS_CPU_SR_Restore
 1415              	.LVL144:
 878:uCOSII/Source/os_flag.c ****              *perr = OS_ERR_FLAG_INVALID_OPT;
 1416              		.loc 1 878 32 view .LVU488
 879:uCOSII/Source/os_flag.c ****              return ((OS_FLAGS)0);
 1417              		.loc 1 879 14 view .LVU489
 879:uCOSII/Source/os_flag.c ****              return ((OS_FLAGS)0);
 1418              		.loc 1 879 20 is_stmt 0 view .LVU490
 1419 002e 7123     		movs	r3, #113
 1420 0030 3B70     		strb	r3, [r7]
 880:uCOSII/Source/os_flag.c ****     }
 1421              		.loc 1 880 14 is_stmt 1 view .LVU491
 880:uCOSII/Source/os_flag.c ****     }
 1422              		.loc 1 880 21 is_stmt 0 view .LVU492
 1423 0032 0024     		movs	r4, #0
 1424              	.LVL145:
 880:uCOSII/Source/os_flag.c ****     }
ARM GAS  /tmp/ccgMzuMT.s 			page 54


 1425              		.loc 1 880 21 view .LVU493
 1426 0034 EEE7     		b	.L96
 1427              	.LVL146:
 1428              	.L97:
 870:uCOSII/Source/os_flag.c ****              break;
 1429              		.loc 1 870 14 is_stmt 1 view .LVU494
 870:uCOSII/Source/os_flag.c ****              break;
 1430              		.loc 1 870 35 is_stmt 0 view .LVU495
 1431 0036 F143     		mvns	r1, r6
 1432 0038 89B2     		uxth	r1, r1
 870:uCOSII/Source/os_flag.c ****              break;
 1433              		.loc 1 870 32 view .LVU496
 1434 003a 2689     		ldrh	r6, [r4, #8]
 1435 003c 3140     		ands	r1, r1, r6
 1436 003e 2181     		strh	r1, [r4, #8]	@ movhi
 871:uCOSII/Source/os_flag.c **** 
 1437              		.loc 1 871 14 is_stmt 1 view .LVU497
 1438              	.L100:
 882:uCOSII/Source/os_flag.c ****     pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1439              		.loc 1 882 5 view .LVU498
 1440              	.LVL147:
 883:uCOSII/Source/os_flag.c ****     while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(
 1441              		.loc 1 883 5 view .LVU499
 883:uCOSII/Source/os_flag.c ****     while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(
 1442              		.loc 1 883 11 is_stmt 0 view .LVU500
 1443 0040 6568     		ldr	r5, [r4, #4]
 1444              	.LVL148:
 884:uCOSII/Source/os_flag.c ****         switch (pnode->OSFlagNodeWaitType) {
 1445              		.loc 1 884 5 is_stmt 1 view .LVU501
 882:uCOSII/Source/os_flag.c ****     pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 1446              		.loc 1 882 11 is_stmt 0 view .LVU502
 1447 0042 0026     		movs	r6, #0
 884:uCOSII/Source/os_flag.c ****         switch (pnode->OSFlagNodeWaitType) {
 1448              		.loc 1 884 11 view .LVU503
 1449 0044 0AE0     		b	.L101
 1450              	.LVL149:
 1451              	.L98:
 874:uCOSII/Source/os_flag.c ****              break;
 1452              		.loc 1 874 14 is_stmt 1 view .LVU504
 874:uCOSII/Source/os_flag.c ****              break;
 1453              		.loc 1 874 32 is_stmt 0 view .LVU505
 1454 0046 2189     		ldrh	r1, [r4, #8]
 1455 0048 3143     		orrs	r1, r1, r6
 1456 004a 2181     		strh	r1, [r4, #8]	@ movhi
 875:uCOSII/Source/os_flag.c **** 
 1457              		.loc 1 875 14 is_stmt 1 view .LVU506
 1458 004c F8E7     		b	.L100
 1459              	.LVL150:
 1460              	.L105:
 887:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1461              		.loc 1 887 18 view .LVU507
 887:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1462              		.loc 1 887 45 is_stmt 0 view .LVU508
 1463 004e 2289     		ldrh	r2, [r4, #8]
 887:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1464              		.loc 1 887 66 view .LVU509
 1465 0050 2B8A     		ldrh	r3, [r5, #16]
ARM GAS  /tmp/ccgMzuMT.s 			page 55


 887:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1466              		.loc 1 887 28 view .LVU510
 1467 0052 02EA0301 		and	r1, r2, r3
 1468              	.LVL151:
 888:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1469              		.loc 1 888 18 is_stmt 1 view .LVU511
 888:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1470              		.loc 1 888 21 is_stmt 0 view .LVU512
 1471 0056 9343     		bics	r3, r3, r2
 1472 0058 10D0     		beq	.L117
 1473              	.LVL152:
 1474              	.L108:
 932:uCOSII/Source/os_flag.c ****     }
 1475              		.loc 1 932 9 is_stmt 1 view .LVU513
 932:uCOSII/Source/os_flag.c ****     }
 1476              		.loc 1 932 15 is_stmt 0 view .LVU514
 1477 005a 2D68     		ldr	r5, [r5]
 1478              	.LVL153:
 1479              	.L101:
 884:uCOSII/Source/os_flag.c ****         switch (pnode->OSFlagNodeWaitType) {
 1480              		.loc 1 884 11 is_stmt 1 view .LVU515
 1481 005c 002D     		cmp	r5, #0
 1482 005e 42D0     		beq	.L118
 885:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current n
 1483              		.loc 1 885 9 view .LVU516
 885:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current n
 1484              		.loc 1 885 22 is_stmt 0 view .LVU517
 1485 0060 AA7C     		ldrb	r2, [r5, #18]	@ zero_extendqisi2
 1486 0062 032A     		cmp	r2, #3
 1487 0064 38D8     		bhi	.L102
 1488 0066 01A3     		adr	r3, .L104
 1489 0068 53F822F0 		ldr	pc, [r3, r2, lsl #2]
 1490              		.p2align 2
 1491              	.L104:
 1492 006c A5000000 		.word	.L107+1
 1493 0070 C1000000 		.word	.L106+1
 1494 0074 4F000000 		.word	.L105+1
 1495 0078 8D000000 		.word	.L103+1
 1496              	.LVL154:
 1497              		.p2align 1
 1498              	.L117:
 889:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1499              		.loc 1 889 22 is_stmt 1 view .LVU518
 889:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1500              		.loc 1 889 28 is_stmt 0 view .LVU519
 1501 007c 0022     		movs	r2, #0
 1502 007e 2846     		mov	r0, r5
 1503 0080 FFF7FEFF 		bl	OS_FlagTaskRdy
 1504              	.LVL155:
 890:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1505              		.loc 1 890 22 is_stmt 1 view .LVU520
 890:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1506              		.loc 1 890 25 is_stmt 0 view .LVU521
 1507 0084 0128     		cmp	r0, #1
 1508 0086 E8D1     		bne	.L108
 891:uCOSII/Source/os_flag.c ****                      }
 1509              		.loc 1 891 32 view .LVU522
ARM GAS  /tmp/ccgMzuMT.s 			page 56


 1510 0088 0646     		mov	r6, r0
 1511              	.LVL156:
 891:uCOSII/Source/os_flag.c ****                      }
 1512              		.loc 1 891 32 view .LVU523
 1513 008a E6E7     		b	.L108
 1514              	.LVL157:
 1515              	.L103:
 897:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1516              		.loc 1 897 18 is_stmt 1 view .LVU524
 897:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1517              		.loc 1 897 45 is_stmt 0 view .LVU525
 1518 008c 2189     		ldrh	r1, [r4, #8]
 897:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1519              		.loc 1 897 66 view .LVU526
 1520 008e 2B8A     		ldrh	r3, [r5, #16]
 1521              	.LVL158:
 898:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1522              		.loc 1 898 18 is_stmt 1 view .LVU527
 898:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1523              		.loc 1 898 21 is_stmt 0 view .LVU528
 1524 0090 1940     		ands	r1, r1, r3
 1525              	.LVL159:
 898:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1526              		.loc 1 898 21 view .LVU529
 1527 0092 E2D0     		beq	.L108
 899:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1528              		.loc 1 899 22 is_stmt 1 view .LVU530
 899:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1529              		.loc 1 899 28 is_stmt 0 view .LVU531
 1530 0094 0022     		movs	r2, #0
 1531 0096 2846     		mov	r0, r5
 1532 0098 FFF7FEFF 		bl	OS_FlagTaskRdy
 1533              	.LVL160:
 900:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1534              		.loc 1 900 22 is_stmt 1 view .LVU532
 900:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1535              		.loc 1 900 25 is_stmt 0 view .LVU533
 1536 009c 0128     		cmp	r0, #1
 1537 009e DCD1     		bne	.L108
 901:uCOSII/Source/os_flag.c ****                      }
 1538              		.loc 1 901 32 view .LVU534
 1539 00a0 0646     		mov	r6, r0
 1540              	.LVL161:
 901:uCOSII/Source/os_flag.c ****                      }
 1541              		.loc 1 901 32 view .LVU535
 1542 00a2 DAE7     		b	.L108
 1543              	.LVL162:
 1544              	.L107:
 908:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1545              		.loc 1 908 18 is_stmt 1 view .LVU536
 908:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1546              		.loc 1 908 45 is_stmt 0 view .LVU537
 1547 00a4 2289     		ldrh	r2, [r4, #8]
 908:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
 1548              		.loc 1 908 66 view .LVU538
 1549 00a6 2B8A     		ldrh	r3, [r5, #16]
 908:uCOSII/Source/os_flag.c ****                  if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd      
ARM GAS  /tmp/ccgMzuMT.s 			page 57


 1550              		.loc 1 908 28 view .LVU539
 1551 00a8 23EA0201 		bic	r1, r3, r2
 1552              	.LVL163:
 909:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1553              		.loc 1 909 18 is_stmt 1 view .LVU540
 909:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1554              		.loc 1 909 21 is_stmt 0 view .LVU541
 1555 00ac 1A42     		tst	r2, r3
 1556 00ae D4D1     		bne	.L108
 910:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1557              		.loc 1 910 22 is_stmt 1 view .LVU542
 910:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1558              		.loc 1 910 28 is_stmt 0 view .LVU543
 1559 00b0 0022     		movs	r2, #0
 1560 00b2 2846     		mov	r0, r5
 1561 00b4 FFF7FEFF 		bl	OS_FlagTaskRdy
 1562              	.LVL164:
 911:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1563              		.loc 1 911 22 is_stmt 1 view .LVU544
 911:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1564              		.loc 1 911 25 is_stmt 0 view .LVU545
 1565 00b8 0128     		cmp	r0, #1
 1566 00ba CED1     		bne	.L108
 912:uCOSII/Source/os_flag.c ****                      }
 1567              		.loc 1 912 32 view .LVU546
 1568 00bc 0646     		mov	r6, r0
 1569              	.LVL165:
 912:uCOSII/Source/os_flag.c ****                      }
 1570              		.loc 1 912 32 view .LVU547
 1571 00be CCE7     		b	.L108
 1572              	.LVL166:
 1573              	.L106:
 918:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1574              		.loc 1 918 18 is_stmt 1 view .LVU548
 918:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1575              		.loc 1 918 45 is_stmt 0 view .LVU549
 1576 00c0 2389     		ldrh	r3, [r4, #8]
 918:uCOSII/Source/os_flag.c ****                  if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd      
 1577              		.loc 1 918 66 view .LVU550
 1578 00c2 298A     		ldrh	r1, [r5, #16]
 1579              	.LVL167:
 919:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1580              		.loc 1 919 18 is_stmt 1 view .LVU551
 919:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1581              		.loc 1 919 21 is_stmt 0 view .LVU552
 1582 00c4 9943     		bics	r1, r1, r3
 1583              	.LVL168:
 919:uCOSII/Source/os_flag.c ****                      rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);  
 1584              		.loc 1 919 21 view .LVU553
 1585 00c6 C8D0     		beq	.L108
 920:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1586              		.loc 1 920 22 is_stmt 1 view .LVU554
 920:uCOSII/Source/os_flag.c ****                      if (rdy == OS_TRUE) {
 1587              		.loc 1 920 28 is_stmt 0 view .LVU555
 1588 00c8 0022     		movs	r2, #0
 1589 00ca 2846     		mov	r0, r5
 1590 00cc FFF7FEFF 		bl	OS_FlagTaskRdy
ARM GAS  /tmp/ccgMzuMT.s 			page 58


 1591              	.LVL169:
 921:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1592              		.loc 1 921 22 is_stmt 1 view .LVU556
 921:uCOSII/Source/os_flag.c ****                          sched = OS_TRUE;                     /* When done we will reschedule      
 1593              		.loc 1 921 25 is_stmt 0 view .LVU557
 1594 00d0 0128     		cmp	r0, #1
 1595 00d2 C2D1     		bne	.L108
 922:uCOSII/Source/os_flag.c ****                      }
 1596              		.loc 1 922 32 view .LVU558
 1597 00d4 0646     		mov	r6, r0
 1598              	.LVL170:
 922:uCOSII/Source/os_flag.c ****                      }
 1599              		.loc 1 922 32 view .LVU559
 1600 00d6 C0E7     		b	.L108
 1601              	.LVL171:
 1602              	.L102:
 928:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 1603              		.loc 1 928 18 is_stmt 1 view .LVU560
 1604 00d8 4046     		mov	r0, r8
 1605 00da FFF7FEFF 		bl	OS_CPU_SR_Restore
 1606              	.LVL172:
 928:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 1607              		.loc 1 928 36 view .LVU561
 929:uCOSII/Source/os_flag.c ****                  return ((OS_FLAGS)0);
 1608              		.loc 1 929 18 view .LVU562
 929:uCOSII/Source/os_flag.c ****                  return ((OS_FLAGS)0);
 1609              		.loc 1 929 24 is_stmt 0 view .LVU563
 1610 00de 6F23     		movs	r3, #111
 1611 00e0 3B70     		strb	r3, [r7]
 930:uCOSII/Source/os_flag.c ****         }
 1612              		.loc 1 930 18 is_stmt 1 view .LVU564
 930:uCOSII/Source/os_flag.c ****         }
 1613              		.loc 1 930 25 is_stmt 0 view .LVU565
 1614 00e2 0024     		movs	r4, #0
 1615              	.LVL173:
 930:uCOSII/Source/os_flag.c ****         }
 1616              		.loc 1 930 25 view .LVU566
 1617 00e4 96E7     		b	.L96
 1618              	.LVL174:
 1619              	.L118:
 934:uCOSII/Source/os_flag.c ****     if (sched == OS_TRUE) {
 1620              		.loc 1 934 5 is_stmt 1 view .LVU567
 1621 00e6 4046     		mov	r0, r8
 1622 00e8 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1623              	.LVL175:
 934:uCOSII/Source/os_flag.c ****     if (sched == OS_TRUE) {
 1624              		.loc 1 934 23 view .LVU568
 935:uCOSII/Source/os_flag.c ****         OS_Sched();
 1625              		.loc 1 935 5 view .LVU569
 935:uCOSII/Source/os_flag.c ****         OS_Sched();
 1626              		.loc 1 935 8 is_stmt 0 view .LVU570
 1627 00ec 012E     		cmp	r6, #1
 1628 00ee 07D0     		beq	.L119
 1629              	.L110:
 938:uCOSII/Source/os_flag.c ****     flags_cur = pgrp->OSFlagFlags;
 1630              		.loc 1 938 5 is_stmt 1 view .LVU571
 1631 00f0 FFF7FEFF 		bl	OS_CPU_SR_Save
ARM GAS  /tmp/ccgMzuMT.s 			page 59


 1632              	.LVL176:
 938:uCOSII/Source/os_flag.c ****     flags_cur = pgrp->OSFlagFlags;
 1633              		.loc 1 938 24 view .LVU572
 939:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 1634              		.loc 1 939 5 view .LVU573
 939:uCOSII/Source/os_flag.c ****     OS_EXIT_CRITICAL();
 1635              		.loc 1 939 15 is_stmt 0 view .LVU574
 1636 00f4 2489     		ldrh	r4, [r4, #8]
 1637              	.LVL177:
 940:uCOSII/Source/os_flag.c ****     *perr     = OS_ERR_NONE;
 1638              		.loc 1 940 5 is_stmt 1 view .LVU575
 1639 00f6 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1640              	.LVL178:
 940:uCOSII/Source/os_flag.c ****     *perr     = OS_ERR_NONE;
 1641              		.loc 1 940 23 view .LVU576
 941:uCOSII/Source/os_flag.c ****     return (flags_cur);
 1642              		.loc 1 941 5 view .LVU577
 941:uCOSII/Source/os_flag.c ****     return (flags_cur);
 1643              		.loc 1 941 15 is_stmt 0 view .LVU578
 1644 00fa 0023     		movs	r3, #0
 1645 00fc 3B70     		strb	r3, [r7]
 942:uCOSII/Source/os_flag.c **** }
 1646              		.loc 1 942 5 is_stmt 1 view .LVU579
 942:uCOSII/Source/os_flag.c **** }
 1647              		.loc 1 942 12 is_stmt 0 view .LVU580
 1648 00fe 89E7     		b	.L96
 1649              	.LVL179:
 1650              	.L119:
 936:uCOSII/Source/os_flag.c ****     }
 1651              		.loc 1 936 9 is_stmt 1 view .LVU581
 1652 0100 FFF7FEFF 		bl	OS_Sched
 1653              	.LVL180:
 1654 0104 F4E7     		b	.L110
 1655              		.cfi_endproc
 1656              	.LFE7:
 1658 0106 00BF     		.section	.text.OSFlagPend,"ax",%progbits
 1659              		.align	1
 1660              		.global	OSFlagPend
 1661              		.syntax unified
 1662              		.thumb
 1663              		.thumb_func
 1664              		.fpu fpv4-sp-d16
 1666              	OSFlagPend:
 1667              	.LVL181:
 1668              	.LFB5:
 595:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE  node;
 1669              		.loc 1 595 1 view -0
 1670              		.cfi_startproc
 1671              		@ args = 4, pretend = 0, frame = 24
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 595:uCOSII/Source/os_flag.c ****     OS_FLAG_NODE  node;
 1673              		.loc 1 595 1 is_stmt 0 view .LVU583
 1674 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1675              	.LCFI12:
 1676              		.cfi_def_cfa_offset 32
 1677              		.cfi_offset 4, -32
 1678              		.cfi_offset 5, -28
ARM GAS  /tmp/ccgMzuMT.s 			page 60


 1679              		.cfi_offset 6, -24
 1680              		.cfi_offset 7, -20
 1681              		.cfi_offset 8, -16
 1682              		.cfi_offset 9, -12
 1683              		.cfi_offset 10, -8
 1684              		.cfi_offset 14, -4
 1685 0004 88B0     		sub	sp, sp, #32
 1686              	.LCFI13:
 1687              		.cfi_def_cfa_offset 64
 1688 0006 1446     		mov	r4, r2
 596:uCOSII/Source/os_flag.c ****     OS_FLAGS      flags_rdy;
 1689              		.loc 1 596 5 is_stmt 1 view .LVU584
 597:uCOSII/Source/os_flag.c ****     INT8U         result;
 1690              		.loc 1 597 5 view .LVU585
 598:uCOSII/Source/os_flag.c ****     INT8U         pend_stat;
 1691              		.loc 1 598 5 view .LVU586
 599:uCOSII/Source/os_flag.c ****     BOOLEAN       consume;
 1692              		.loc 1 599 5 view .LVU587
 600:uCOSII/Source/os_flag.c **** #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status regis
 1693              		.loc 1 600 5 view .LVU588
 602:uCOSII/Source/os_flag.c **** #endif
 1694              		.loc 1 602 5 view .LVU589
 1695              	.LVL182:
 620:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR           
 1696              		.loc 1 620 5 view .LVU590
 620:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR           
 1697              		.loc 1 620 22 is_stmt 0 view .LVU591
 1698 0008 824A     		ldr	r2, .L159
 1699              	.LVL183:
 620:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR           
 1700              		.loc 1 620 22 view .LVU592
 1701 000a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 620:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR           
 1702              		.loc 1 620 8 view .LVU593
 1703 000c 82B9     		cbnz	r2, .L148
 1704 000e 0646     		mov	r6, r0
 1705 0010 0F46     		mov	r7, r1
 1706 0012 9846     		mov	r8, r3
 624:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked           
 1707              		.loc 1 624 5 is_stmt 1 view .LVU594
 624:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked           
 1708              		.loc 1 624 23 is_stmt 0 view .LVU595
 1709 0014 804B     		ldr	r3, .L159+4
 1710              	.LVL184:
 624:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked           
 1711              		.loc 1 624 23 view .LVU596
 1712 0016 93F80090 		ldrb	r9, [r3]	@ zero_extendqisi2
 624:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked           
 1713              		.loc 1 624 8 view .LVU597
 1714 001a B9F1000F 		cmp	r9, #0
 1715 001e 0FD1     		bne	.L149
 628:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1716              		.loc 1 628 5 is_stmt 1 view .LVU598
 628:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
 1717              		.loc 1 628 13 is_stmt 0 view .LVU599
 1718 0020 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 628:uCOSII/Source/os_flag.c ****         *perr = OS_ERR_EVENT_TYPE;
ARM GAS  /tmp/ccgMzuMT.s 			page 61


 1719              		.loc 1 628 8 view .LVU600
 1720 0022 052B     		cmp	r3, #5
 1721 0024 11D0     		beq	.L124
 629:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1722              		.loc 1 629 9 is_stmt 1 view .LVU601
 629:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1723              		.loc 1 629 15 is_stmt 0 view .LVU602
 1724 0026 0123     		movs	r3, #1
 1725 0028 109A     		ldr	r2, [sp, #64]
 1726 002a 1370     		strb	r3, [r2]
 630:uCOSII/Source/os_flag.c ****     }
 1727              		.loc 1 630 9 is_stmt 1 view .LVU603
 630:uCOSII/Source/os_flag.c ****     }
 1728              		.loc 1 630 16 is_stmt 0 view .LVU604
 1729 002c 0025     		movs	r5, #0
 1730 002e 03E0     		b	.L122
 1731              	.LVL185:
 1732              	.L148:
 621:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1733              		.loc 1 621 9 is_stmt 1 view .LVU605
 621:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1734              		.loc 1 621 15 is_stmt 0 view .LVU606
 1735 0030 0223     		movs	r3, #2
 1736              	.LVL186:
 621:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1737              		.loc 1 621 15 view .LVU607
 1738 0032 109A     		ldr	r2, [sp, #64]
 1739 0034 1370     		strb	r3, [r2]
 622:uCOSII/Source/os_flag.c ****     }
 1740              		.loc 1 622 9 is_stmt 1 view .LVU608
 622:uCOSII/Source/os_flag.c ****     }
 1741              		.loc 1 622 16 is_stmt 0 view .LVU609
 1742 0036 0025     		movs	r5, #0
 1743              	.LVL187:
 1744              	.L122:
 759:uCOSII/Source/os_flag.c **** /*$PAGE*/
 1745              		.loc 1 759 1 view .LVU610
 1746 0038 2846     		mov	r0, r5
 1747 003a 08B0     		add	sp, sp, #32
 1748              	.LCFI14:
 1749              		.cfi_remember_state
 1750              		.cfi_def_cfa_offset 32
 1751              		@ sp needed
 1752 003c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1753              	.LVL188:
 1754              	.L149:
 1755              	.LCFI15:
 1756              		.cfi_restore_state
 625:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1757              		.loc 1 625 9 is_stmt 1 view .LVU611
 625:uCOSII/Source/os_flag.c ****         return ((OS_FLAGS)0);
 1758              		.loc 1 625 15 is_stmt 0 view .LVU612
 1759 0040 0D23     		movs	r3, #13
 1760 0042 109A     		ldr	r2, [sp, #64]
 1761 0044 1370     		strb	r3, [r2]
 626:uCOSII/Source/os_flag.c ****     }
 1762              		.loc 1 626 9 is_stmt 1 view .LVU613
ARM GAS  /tmp/ccgMzuMT.s 			page 62


 626:uCOSII/Source/os_flag.c ****     }
 1763              		.loc 1 626 16 is_stmt 0 view .LVU614
 1764 0046 0025     		movs	r5, #0
 1765 0048 F6E7     		b	.L122
 1766              	.L124:
 632:uCOSII/Source/os_flag.c ****     if (result != (INT8U)0) {                              /* See if we need to consume the flags  
 1767              		.loc 1 632 5 is_stmt 1 view .LVU615
 1768              	.LVL189:
 633:uCOSII/Source/os_flag.c ****         wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
 1769              		.loc 1 633 5 view .LVU616
 633:uCOSII/Source/os_flag.c ****         wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
 1770              		.loc 1 633 8 is_stmt 0 view .LVU617
 1771 004a 14F0800F 		tst	r4, #128
 1772 004e 09D1     		bne	.L150
 1773              	.LVL190:
 1774              	.L125:
 640:uCOSII/Source/os_flag.c ****     switch (wait_type) {
 1775              		.loc 1 640 5 is_stmt 1 view .LVU618
 1776 0050 FFF7FEFF 		bl	OS_CPU_SR_Save
 1777              	.LVL191:
 640:uCOSII/Source/os_flag.c ****     switch (wait_type) {
 1778              		.loc 1 640 5 is_stmt 0 view .LVU619
 1779 0054 8246     		mov	r10, r0
 1780              	.LVL192:
 640:uCOSII/Source/os_flag.c ****     switch (wait_type) {
 1781              		.loc 1 640 24 is_stmt 1 view .LVU620
 641:uCOSII/Source/os_flag.c ****         case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set    
 1782              		.loc 1 641 5 view .LVU621
 1783 0056 032C     		cmp	r4, #3
 1784 0058 00F2B180 		bhi	.L126
 1785 005c DFE804F0 		tbb	[pc, r4]
 1786              	.L128:
 1787 0060 6E       		.byte	(.L131-.L128)/2
 1788 0061 8F       		.byte	(.L130-.L128)/2
 1789 0062 07       		.byte	(.L129-.L128)/2
 1790 0063 4D       		.byte	(.L127-.L128)/2
 1791              	.LVL193:
 1792              		.p2align 1
 1793              	.L150:
 634:uCOSII/Source/os_flag.c ****         consume    = OS_TRUE;
 1794              		.loc 1 634 9 view .LVU622
 634:uCOSII/Source/os_flag.c ****         consume    = OS_TRUE;
 1795              		.loc 1 634 19 is_stmt 0 view .LVU623
 1796 0064 04F07F04 		and	r4, r4, #127
 1797              	.LVL194:
 635:uCOSII/Source/os_flag.c ****     } else {
 1798              		.loc 1 635 9 is_stmt 1 view .LVU624
 635:uCOSII/Source/os_flag.c ****     } else {
 1799              		.loc 1 635 20 is_stmt 0 view .LVU625
 1800 0068 4FF00109 		mov	r9, #1
 1801 006c F0E7     		b	.L125
 1802              	.LVL195:
 1803              	.L129:
 643:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1804              		.loc 1 643 14 is_stmt 1 view .LVU626
 643:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1805              		.loc 1 643 41 is_stmt 0 view .LVU627
ARM GAS  /tmp/ccgMzuMT.s 			page 63


 1806 006e 3389     		ldrh	r3, [r6, #8]
 643:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1807              		.loc 1 643 24 view .LVU628
 1808 0070 03EA0705 		and	r5, r3, r7
 1809              	.LVL196:
 644:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1810              		.loc 1 644 14 is_stmt 1 view .LVU629
 644:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1811              		.loc 1 644 17 is_stmt 0 view .LVU630
 1812 0074 37EA0302 		bics	r2, r7, r3
 1813 0078 2ED0     		beq	.L151
 653:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 1814              		.loc 1 653 18 is_stmt 1 view .LVU631
 1815 007a CDF80080 		str	r8, [sp]
 1816 007e 2346     		mov	r3, r4
 1817 0080 3A46     		mov	r2, r7
 1818 0082 03A9     		add	r1, sp, #12
 1819 0084 3046     		mov	r0, r6
 1820              	.LVL197:
 653:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 1821              		.loc 1 653 18 is_stmt 0 view .LVU632
 1822 0086 FFF7FEFF 		bl	OS_FlagBlock
 1823              	.LVL198:
 654:uCOSII/Source/os_flag.c ****              }
 1824              		.loc 1 654 18 is_stmt 1 view .LVU633
 1825 008a 5046     		mov	r0, r10
 1826 008c FFF7FEFF 		bl	OS_CPU_SR_Restore
 1827              	.LVL199:
 654:uCOSII/Source/os_flag.c ****              }
 1828              		.loc 1 654 36 view .LVU634
 656:uCOSII/Source/os_flag.c **** 
 1829              		.loc 1 656 14 view .LVU635
 1830              	.L134:
 715:uCOSII/Source/os_flag.c ****     OS_ENTER_CRITICAL();
 1831              		.loc 1 715 5 view .LVU636
 1832 0090 FFF7FEFF 		bl	OS_Sched
 1833              	.LVL200:
 716:uCOSII/Source/os_flag.c ****     if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?        
 1834              		.loc 1 716 5 view .LVU637
 1835 0094 FFF7FEFF 		bl	OS_CPU_SR_Save
 1836              	.LVL201:
 1837 0098 0746     		mov	r7, r0
 1838              	.LVL202:
 716:uCOSII/Source/os_flag.c ****     if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?        
 1839              		.loc 1 716 24 view .LVU638
 717:uCOSII/Source/os_flag.c ****         pend_stat                = OSTCBCur->OSTCBStatPend;
 1840              		.loc 1 717 5 view .LVU639
 717:uCOSII/Source/os_flag.c ****         pend_stat                = OSTCBCur->OSTCBStatPend;
 1841              		.loc 1 717 17 is_stmt 0 view .LVU640
 1842 009a 604B     		ldr	r3, .L159+8
 1843 009c 1B68     		ldr	r3, [r3]
 1844 009e 93F83550 		ldrb	r5, [r3, #53]	@ zero_extendqisi2
 717:uCOSII/Source/os_flag.c ****         pend_stat                = OSTCBCur->OSTCBStatPend;
 1845              		.loc 1 717 8 view .LVU641
 1846 00a2 002D     		cmp	r5, #0
 1847 00a4 40F09280 		bne	.L152
 736:uCOSII/Source/os_flag.c ****     if (consume == OS_TRUE) {                              /* See if we need to consume the flags  
ARM GAS  /tmp/ccgMzuMT.s 			page 64


 1848              		.loc 1 736 5 is_stmt 1 view .LVU642
 736:uCOSII/Source/os_flag.c ****     if (consume == OS_TRUE) {                              /* See if we need to consume the flags  
 1849              		.loc 1 736 15 is_stmt 0 view .LVU643
 1850 00a8 9D8D     		ldrh	r5, [r3, #44]
 1851              	.LVL203:
 737:uCOSII/Source/os_flag.c ****         switch (wait_type) {
 1852              		.loc 1 737 5 is_stmt 1 view .LVU644
 737:uCOSII/Source/os_flag.c ****         switch (wait_type) {
 1853              		.loc 1 737 8 is_stmt 0 view .LVU645
 1854 00aa B9F1010F 		cmp	r9, #1
 1855 00ae 0CD1     		bne	.L144
 738:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:
 1856              		.loc 1 738 9 is_stmt 1 view .LVU646
 1857 00b0 012C     		cmp	r4, #1
 1858 00b2 40F2A380 		bls	.L145
 1859 00b6 023C     		subs	r4, r4, #2
 1860              	.LVL204:
 738:uCOSII/Source/os_flag.c ****             case OS_FLAG_WAIT_SET_ALL:
 1861              		.loc 1 738 9 is_stmt 0 view .LVU647
 1862 00b8 E4B2     		uxtb	r4, r4
 1863 00ba 012C     		cmp	r4, #1
 1864 00bc 00F2A280 		bhi	.L146
 741:uCOSII/Source/os_flag.c ****                  break;
 1865              		.loc 1 741 18 is_stmt 1 view .LVU648
 741:uCOSII/Source/os_flag.c ****                  break;
 1866              		.loc 1 741 39 is_stmt 0 view .LVU649
 1867 00c0 EB43     		mvns	r3, r5
 1868 00c2 9BB2     		uxth	r3, r3
 741:uCOSII/Source/os_flag.c ****                  break;
 1869              		.loc 1 741 36 view .LVU650
 1870 00c4 3289     		ldrh	r2, [r6, #8]
 1871 00c6 1340     		ands	r3, r3, r2
 1872 00c8 3381     		strh	r3, [r6, #8]	@ movhi
 742:uCOSII/Source/os_flag.c **** 
 1873              		.loc 1 742 18 is_stmt 1 view .LVU651
 1874              	.L144:
 756:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred          
 1875              		.loc 1 756 5 view .LVU652
 1876 00ca 3846     		mov	r0, r7
 1877              	.LVL205:
 756:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred          
 1878              		.loc 1 756 5 is_stmt 0 view .LVU653
 1879 00cc FFF7FEFF 		bl	OS_CPU_SR_Restore
 1880              	.LVL206:
 756:uCOSII/Source/os_flag.c ****     *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred          
 1881              		.loc 1 756 23 is_stmt 1 view .LVU654
 757:uCOSII/Source/os_flag.c ****     return (flags_rdy);
 1882              		.loc 1 757 5 view .LVU655
 757:uCOSII/Source/os_flag.c ****     return (flags_rdy);
 1883              		.loc 1 757 11 is_stmt 0 view .LVU656
 1884 00d0 0023     		movs	r3, #0
 1885 00d2 109A     		ldr	r2, [sp, #64]
 1886 00d4 1370     		strb	r3, [r2]
 758:uCOSII/Source/os_flag.c **** }
 1887              		.loc 1 758 5 is_stmt 1 view .LVU657
 758:uCOSII/Source/os_flag.c **** }
 1888              		.loc 1 758 12 is_stmt 0 view .LVU658
ARM GAS  /tmp/ccgMzuMT.s 			page 65


 1889 00d6 AFE7     		b	.L122
 1890              	.LVL207:
 1891              	.L151:
 645:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted
 1892              		.loc 1 645 18 is_stmt 1 view .LVU659
 645:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted
 1893              		.loc 1 645 21 is_stmt 0 view .LVU660
 1894 00d8 B9F1010F 		cmp	r9, #1
 1895 00dc 09D0     		beq	.L153
 1896              	.L133:
 648:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1897              		.loc 1 648 18 is_stmt 1 view .LVU661
 648:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1898              		.loc 1 648 26 is_stmt 0 view .LVU662
 1899 00de 4F4B     		ldr	r3, .L159+8
 1900 00e0 1B68     		ldr	r3, [r3]
 648:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1901              		.loc 1 648 42 view .LVU663
 1902 00e2 9D85     		strh	r5, [r3, #44]	@ movhi
 649:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1903              		.loc 1 649 18 is_stmt 1 view .LVU664
 1904 00e4 5046     		mov	r0, r10
 1905              	.LVL208:
 649:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1906              		.loc 1 649 18 is_stmt 0 view .LVU665
 1907 00e6 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1908              	.LVL209:
 649:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1909              		.loc 1 649 36 is_stmt 1 view .LVU666
 650:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 1910              		.loc 1 650 18 view .LVU667
 650:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 1911              		.loc 1 650 42 is_stmt 0 view .LVU668
 1912 00ea 0023     		movs	r3, #0
 1913 00ec 109A     		ldr	r2, [sp, #64]
 1914 00ee 1370     		strb	r3, [r2]
 651:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 1915              		.loc 1 651 18 is_stmt 1 view .LVU669
 651:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 1916              		.loc 1 651 25 is_stmt 0 view .LVU670
 1917 00f0 A2E7     		b	.L122
 1918              	.LVL210:
 1919              	.L153:
 646:uCOSII/Source/os_flag.c ****                  }
 1920              		.loc 1 646 22 is_stmt 1 view .LVU671
 646:uCOSII/Source/os_flag.c ****                  }
 1921              		.loc 1 646 40 is_stmt 0 view .LVU672
 1922 00f2 23EA0503 		bic	r3, r3, r5
 1923 00f6 3381     		strh	r3, [r6, #8]	@ movhi
 1924 00f8 F1E7     		b	.L133
 1925              	.LVL211:
 1926              	.L127:
 659:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 1927              		.loc 1 659 14 is_stmt 1 view .LVU673
 659:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                  
 1928              		.loc 1 659 41 is_stmt 0 view .LVU674
 1929 00fa 3389     		ldrh	r3, [r6, #8]
ARM GAS  /tmp/ccgMzuMT.s 			page 66


 1930              	.LVL212:
 660:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1931              		.loc 1 660 14 is_stmt 1 view .LVU675
 660:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1932              		.loc 1 660 17 is_stmt 0 view .LVU676
 1933 00fc 13EA0705 		ands	r5, r3, r7
 1934              	.LVL213:
 660:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1935              		.loc 1 660 17 view .LVU677
 1936 0100 10D0     		beq	.L135
 661:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we 
 1937              		.loc 1 661 18 is_stmt 1 view .LVU678
 661:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we 
 1938              		.loc 1 661 21 is_stmt 0 view .LVU679
 1939 0102 B9F1010F 		cmp	r9, #1
 1940 0106 09D0     		beq	.L154
 1941              	.L136:
 664:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1942              		.loc 1 664 18 is_stmt 1 view .LVU680
 664:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1943              		.loc 1 664 26 is_stmt 0 view .LVU681
 1944 0108 444B     		ldr	r3, .L159+8
 1945 010a 1B68     		ldr	r3, [r3]
 664:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 1946              		.loc 1 664 42 view .LVU682
 1947 010c 9D85     		strh	r5, [r3, #44]	@ movhi
 665:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1948              		.loc 1 665 18 is_stmt 1 view .LVU683
 1949 010e 5046     		mov	r0, r10
 1950              	.LVL214:
 665:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1951              		.loc 1 665 18 is_stmt 0 view .LVU684
 1952 0110 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1953              	.LVL215:
 665:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 1954              		.loc 1 665 36 is_stmt 1 view .LVU685
 666:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 1955              		.loc 1 666 18 view .LVU686
 666:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 1956              		.loc 1 666 42 is_stmt 0 view .LVU687
 1957 0114 0023     		movs	r3, #0
 1958 0116 109A     		ldr	r2, [sp, #64]
 1959 0118 1370     		strb	r3, [r2]
 667:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 1960              		.loc 1 667 18 is_stmt 1 view .LVU688
 667:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 1961              		.loc 1 667 25 is_stmt 0 view .LVU689
 1962 011a 8DE7     		b	.L122
 1963              	.LVL216:
 1964              	.L154:
 662:uCOSII/Source/os_flag.c ****                  }
 1965              		.loc 1 662 22 is_stmt 1 view .LVU690
 662:uCOSII/Source/os_flag.c ****                  }
 1966              		.loc 1 662 40 is_stmt 0 view .LVU691
 1967 011c 23EA0503 		bic	r3, r3, r5
 1968 0120 3381     		strh	r3, [r6, #8]	@ movhi
 1969 0122 F1E7     		b	.L136
ARM GAS  /tmp/ccgMzuMT.s 			page 67


 1970              	.L135:
 669:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 1971              		.loc 1 669 18 is_stmt 1 view .LVU692
 1972 0124 CDF80080 		str	r8, [sp]
 1973 0128 2346     		mov	r3, r4
 1974 012a 3A46     		mov	r2, r7
 1975 012c 03A9     		add	r1, sp, #12
 1976 012e 3046     		mov	r0, r6
 1977              	.LVL217:
 669:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 1978              		.loc 1 669 18 is_stmt 0 view .LVU693
 1979 0130 FFF7FEFF 		bl	OS_FlagBlock
 1980              	.LVL218:
 670:uCOSII/Source/os_flag.c ****              }
 1981              		.loc 1 670 18 is_stmt 1 view .LVU694
 1982 0134 5046     		mov	r0, r10
 1983 0136 FFF7FEFF 		bl	OS_CPU_SR_Restore
 1984              	.LVL219:
 670:uCOSII/Source/os_flag.c ****              }
 1985              		.loc 1 670 36 view .LVU695
 672:uCOSII/Source/os_flag.c **** 
 1986              		.loc 1 672 14 view .LVU696
 1987 013a A9E7     		b	.L134
 1988              	.LVL220:
 1989              	.L131:
 676:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1990              		.loc 1 676 14 view .LVU697
 676:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1991              		.loc 1 676 41 is_stmt 0 view .LVU698
 1992 013c 3389     		ldrh	r3, [r6, #8]
 676:uCOSII/Source/os_flag.c ****              if (flags_rdy == flags) {                     /* Must match ALL the bits that we want 
 1993              		.loc 1 676 24 view .LVU699
 1994 013e 27EA0305 		bic	r5, r7, r3
 1995              	.LVL221:
 677:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1996              		.loc 1 677 14 is_stmt 1 view .LVU700
 677:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 1997              		.loc 1 677 17 is_stmt 0 view .LVU701
 1998 0142 3B42     		tst	r3, r7
 1999 0144 0BD0     		beq	.L155
 686:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 2000              		.loc 1 686 18 is_stmt 1 view .LVU702
 2001 0146 CDF80080 		str	r8, [sp]
 2002 014a 2346     		mov	r3, r4
 2003 014c 3A46     		mov	r2, r7
 2004 014e 03A9     		add	r1, sp, #12
 2005 0150 3046     		mov	r0, r6
 2006              	.LVL222:
 686:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 2007              		.loc 1 686 18 is_stmt 0 view .LVU703
 2008 0152 FFF7FEFF 		bl	OS_FlagBlock
 2009              	.LVL223:
 687:uCOSII/Source/os_flag.c ****              }
 2010              		.loc 1 687 18 is_stmt 1 view .LVU704
 2011 0156 5046     		mov	r0, r10
 2012 0158 FFF7FEFF 		bl	OS_CPU_SR_Restore
 2013              	.LVL224:
ARM GAS  /tmp/ccgMzuMT.s 			page 68


 687:uCOSII/Source/os_flag.c ****              }
 2014              		.loc 1 687 36 view .LVU705
 689:uCOSII/Source/os_flag.c **** 
 2015              		.loc 1 689 14 view .LVU706
 2016 015c 98E7     		b	.L134
 2017              	.LVL225:
 2018              	.L155:
 678:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 2019              		.loc 1 678 18 view .LVU707
 678:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted    
 2020              		.loc 1 678 21 is_stmt 0 view .LVU708
 2021 015e B9F1010F 		cmp	r9, #1
 2022 0162 09D0     		beq	.L156
 2023              	.L138:
 681:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 2024              		.loc 1 681 18 is_stmt 1 view .LVU709
 681:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 2025              		.loc 1 681 26 is_stmt 0 view .LVU710
 2026 0164 2D4B     		ldr	r3, .L159+8
 2027 0166 1B68     		ldr	r3, [r3]
 681:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 2028              		.loc 1 681 42 view .LVU711
 2029 0168 9D85     		strh	r5, [r3, #44]	@ movhi
 682:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 2030              		.loc 1 682 18 is_stmt 1 view .LVU712
 2031 016a 5046     		mov	r0, r10
 2032              	.LVL226:
 682:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 2033              		.loc 1 682 18 is_stmt 0 view .LVU713
 2034 016c FFF7FEFF 		bl	OS_CPU_SR_Restore
 2035              	.LVL227:
 682:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 2036              		.loc 1 682 36 is_stmt 1 view .LVU714
 683:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 2037              		.loc 1 683 18 view .LVU715
 683:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 2038              		.loc 1 683 42 is_stmt 0 view .LVU716
 2039 0170 0023     		movs	r3, #0
 2040 0172 109A     		ldr	r2, [sp, #64]
 2041 0174 1370     		strb	r3, [r2]
 684:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 2042              		.loc 1 684 18 is_stmt 1 view .LVU717
 684:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 2043              		.loc 1 684 25 is_stmt 0 view .LVU718
 2044 0176 5FE7     		b	.L122
 2045              	.LVL228:
 2046              	.L156:
 679:uCOSII/Source/os_flag.c ****                  }
 2047              		.loc 1 679 22 is_stmt 1 view .LVU719
 679:uCOSII/Source/os_flag.c ****                  }
 2048              		.loc 1 679 40 is_stmt 0 view .LVU720
 2049 0178 2B43     		orrs	r3, r3, r5
 2050 017a 3381     		strh	r3, [r6, #8]	@ movhi
 2051 017c F2E7     		b	.L138
 2052              	.LVL229:
 2053              	.L130:
 692:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
ARM GAS  /tmp/ccgMzuMT.s 			page 69


 2054              		.loc 1 692 14 is_stmt 1 view .LVU721
 692:uCOSII/Source/os_flag.c ****              if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared              
 2055              		.loc 1 692 41 is_stmt 0 view .LVU722
 2056 017e 3389     		ldrh	r3, [r6, #8]
 2057              	.LVL230:
 693:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 2058              		.loc 1 693 14 is_stmt 1 view .LVU723
 693:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 2059              		.loc 1 693 17 is_stmt 0 view .LVU724
 2060 0180 37EA0305 		bics	r5, r7, r3
 2061              	.LVL231:
 693:uCOSII/Source/os_flag.c ****                  if (consume == OS_TRUE) {                 /* See if we need to consume the flags  
 2062              		.loc 1 693 17 view .LVU725
 2063 0184 0FD0     		beq	.L139
 694:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 2064              		.loc 1 694 18 is_stmt 1 view .LVU726
 694:uCOSII/Source/os_flag.c ****                      pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got       
 2065              		.loc 1 694 21 is_stmt 0 view .LVU727
 2066 0186 B9F1010F 		cmp	r9, #1
 2067 018a 09D0     		beq	.L157
 2068              	.L140:
 697:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 2069              		.loc 1 697 18 is_stmt 1 view .LVU728
 697:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 2070              		.loc 1 697 26 is_stmt 0 view .LVU729
 2071 018c 234B     		ldr	r3, .L159+8
 2072 018e 1B68     		ldr	r3, [r3]
 697:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller 
 2073              		.loc 1 697 42 view .LVU730
 2074 0190 9D85     		strh	r5, [r3, #44]	@ movhi
 698:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 2075              		.loc 1 698 18 is_stmt 1 view .LVU731
 2076 0192 5046     		mov	r0, r10
 2077              	.LVL232:
 698:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 2078              		.loc 1 698 18 is_stmt 0 view .LVU732
 2079 0194 FFF7FEFF 		bl	OS_CPU_SR_Restore
 2080              	.LVL233:
 698:uCOSII/Source/os_flag.c ****                  *perr                   = OS_ERR_NONE;
 2081              		.loc 1 698 36 is_stmt 1 view .LVU733
 699:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 2082              		.loc 1 699 18 view .LVU734
 699:uCOSII/Source/os_flag.c ****                  return (flags_rdy);
 2083              		.loc 1 699 42 is_stmt 0 view .LVU735
 2084 0198 0023     		movs	r3, #0
 2085 019a 109A     		ldr	r2, [sp, #64]
 2086 019c 1370     		strb	r3, [r2]
 700:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 2087              		.loc 1 700 18 is_stmt 1 view .LVU736
 700:uCOSII/Source/os_flag.c ****              } else {                                      /* Block task until events occur or time
 2088              		.loc 1 700 25 is_stmt 0 view .LVU737
 2089 019e 4BE7     		b	.L122
 2090              	.LVL234:
 2091              	.L157:
 695:uCOSII/Source/os_flag.c ****                  }
 2092              		.loc 1 695 22 is_stmt 1 view .LVU738
 695:uCOSII/Source/os_flag.c ****                  }
ARM GAS  /tmp/ccgMzuMT.s 			page 70


 2093              		.loc 1 695 40 is_stmt 0 view .LVU739
 2094 01a0 2B43     		orrs	r3, r3, r5
 2095 01a2 3381     		strh	r3, [r6, #8]	@ movhi
 2096 01a4 F2E7     		b	.L140
 2097              	.L139:
 702:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 2098              		.loc 1 702 18 is_stmt 1 view .LVU740
 2099 01a6 CDF80080 		str	r8, [sp]
 2100 01aa 2346     		mov	r3, r4
 2101 01ac 3A46     		mov	r2, r7
 2102 01ae 03A9     		add	r1, sp, #12
 2103 01b0 3046     		mov	r0, r6
 2104              	.LVL235:
 702:uCOSII/Source/os_flag.c ****                  OS_EXIT_CRITICAL();
 2105              		.loc 1 702 18 is_stmt 0 view .LVU741
 2106 01b2 FFF7FEFF 		bl	OS_FlagBlock
 2107              	.LVL236:
 703:uCOSII/Source/os_flag.c ****              }
 2108              		.loc 1 703 18 is_stmt 1 view .LVU742
 2109 01b6 5046     		mov	r0, r10
 2110 01b8 FFF7FEFF 		bl	OS_CPU_SR_Restore
 2111              	.LVL237:
 703:uCOSII/Source/os_flag.c ****              }
 2112              		.loc 1 703 36 view .LVU743
 705:uCOSII/Source/os_flag.c **** #endif
 2113              		.loc 1 705 14 view .LVU744
 2114 01bc 68E7     		b	.L134
 2115              	.LVL238:
 2116              	.L126:
 709:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 2117              		.loc 1 709 14 view .LVU745
 2118 01be FFF7FEFF 		bl	OS_CPU_SR_Restore
 2119              	.LVL239:
 709:uCOSII/Source/os_flag.c ****              flags_rdy = (OS_FLAGS)0;
 2120              		.loc 1 709 32 view .LVU746
 710:uCOSII/Source/os_flag.c ****              *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2121              		.loc 1 710 14 view .LVU747
 711:uCOSII/Source/os_flag.c ****              return (flags_rdy);
 2122              		.loc 1 711 14 view .LVU748
 711:uCOSII/Source/os_flag.c ****              return (flags_rdy);
 2123              		.loc 1 711 25 is_stmt 0 view .LVU749
 2124 01c2 6F23     		movs	r3, #111
 2125 01c4 109A     		ldr	r2, [sp, #64]
 2126 01c6 1370     		strb	r3, [r2]
 712:uCOSII/Source/os_flag.c ****     }
 2127              		.loc 1 712 14 is_stmt 1 view .LVU750
 712:uCOSII/Source/os_flag.c ****     }
 2128              		.loc 1 712 21 is_stmt 0 view .LVU751
 2129 01c8 0025     		movs	r5, #0
 2130 01ca 35E7     		b	.L122
 2131              	.LVL240:
 2132              	.L152:
 718:uCOSII/Source/os_flag.c ****         OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2133              		.loc 1 718 9 is_stmt 1 view .LVU752
 719:uCOSII/Source/os_flag.c ****         OS_FlagUnlink(&node);
 2134              		.loc 1 719 9 view .LVU753
 719:uCOSII/Source/os_flag.c ****         OS_FlagUnlink(&node);
ARM GAS  /tmp/ccgMzuMT.s 			page 71


 2135              		.loc 1 719 34 is_stmt 0 view .LVU754
 2136 01cc 0024     		movs	r4, #0
 2137              	.LVL241:
 719:uCOSII/Source/os_flag.c ****         OS_FlagUnlink(&node);
 2138              		.loc 1 719 34 view .LVU755
 2139 01ce 83F83540 		strb	r4, [r3, #53]
 720:uCOSII/Source/os_flag.c ****         OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run          
 2140              		.loc 1 720 9 is_stmt 1 view .LVU756
 2141 01d2 03A8     		add	r0, sp, #12
 2142              	.LVL242:
 720:uCOSII/Source/os_flag.c ****         OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run          
 2143              		.loc 1 720 9 is_stmt 0 view .LVU757
 2144 01d4 FFF7FEFF 		bl	OS_FlagUnlink
 2145              	.LVL243:
 721:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 2146              		.loc 1 721 9 is_stmt 1 view .LVU758
 721:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 2147              		.loc 1 721 17 is_stmt 0 view .LVU759
 2148 01d8 104B     		ldr	r3, .L159+8
 2149 01da 1B68     		ldr	r3, [r3]
 721:uCOSII/Source/os_flag.c ****         OS_EXIT_CRITICAL();
 2150              		.loc 1 721 34 view .LVU760
 2151 01dc 83F83440 		strb	r4, [r3, #52]
 722:uCOSII/Source/os_flag.c ****         flags_rdy                = (OS_FLAGS)0;
 2152              		.loc 1 722 9 is_stmt 1 view .LVU761
 2153 01e0 3846     		mov	r0, r7
 2154 01e2 FFF7FEFF 		bl	OS_CPU_SR_Restore
 2155              	.LVL244:
 722:uCOSII/Source/os_flag.c ****         flags_rdy                = (OS_FLAGS)0;
 2156              		.loc 1 722 27 view .LVU762
 723:uCOSII/Source/os_flag.c ****         switch (pend_stat) {
 2157              		.loc 1 723 9 view .LVU763
 724:uCOSII/Source/os_flag.c ****             case OS_STAT_PEND_ABORT:
 2158              		.loc 1 724 9 view .LVU764
 2159 01e6 022D     		cmp	r5, #2
 2160 01e8 04D0     		beq	.L158
 731:uCOSII/Source/os_flag.c ****                  break;
 2161              		.loc 1 731 18 view .LVU765
 731:uCOSII/Source/os_flag.c ****                  break;
 2162              		.loc 1 731 24 is_stmt 0 view .LVU766
 2163 01ea 0A23     		movs	r3, #10
 2164 01ec 109A     		ldr	r2, [sp, #64]
 2165 01ee 1370     		strb	r3, [r2]
 732:uCOSII/Source/os_flag.c ****         }
 2166              		.loc 1 732 18 is_stmt 1 view .LVU767
 2167              	.L143:
 734:uCOSII/Source/os_flag.c ****     }
 2168              		.loc 1 734 9 view .LVU768
 734:uCOSII/Source/os_flag.c ****     }
 2169              		.loc 1 734 16 is_stmt 0 view .LVU769
 2170 01f0 0025     		movs	r5, #0
 2171              	.LVL245:
 734:uCOSII/Source/os_flag.c ****     }
 2172              		.loc 1 734 16 view .LVU770
 2173 01f2 21E7     		b	.L122
 2174              	.LVL246:
 2175              	.L158:
ARM GAS  /tmp/ccgMzuMT.s 			page 72


 726:uCOSII/Source/os_flag.c ****                  break;
 2176              		.loc 1 726 18 is_stmt 1 view .LVU771
 726:uCOSII/Source/os_flag.c ****                  break;
 2177              		.loc 1 726 24 is_stmt 0 view .LVU772
 2178 01f4 0E23     		movs	r3, #14
 2179 01f6 109A     		ldr	r2, [sp, #64]
 2180 01f8 1370     		strb	r3, [r2]
 727:uCOSII/Source/os_flag.c **** 
 2181              		.loc 1 727 18 is_stmt 1 view .LVU773
 2182 01fa F9E7     		b	.L143
 2183              	.LVL247:
 2184              	.L145:
 747:uCOSII/Source/os_flag.c ****                  break;
 2185              		.loc 1 747 18 view .LVU774
 747:uCOSII/Source/os_flag.c ****                  break;
 2186              		.loc 1 747 36 is_stmt 0 view .LVU775
 2187 01fc 3389     		ldrh	r3, [r6, #8]
 2188 01fe 2B43     		orrs	r3, r3, r5
 2189 0200 3381     		strh	r3, [r6, #8]	@ movhi
 748:uCOSII/Source/os_flag.c **** #endif
 2190              		.loc 1 748 18 is_stmt 1 view .LVU776
 2191 0202 62E7     		b	.L144
 2192              	.LVL248:
 2193              	.L146:
 751:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 2194              		.loc 1 751 18 view .LVU777
 2195 0204 FFF7FEFF 		bl	OS_CPU_SR_Restore
 2196              	.LVL249:
 751:uCOSII/Source/os_flag.c ****                  *perr = OS_ERR_FLAG_WAIT_TYPE;
 2197              		.loc 1 751 36 view .LVU778
 752:uCOSII/Source/os_flag.c ****                  return ((OS_FLAGS)0);
 2198              		.loc 1 752 18 view .LVU779
 752:uCOSII/Source/os_flag.c ****                  return ((OS_FLAGS)0);
 2199              		.loc 1 752 24 is_stmt 0 view .LVU780
 2200 0208 6F23     		movs	r3, #111
 2201 020a 109A     		ldr	r2, [sp, #64]
 2202 020c 1370     		strb	r3, [r2]
 753:uCOSII/Source/os_flag.c ****         }
 2203              		.loc 1 753 18 is_stmt 1 view .LVU781
 753:uCOSII/Source/os_flag.c ****         }
 2204              		.loc 1 753 25 is_stmt 0 view .LVU782
 2205 020e 0025     		movs	r5, #0
 2206              	.LVL250:
 753:uCOSII/Source/os_flag.c ****         }
 2207              		.loc 1 753 25 view .LVU783
 2208 0210 12E7     		b	.L122
 2209              	.L160:
 2210 0212 00BF     		.align	2
 2211              	.L159:
 2212 0214 00000000 		.word	OSIntNesting
 2213 0218 00000000 		.word	OSLockNesting
 2214 021c 00000000 		.word	OSTCBCur
 2215              		.cfi_endproc
 2216              	.LFE5:
 2218              		.text
 2219              	.Letext0:
 2220              		.file 2 "uCOSII/Ports/ARM-Cortex-M4/Generic/GNU/os_cpu.h"
ARM GAS  /tmp/ccgMzuMT.s 			page 73


 2221              		.file 3 "uCOSII/Include/ucos_ii.h"
ARM GAS  /tmp/ccgMzuMT.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 os_flag.c
     /tmp/ccgMzuMT.s:18     .text.OS_FlagBlock:0000000000000000 $t
     /tmp/ccgMzuMT.s:25     .text.OS_FlagBlock:0000000000000000 OS_FlagBlock
     /tmp/ccgMzuMT.s:146    .text.OS_FlagBlock:0000000000000060 $d
     /tmp/ccgMzuMT.s:153    .text.OSFlagAccept:0000000000000000 $t
     /tmp/ccgMzuMT.s:160    .text.OSFlagAccept:0000000000000000 OSFlagAccept
     /tmp/ccgMzuMT.s:231    .text.OSFlagAccept:0000000000000038 $d
     /tmp/ccgMzuMT.s:236    .text.OSFlagAccept:000000000000003c $t
     /tmp/ccgMzuMT.s:401    .rodata.OSFlagCreate.str1.4:0000000000000000 $d
     /tmp/ccgMzuMT.s:405    .text.OSFlagCreate:0000000000000000 $t
     /tmp/ccgMzuMT.s:412    .text.OSFlagCreate:0000000000000000 OSFlagCreate
     /tmp/ccgMzuMT.s:506    .text.OSFlagCreate:0000000000000044 $d
     /tmp/ccgMzuMT.s:513    .text.OSFlagNameGet:0000000000000000 $t
     /tmp/ccgMzuMT.s:520    .text.OSFlagNameGet:0000000000000000 OSFlagNameGet
     /tmp/ccgMzuMT.s:617    .text.OSFlagNameGet:0000000000000048 $d
     /tmp/ccgMzuMT.s:622    .text.OSFlagNameSet:0000000000000000 $t
     /tmp/ccgMzuMT.s:629    .text.OSFlagNameSet:0000000000000000 OSFlagNameSet
     /tmp/ccgMzuMT.s:705    .text.OSFlagNameSet:0000000000000034 $d
     /tmp/ccgMzuMT.s:710    .text.OSFlagPendGetFlagsRdy:0000000000000000 $t
     /tmp/ccgMzuMT.s:717    .text.OSFlagPendGetFlagsRdy:0000000000000000 OSFlagPendGetFlagsRdy
     /tmp/ccgMzuMT.s:755    .text.OSFlagPendGetFlagsRdy:0000000000000014 $d
     /tmp/ccgMzuMT.s:760    .text.OSFlagQuery:0000000000000000 $t
     /tmp/ccgMzuMT.s:767    .text.OSFlagQuery:0000000000000000 OSFlagQuery
     /tmp/ccgMzuMT.s:831    .text.OS_FlagInit:0000000000000000 $t
     /tmp/ccgMzuMT.s:838    .text.OS_FlagInit:0000000000000000 OS_FlagInit
     /tmp/ccgMzuMT.s:932    .text.OS_FlagInit:0000000000000048 $d
     /tmp/ccgMzuMT.s:939    .text.OS_FlagUnlink:0000000000000000 $t
     /tmp/ccgMzuMT.s:946    .text.OS_FlagUnlink:0000000000000000 OS_FlagUnlink
     /tmp/ccgMzuMT.s:1015   .text.OS_FlagTaskRdy:0000000000000000 $t
     /tmp/ccgMzuMT.s:1021   .text.OS_FlagTaskRdy:0000000000000000 OS_FlagTaskRdy
     /tmp/ccgMzuMT.s:1101   .text.OS_FlagTaskRdy:0000000000000048 $d
     /tmp/ccgMzuMT.s:1107   .text.OSFlagDel:0000000000000000 $t
     /tmp/ccgMzuMT.s:1114   .text.OSFlagDel:0000000000000000 OSFlagDel
     /tmp/ccgMzuMT.s:1335   .text.OSFlagDel:00000000000000b4 $d
     /tmp/ccgMzuMT.s:1342   .text.OSFlagPost:0000000000000000 $t
     /tmp/ccgMzuMT.s:1349   .text.OSFlagPost:0000000000000000 OSFlagPost
     /tmp/ccgMzuMT.s:1492   .text.OSFlagPost:000000000000006c $d
     /tmp/ccgMzuMT.s:1497   .text.OSFlagPost:000000000000007c $t
     /tmp/ccgMzuMT.s:1659   .text.OSFlagPend:0000000000000000 $t
     /tmp/ccgMzuMT.s:1666   .text.OSFlagPend:0000000000000000 OSFlagPend
     /tmp/ccgMzuMT.s:1787   .text.OSFlagPend:0000000000000060 $d
     /tmp/ccgMzuMT.s:1792   .text.OSFlagPend:0000000000000064 $t
     /tmp/ccgMzuMT.s:2212   .text.OSFlagPend:0000000000000214 $d

UNDEFINED SYMBOLS
OSTCBCur
OSRdyTbl
OSRdyGrp
OS_CPU_SR_Save
OS_CPU_SR_Restore
OSIntNesting
OSFlagFreeList
OS_StrLen
OS_MemClr
OSFlagTbl
OS_Sched
ARM GAS  /tmp/ccgMzuMT.s 			page 75


OSLockNesting
