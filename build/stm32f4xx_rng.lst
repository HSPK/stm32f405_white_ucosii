ARM GAS  /tmp/ccq8bQx7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_rng.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RNG_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	RNG_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	RNG_DeInit:
  27              	.LFB130:
  28              		.file 1 "Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
   1:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.0.2
   6:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    05-March-2012
   7:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     * @brief This file provides firmware functions to manage the following 
   8:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Initialization and Configuration 
  10:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Get 32 bit Random number      
  11:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Interrupts and flags management       
  12:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @verbatim
  14:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                               
  15:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================      
  16:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                                   How to use this driver
  17:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================          
  18:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          1. Enable The RNG controller clock using 
  19:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  20:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  21:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          2. Activate the RNG peripheral using RNG_Cmd() function.
  22:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  23:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          3. Wait until the 32 bit Random number Generator contains a valid 
  24:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            random data (using polling/interrupt mode). For more details, 
  25:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            refer to "Interrupts and flags management functions" module 
  26:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            description.
  27:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           
  28:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  30:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          5. To get another 32 bit Random number, go to step 3.       
ARM GAS  /tmp/ccq8bQx7.s 			page 2


  31:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  32:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  33:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  34:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @endverbatim
  35:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  36:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  37:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  38:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  39:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  40:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  41:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  42:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may not use this file except in compliance with the License.
  43:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may obtain a copy of the License at:
  44:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  45:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  46:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  47:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Unless required by applicable law or agreed to in writing, software 
  48:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  49:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  50:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * See the License for the specific language governing permissions and
  51:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * limitations under the License.
  52:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  53:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  54:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  55:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  56:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  57:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  58:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  59:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  60:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  61:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  62:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  63:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  64:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  65:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  66:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  67:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  68:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  69:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  70:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  71:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  72:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  73:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  74:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  75:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  76:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  77:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  78:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  79:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  80:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  81:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  82:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  83:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  84:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  85:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Initialization and Configuration functions
  86:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  87:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to 
ARM GAS  /tmp/ccq8bQx7.s 			page 3


  88:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Initialize the RNG peripheral
  89:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Enable or disable the RNG peripheral
  90:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  91:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  92:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  93:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  94:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  95:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  96:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  97:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  98:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  99:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 100:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
 101:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  29              		.loc 1 101 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 102:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
 103:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  38              		.loc 1 103 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4020     		movs	r0, #64
  41 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  42              	.LVL0:
 104:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 105:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 106:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  43              		.loc 1 106 3 view .LVU2
  44 000a 0021     		movs	r1, #0
  45 000c 4020     		movs	r0, #64
  46 000e FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  47              	.LVL1:
 107:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  48              		.loc 1 107 1 is_stmt 0 view .LVU3
  49 0012 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE130:
  53              		.section	.text.RNG_Cmd,"ax",%progbits
  54              		.align	1
  55              		.global	RNG_Cmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  59              		.fpu fpv4-sp-d16
  61              	RNG_Cmd:
  62              	.LVL2:
  63              	.LFB131:
 108:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 109:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 110:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 111:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
ARM GAS  /tmp/ccq8bQx7.s 			page 4


 112:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 113:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 114:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 115:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 116:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  64              		.loc 1 116 1 is_stmt 1 view -0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
 117:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 118:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  69              		.loc 1 118 3 view .LVU5
 119:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 120:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  70              		.loc 1 120 3 view .LVU6
  71              		.loc 1 120 6 is_stmt 0 view .LVU7
  72 0000 28B1     		cbz	r0, .L4
 121:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 122:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 123:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  73              		.loc 1 123 5 is_stmt 1 view .LVU8
  74              		.loc 1 123 13 is_stmt 0 view .LVU9
  75 0002 064A     		ldr	r2, .L6
  76 0004 1368     		ldr	r3, [r2]
  77 0006 43F00403 		orr	r3, r3, #4
  78 000a 1360     		str	r3, [r2]
  79 000c 7047     		bx	lr
  80              	.L4:
 124:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 125:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 126:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 127:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 128:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  81              		.loc 1 128 5 is_stmt 1 view .LVU10
  82              		.loc 1 128 13 is_stmt 0 view .LVU11
  83 000e 034A     		ldr	r2, .L6
  84 0010 1368     		ldr	r3, [r2]
  85 0012 23F00403 		bic	r3, r3, #4
  86 0016 1360     		str	r3, [r2]
 129:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 130:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  87              		.loc 1 130 1 view .LVU12
  88 0018 7047     		bx	lr
  89              	.L7:
  90 001a 00BF     		.align	2
  91              	.L6:
  92 001c 00080650 		.word	1342572544
  93              		.cfi_endproc
  94              	.LFE131:
  96              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
  97              		.align	1
  98              		.global	RNG_GetRandomNumber
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccq8bQx7.s 			page 5


 104              	RNG_GetRandomNumber:
 105              	.LFB132:
 131:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 132:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 133:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 134:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 135:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 136:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 137:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 138:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 139:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 140:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 141:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Get 32 bit Random number function
 142:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 143:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides a function allowing to get the 32 bit Random number  
 144:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 145:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note  Before to call this function you have to wait till DRDY flag is set,
 146:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 147:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 148:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 149:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 150:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 151:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 152:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 153:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 154:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 155:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 156:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 157:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 158:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 159:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 160:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 161:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 162:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 163:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 164:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 165:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 166:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 167:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 168:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 169:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 170:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 171:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 172:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 173:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 174:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 175:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 176:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 177:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 178:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 106              		.loc 1 178 1 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 179:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 180:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
ARM GAS  /tmp/ccq8bQx7.s 			page 6


 111              		.loc 1 180 3 view .LVU14
 112              		.loc 1 180 13 is_stmt 0 view .LVU15
 113 0000 014B     		ldr	r3, .L9
 114 0002 9868     		ldr	r0, [r3, #8]
 181:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 115              		.loc 1 181 1 view .LVU16
 116 0004 7047     		bx	lr
 117              	.L10:
 118 0006 00BF     		.align	2
 119              	.L9:
 120 0008 00080650 		.word	1342572544
 121              		.cfi_endproc
 122              	.LFE132:
 124              		.section	.text.RNG_ITConfig,"ax",%progbits
 125              		.align	1
 126              		.global	RNG_ITConfig
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	RNG_ITConfig:
 133              	.LVL3:
 134              	.LFB133:
 182:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 183:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 184:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 185:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 186:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 187:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 188:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 189:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 190:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 191:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 192:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 193:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                    Interrupts and flags management functions
 194:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 195:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 196:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to configure the RNG Interrupts and 
 197:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   to get the status and clear flags and Interrupts pending bits.
 198:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 199:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The RNG provides 3 Interrupts sources and 3 Flags:
 200:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 201:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Flags :
 202:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ---------- 
 203:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 204:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          random data. it is cleared by reading the valid data 
 205:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          (using RNG_GetRandomNumber() function).
 206:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 207:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      2. RNG_FLAG_CECS : In the case of a seed error detection. 
 208:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 209:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      3. RNG_FLAG_SECS : In the case of a clock error detection.
 210:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 211:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 212:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Interrupts :
 213:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------
 214:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    if enabled, an RNG interrupt is pending :
 215:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
ARM GAS  /tmp/ccq8bQx7.s 			page 7


 216:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    1.  In the case of the RNG_DR register contains valid random data. 
 217:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 218:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 219:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed. 
 220:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 221:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or 
 222:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    2. In the case of a seed error : One of the following faulty sequences has 
 223:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       been detected:
 224:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 64 consecutive bits at the same value (0 or 1)
 225:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 226:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 227:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 228:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 229:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or
 230:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 231:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       was not correctly detected (fPLL48CLK< fHCLK/16).
 232:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
 233:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 234:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       @note In this case, User have to check that the clock controller is 
 235:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             correctly configured to provide the RNG clock. 
 236:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 237:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Managing the RNG controller events :
 238:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------------------------------ 
 239:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The user should identify which mode will be used in his application to manage 
 240:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   the RNG controller events: Polling mode or Interrupt mode.
 241:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 242:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   1.  In the Polling Mode it is advised to use the following functions:
 243:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetFlagStatus() : to check if flags events occur. 
 244:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearFlag()     : to clear the flags events.
 245:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 246:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 247:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         by reading the Random number data.      
 248:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 250:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ITConfig()       : to enable or disable the interrupt source.
 251:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetITStatus()    : to check if Interrupt occurs.
 252:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 253:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                 (corresponding Flag). 
 254:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 255:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 256:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 257:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 258:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 259:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 260:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 261:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 262:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 263:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 264:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 265:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 266:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 267:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 268:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 269:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 270:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 271:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 272:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
ARM GAS  /tmp/ccq8bQx7.s 			page 8


 273:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 274:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 275:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 135              		.loc 1 275 1 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 276:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 277:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 140              		.loc 1 277 3 view .LVU18
 278:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 279:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 141              		.loc 1 279 3 view .LVU19
 142              		.loc 1 279 6 is_stmt 0 view .LVU20
 143 0000 28B1     		cbz	r0, .L12
 280:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 281:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 282:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 144              		.loc 1 282 5 is_stmt 1 view .LVU21
 145              		.loc 1 282 13 is_stmt 0 view .LVU22
 146 0002 064A     		ldr	r2, .L14
 147 0004 1368     		ldr	r3, [r2]
 148 0006 43F00803 		orr	r3, r3, #8
 149 000a 1360     		str	r3, [r2]
 150 000c 7047     		bx	lr
 151              	.L12:
 283:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 284:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 285:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 286:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 287:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 152              		.loc 1 287 5 is_stmt 1 view .LVU23
 153              		.loc 1 287 13 is_stmt 0 view .LVU24
 154 000e 034A     		ldr	r2, .L14
 155 0010 1368     		ldr	r3, [r2]
 156 0012 23F00803 		bic	r3, r3, #8
 157 0016 1360     		str	r3, [r2]
 288:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 289:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 158              		.loc 1 289 1 view .LVU25
 159 0018 7047     		bx	lr
 160              	.L15:
 161 001a 00BF     		.align	2
 162              	.L14:
 163 001c 00080650 		.word	1342572544
 164              		.cfi_endproc
 165              	.LFE133:
 167              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 168              		.align	1
 169              		.global	RNG_GetFlagStatus
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	RNG_GetFlagStatus:
 176              	.LVL4:
ARM GAS  /tmp/ccq8bQx7.s 			page 9


 177              	.LFB134:
 290:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 291:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 292:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 293:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 294:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 295:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 296:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 297:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 298:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 299:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 300:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 301:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 178              		.loc 1 301 1 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 302:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 183              		.loc 1 302 3 view .LVU27
 303:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 304:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 184              		.loc 1 304 3 view .LVU28
 305:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 306:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 307:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 185              		.loc 1 307 3 view .LVU29
 186              		.loc 1 307 11 is_stmt 0 view .LVU30
 187 0000 034B     		ldr	r3, .L19
 188 0002 5B68     		ldr	r3, [r3, #4]
 189              		.loc 1 307 6 view .LVU31
 190 0004 1842     		tst	r0, r3
 191 0006 01D0     		beq	.L18
 308:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 309:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 310:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 192              		.loc 1 310 15 view .LVU32
 193 0008 0120     		movs	r0, #1
 194              	.LVL5:
 195              		.loc 1 310 15 view .LVU33
 196 000a 7047     		bx	lr
 197              	.LVL6:
 198              	.L18:
 311:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 312:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 313:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 314:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 315:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 199              		.loc 1 315 15 view .LVU34
 200 000c 0020     		movs	r0, #0
 201              	.LVL7:
 316:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 317:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 318:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 202              		.loc 1 318 3 is_stmt 1 view .LVU35
 319:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 203              		.loc 1 319 1 is_stmt 0 view .LVU36
ARM GAS  /tmp/ccq8bQx7.s 			page 10


 204 000e 7047     		bx	lr
 205              	.L20:
 206              		.align	2
 207              	.L19:
 208 0010 00080650 		.word	1342572544
 209              		.cfi_endproc
 210              	.LFE134:
 212              		.section	.text.RNG_ClearFlag,"ax",%progbits
 213              		.align	1
 214              		.global	RNG_ClearFlag
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv4-sp-d16
 220              	RNG_ClearFlag:
 221              	.LVL8:
 222              	.LFB135:
 320:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 321:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 322:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 323:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 324:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 325:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 326:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 327:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 328:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 329:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 330:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 331:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 332:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 333:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 334:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 223              		.loc 1 334 1 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 335:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 336:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 228              		.loc 1 336 3 view .LVU38
 337:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 338:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 229              		.loc 1 338 3 view .LVU39
 230              		.loc 1 338 13 is_stmt 0 view .LVU40
 231 0000 6FEA0010 		mvn	r0, r0, lsl #4
 232              	.LVL9:
 233              		.loc 1 338 11 view .LVU41
 234 0004 014B     		ldr	r3, .L22
 235 0006 5860     		str	r0, [r3, #4]
 339:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 236              		.loc 1 339 1 view .LVU42
 237 0008 7047     		bx	lr
 238              	.L23:
 239 000a 00BF     		.align	2
 240              	.L22:
 241 000c 00080650 		.word	1342572544
 242              		.cfi_endproc
ARM GAS  /tmp/ccq8bQx7.s 			page 11


 243              	.LFE135:
 245              		.section	.text.RNG_GetITStatus,"ax",%progbits
 246              		.align	1
 247              		.global	RNG_GetITStatus
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	RNG_GetITStatus:
 254              	.LVL10:
 255              	.LFB136:
 340:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 341:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 342:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 343:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 344:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 345:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 346:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 347:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 348:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 349:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 350:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 256              		.loc 1 350 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 351:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 261              		.loc 1 351 3 view .LVU44
 352:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 353:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 262              		.loc 1 353 3 view .LVU45
 354:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 355:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 356:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 263              		.loc 1 356 3 view .LVU46
 264              		.loc 1 356 11 is_stmt 0 view .LVU47
 265 0000 034B     		ldr	r3, .L27
 266 0002 5B68     		ldr	r3, [r3, #4]
 267              		.loc 1 356 6 view .LVU48
 268 0004 1842     		tst	r0, r3
 269 0006 01D0     		beq	.L26
 357:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 358:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 359:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 270              		.loc 1 359 15 view .LVU49
 271 0008 0120     		movs	r0, #1
 272              	.LVL11:
 273              		.loc 1 359 15 view .LVU50
 274 000a 7047     		bx	lr
 275              	.LVL12:
 276              	.L26:
 360:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 361:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 362:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 363:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 364:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
ARM GAS  /tmp/ccq8bQx7.s 			page 12


 277              		.loc 1 364 15 view .LVU51
 278 000c 0020     		movs	r0, #0
 279              	.LVL13:
 365:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 366:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 367:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 280              		.loc 1 367 3 is_stmt 1 view .LVU52
 368:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 281              		.loc 1 368 1 is_stmt 0 view .LVU53
 282 000e 7047     		bx	lr
 283              	.L28:
 284              		.align	2
 285              	.L27:
 286 0010 00080650 		.word	1342572544
 287              		.cfi_endproc
 288              	.LFE136:
 290              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 291              		.align	1
 292              		.global	RNG_ClearITPendingBit
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv4-sp-d16
 298              	RNG_ClearITPendingBit:
 299              	.LVL14:
 300              	.LFB137:
 369:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 370:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 371:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 372:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 373:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 374:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 375:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 376:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 377:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 378:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 379:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 380:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 301              		.loc 1 380 1 is_stmt 1 view -0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 381:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 382:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 306              		.loc 1 382 3 view .LVU55
 383:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 384:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 385:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 307              		.loc 1 385 3 view .LVU56
 308              		.loc 1 385 13 is_stmt 0 view .LVU57
 309 0000 C043     		mvns	r0, r0
 310              	.LVL15:
 311              		.loc 1 385 13 view .LVU58
 312 0002 C0B2     		uxtb	r0, r0
 313              		.loc 1 385 11 view .LVU59
 314 0004 014B     		ldr	r3, .L30
ARM GAS  /tmp/ccq8bQx7.s 			page 13


 315 0006 5860     		str	r0, [r3, #4]
 386:Drivers/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 316              		.loc 1 386 1 view .LVU60
 317 0008 7047     		bx	lr
 318              	.L31:
 319 000a 00BF     		.align	2
 320              	.L30:
 321 000c 00080650 		.word	1342572544
 322              		.cfi_endproc
 323              	.LFE137:
 325              		.text
 326              	.Letext0:
 327              		.file 2 "/home/way/Programs/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 328              		.file 3 "/home/way/Programs/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 329              		.file 4 "Drivers/CMSIS/Core/Include/core_cm4.h"
 330              		.file 5 "Inc/system_stm32f4xx.h"
 331              		.file 6 "Inc/stm32f4xx.h"
 332              		.file 7 "Drivers/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccq8bQx7.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rng.c
     /tmp/ccq8bQx7.s:18     .text.RNG_DeInit:0000000000000000 $t
     /tmp/ccq8bQx7.s:26     .text.RNG_DeInit:0000000000000000 RNG_DeInit
     /tmp/ccq8bQx7.s:54     .text.RNG_Cmd:0000000000000000 $t
     /tmp/ccq8bQx7.s:61     .text.RNG_Cmd:0000000000000000 RNG_Cmd
     /tmp/ccq8bQx7.s:92     .text.RNG_Cmd:000000000000001c $d
     /tmp/ccq8bQx7.s:97     .text.RNG_GetRandomNumber:0000000000000000 $t
     /tmp/ccq8bQx7.s:104    .text.RNG_GetRandomNumber:0000000000000000 RNG_GetRandomNumber
     /tmp/ccq8bQx7.s:120    .text.RNG_GetRandomNumber:0000000000000008 $d
     /tmp/ccq8bQx7.s:125    .text.RNG_ITConfig:0000000000000000 $t
     /tmp/ccq8bQx7.s:132    .text.RNG_ITConfig:0000000000000000 RNG_ITConfig
     /tmp/ccq8bQx7.s:163    .text.RNG_ITConfig:000000000000001c $d
     /tmp/ccq8bQx7.s:168    .text.RNG_GetFlagStatus:0000000000000000 $t
     /tmp/ccq8bQx7.s:175    .text.RNG_GetFlagStatus:0000000000000000 RNG_GetFlagStatus
     /tmp/ccq8bQx7.s:208    .text.RNG_GetFlagStatus:0000000000000010 $d
     /tmp/ccq8bQx7.s:213    .text.RNG_ClearFlag:0000000000000000 $t
     /tmp/ccq8bQx7.s:220    .text.RNG_ClearFlag:0000000000000000 RNG_ClearFlag
     /tmp/ccq8bQx7.s:241    .text.RNG_ClearFlag:000000000000000c $d
     /tmp/ccq8bQx7.s:246    .text.RNG_GetITStatus:0000000000000000 $t
     /tmp/ccq8bQx7.s:253    .text.RNG_GetITStatus:0000000000000000 RNG_GetITStatus
     /tmp/ccq8bQx7.s:286    .text.RNG_GetITStatus:0000000000000010 $d
     /tmp/ccq8bQx7.s:291    .text.RNG_ClearITPendingBit:0000000000000000 $t
     /tmp/ccq8bQx7.s:298    .text.RNG_ClearITPendingBit:0000000000000000 RNG_ClearITPendingBit
     /tmp/ccq8bQx7.s:321    .text.RNG_ClearITPendingBit:000000000000000c $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
